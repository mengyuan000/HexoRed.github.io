<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux系统文件与目录基本操作指令</title>
      <link href="/2019/01/29/Linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/01/29/Linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="退出linux"><a href="#退出linux" class="headerlink" title="退出linux"></a>退出linux</h3><p>linxu提供了三个推出系统的命令shutdown、halt、reboot。<br><strong>命令格式：</strong></p><pre class=" language-bash"><code class="language-bash">shutdown<span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">[</span>时间<span class="token punctuation">]</span><span class="token punctuation">[</span>警告信息<span class="token punctuation">]</span></code></pre><p><strong>选项：</strong></p><ul><li><strong>k：</strong>并不真正关机，发送警告</li><li><strong>r：</strong>关机后立即重启</li><li><strong>h：</strong>关机后不重启</li><li><strong>f：</strong>快速关机，重启时跳过fsck</li><li><strong>n：</strong>快速关机，不经过init程序</li><li><strong>c：</strong>取消一个已经运行的shutdown</li></ul><p><strong>时间：</strong></p><ul><li>now：立即退出系统</li><li>O mins：在指定时间退出系统</li><li>O hh：ss：在指定的时间退出系统</li></ul><p>Halt命令相当于“shutdown -h now”，表示是立即关机<br>Reboot命令相当于“shutdown -r now”，表示立即启动</p><p><strong>例：</strong></p><p><code>shutdown -h 10     表示10分钟后立即关机</code><br><code>shutdown -r 10     10分钟后立即重启</code><br><code>shutdown -h +4     4分钟内立即关机</code></p><h3 id="Linux中的文件颜色的区别"><a href="#Linux中的文件颜色的区别" class="headerlink" title="Linux中的文件颜色的区别"></a>Linux中的文件颜色的区别</h3><p><strong>黑色</strong>：普通文件<br><strong>红色</strong>：压缩文件<br><strong>蓝色</strong>：目录文件<br><strong>浅蓝色</strong>： 链接文件<br><strong>黄色</strong>： 设备文键盘（/dev）<br><strong>青绿色</strong>：可执行文件（/bin，/sbin）<br><strong>粉红色</strong>： 图片文件</p><p><strong>Linux目录文件：</strong></p><ul><li><strong>/：</strong>根目录</li><li><strong>/ bin，/sbin：</strong>这里放着启动时所需要的普通程序和目录程序</li><li><strong>/dev：</strong>这个目录下保存着所有的设备文件</li><li><strong>/home：</strong>用户主目录</li><li><strong>/usr：</strong> 除了上诉文件，几乎所有文件都放在这里<ul><li><strong>/sur/bin：</strong>二进制可执行文件，存放着绝大多数的应用程序</li><li><strong>/sur/sbin：</strong>存放绝大部分系统程序</li><li><strong>/sur/games：</strong>存放游戏程序和相应的数据</li><li><strong>/sur/include：</strong>保存C和C++的头文件</li><li><strong>/sur/src：</strong>存放源代码文件</li><li><strong>/sur/doc：</strong>存放各种文档文件</li><li><strong>/sur/share：</strong>保存各种共享文件</li></ul></li><li><strong>/lib：</strong> 启动时所有的库文件</li><li><strong>/etc：</strong>保存着绝大部分的系统配置文件</li></ul><h3 id="文件与目录的基本操作"><a href="#文件与目录的基本操作" class="headerlink" title="文件与目录的基本操作"></a>文件与目录的基本操作</h3><h4 id="pwd命令："><a href="#pwd命令：" class="headerlink" title="pwd命令："></a>pwd命令：</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">pwd</span></code></pre><p>pwd命令用于显示当前用户所在的绝对路径</p><h4 id="cd命令："><a href="#cd命令：" class="headerlink" title="cd命令："></a>cd命令：</h4><pre><code>cd 【路径】          cd .. 返回上一级</code></pre><p>cd命令用于改变当前路径</p><h4 id="mkdir命令："><a href="#mkdir命令：" class="headerlink" title="mkdir命令："></a>mkdir命令：</h4><pre class=" language-bash"><code class="language-bash">mkdir【参数】<span class="token operator">&lt;</span>目录名<span class="token operator">></span>       （ -P  循环建立目录）</code></pre><p><strong>例子：</strong><br><code>mkdir /d1         //创建目录d1</code><br><code>mkdir -p d3/d4   //创建d3文件夹以及d3里面的d4</code></p><h4 id="ls命令："><a href="#ls命令：" class="headerlink" title="ls命令："></a>ls命令：</h4><p>显示目录</p><pre class=" language-bash"><code class="language-bash">ls命令：ls 【参数】 目录名</code></pre><p><strong>参数：</strong></p><ul><li><strong>-a：</strong>显示目录下所有文件</li><li><strong>-l：</strong>以具体详细信息显示目录下的内容</li><li><strong>-f：</strong>显示文件名同时显示类型</li><li><strong>-r：</strong>第归显示</li><li><strong>-t：</strong>按照时间显示</li><li><strong>d：</strong>目录</li><li><strong>l：</strong>符号连接</li><li><strong>b：</strong>块设备文件</li><li><strong>c：</strong>字符设备文件 </li></ul><p><strong>例子：</strong><br><code>ls            //显示当前目录下所有文件</code><br><code>ls /bin/      //显示/bin/目录下所有文件</code></p><h4 id="touch命令："><a href="#touch命令：" class="headerlink" title="touch命令："></a>touch命令：</h4><p> 改变文件的时间记录、创建空文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> 【参数】文家列表</code></pre><p><strong>参数：</strong></p><ul><li><strong>-t：</strong> 用给定时间更改文件的时间</li></ul><p><strong>例如：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> -t 200809121025 file1    <span class="token comment" spellcheck="true">#将file1的时间改为2008年9月12号10点25分，若文件不存在，将新建一个</span></code></pre><h4 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令:"></a>cp命令:</h4><p>将给出的文件会文件夹移动到制定目录下</p><pre class=" language-bash"><code class="language-bash">cp【参数】 源文件或目录  目标文件或目录</code></pre><p><strong>参数：</strong></p><ul><li><strong>-a：</strong>在复制目录中使用，它保留连接、文件属性并第归的复制目录</li><li><strong>-f：</strong>若文件在目标路径中则强制覆盖</li><li><strong>-i：</strong>当文件在目标路径中存在提示并要求用户确认是否覆盖</li><li><strong>-r：</strong>若给出的源文件是一个目录文件，此时cp将第归复制该目录下所有的子目录和文件</li><li><strong>-p：</strong>除复制源文件 的内容外，还将把其修改时间和访问权限也复制到新文件中</li></ul><p><strong>例子：</strong></p><p><code>cp -i exam1.c  /usr/wang/</code><br>将文件exam1.c复制到/sur /wang / 目录下，提示用户确认  是否覆盖</p><p><code>cp -i exam1.c  /usr/wang/  shiyan1.c</code><br>将文件exam1.c复制到/sur /wang / 目录下，并改名为shiyan.c, 提示用户确认  是否覆盖</p><p><code>cp -r /usr/xu/   /usr/wang/</code><br>将/usr/xu/ 下所有文件都复制到/usr/wang/</p><h4 id="mv命令："><a href="#mv命令：" class="headerlink" title="mv命令："></a>mv命令：</h4><p>该命令是为文件或名录改名或者把文件由一个目录移动到另一个目录中去</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">mv</span> 【参数】源文件或目录  目标文件或目录</code></pre><p><strong>参数：</strong></p><ul><li><strong>-f：</strong>忽略存在的文件，不给提示强制移动</li><li><strong>-i：</strong>进行交互式移动</li><li><strong>-r：</strong>指示rm将参数列出全部目录和子目录第归移动</li><li><strong>-v：</strong>显示命令执行过程</li></ul><p><strong>例子：</strong></p><p><code>mv -i /usr/xu</code><br>将/ usr /xu 中的所有文件移动到当前目录。如果文件存在提示用户是否移动</p><p><code>mv wch.txt wjz.doc</code><br>将文件重命名为wjz.doc</p><p><code>mv  /m1/f1   /m2/</code><br>将m1目录下的文件f1移动到m2目录下</p><p><code>mv -f /d1* /d2/</code><br>将目录d1下的所有文件移动到d2目录下，如果文件 不存在，不给出任何指示。</p><h4 id="rm命令："><a href="#rm命令：" class="headerlink" title="rm命令："></a>rm命令：</h4><p>删除一个目录中的一个或多个<br><strong>例子：</strong><br><code>rm -i wch.txt wjz.doc</code><br>删除文件wch.txt  wjz.doc  ,用户会对每个文件 进行删除确认</p><p><code>rm /m1/f1</code><br>删除m1目录下的所有文件</p><p><code>rm -f  /m1/*</code><br> 强制删除m1目录下的所有文件</p><p><code>rm -rf  /m1/</code><br>  第归强制删除m1目录下的所有文件</p><h4 id="clear命令："><a href="#clear命令：" class="headerlink" title="clear命令："></a>clear命令：</h4><p>清屏</p><pre class=" language-bash"><code class="language-bash"><span class="token function">clear</span></code></pre><h3 id="文件连接命令"><a href="#文件连接命令" class="headerlink" title="文件连接命令"></a>文件连接命令</h3><h4 id="ln-命令："><a href="#ln-命令：" class="headerlink" title="ln 命令："></a>ln 命令：</h4><p>给文件之间创建链接，用户可以利用该链接直接进入被链接的目录而不是使用较长的名字</p><pre class=" language-bash"><code class="language-bash">In【参数】目标  链接名</code></pre><p><strong>参数：</strong></p><ul><li><strong>-f：</strong>链接时直接覆盖已存在的链接名</li><li><strong>-d：</strong>允许系统管理者硬链接自己的目录</li><li><strong>-i：</strong>连接时询问用户</li><li><strong>-n：</strong>在进行软链接时，将链接文件视为一般的文件</li><li><strong>-b：</strong>将在链接时会被覆盖或者删除</li></ul><p><strong>例子：</strong><br><code>In  /etc/abc  /abc.hard</code><br>给文件/etc/abc 建立一个硬链接到 /abc.hard</p><p><code>In  -s  /usr/local/qq   /qq.soft</code><br>给文件/usr/local/qq 创建一个软链接，链接名为/qq.soft</p><h3 id="文件内容操作命令"><a href="#文件内容操作命令" class="headerlink" title="文件内容操作命令"></a>文件内容操作命令</h3><h4 id="cat命令："><a href="#cat命令：" class="headerlink" title="cat命令："></a>cat命令：</h4><p>主要用来显示文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> 【选项】文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-n：</strong> 由1开始对所有输出的行数编号</li><li><strong>-b：</strong>与-n相似，所不同的是对空白行不编号</li><li><strong>-s： </strong>当遇到有连续两行以上的空白行时，就代换为一行空白行</li><li><strong>-v：</strong>用一种特殊形式显示控制字符，LFD与TAB除外</li><li><strong>E： </strong>在每行的末尾显示一个$符。要与 -v选项一起使用</li></ul><p><strong>例子：</strong><br><code>cat readme.txt</code>             在屏幕上显示readme.txt文件的内容<br><code>cat text1 text2 &gt; text3</code>     把文件text1和文件 text2的内容合并起来，放入text3<br><code>cat text3</code>                查看text3的内容<br><code>cat -n text1 &gt; text2</code>         把文件text1的内容加上 行号后输入text2中<br><code>cat -b text1 text2 &gt;&gt; text4</code>   把文件text1和text2的内容加上行号后（空白行不加）之后将内容附加到文件text4。</p><h4 id="more命令："><a href="#more命令：" class="headerlink" title="more命令："></a>more命令：</h4><p>分页显示文件内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">more</span> 【选项】 文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-num：  </strong>一次显示的行数</li><li><strong>-d：       </strong>提示使用者，在画面下方显示【press space to continue，q to quit】</li><li><strong>-f：        </strong>计算行数时，以实际上的行数，而非自动换行后的行数</li><li><strong>-p：        </strong>不已卷动的方式显示每一页，而是先清屏后在显示</li><li><strong>c：         </strong>与p类似，不同的是先显示内容，再清除其他旧资料</li><li><strong>-s：        </strong>当遇到两行以上的连续空白时，就代换为一行空白</li><li><strong>+num： </strong>从第几行开始显示</li></ul><p><strong>例子：</strong><br><code>more +20 testfile</code> 从第20行开始显示textfile</p><p><code>ls |more</code>     分页显示当前目录下的文件</p><h4 id="less命令："><a href="#less命令：" class="headerlink" title="less命令："></a>less命令：</h4><p>和more命令一样，可以用pgup和pgdn翻页查看，q键推出</p><h4 id="head命令："><a href="#head命令：" class="headerlink" title="head命令："></a>head命令：</h4><p> 查前几行    例子：head -15 files   //查看前15行</p><h4 id="tail命令："><a href="#tail命令：" class="headerlink" title="tail命令："></a>tail命令：</h4><p>和head相反</p><h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><h4 id="find命令："><a href="#find命令：" class="headerlink" title="find命令："></a>find命令：</h4><p>寻找条件可以使用一个由逻辑运算符not、and、or组成的复合条件<br><strong>and：用“-a”表示，or： 用“-o”表示，not： 用“！”表示</strong></p><pre class=" language-bash"><code class="language-bash">find【路径】【参数】【文件名】</code></pre><p><strong>参数：</strong></p><ul><li><strong>-name：</strong>“文件名”，表示查找指定名称文件</li><li><strong>-lname：</strong>“文件名”，检查指定文件所有的连接文件</li><li><strong>-user：</strong>用户名，查找指定用户拥有的文件</li><li><strong>-group：</strong>组名，查找指定组拥有的文件</li></ul><p><strong>例子：</strong><br><code>find -name practice -print</code><br>在登陆目录的所有目录中使用find来定位每一个名为practice的文件并输出其路径名</p><p><code>find .-name ‘main*’</code><br>查找当前目录下所有以‘main’开头的文件</p><p><code>find  .-name ‘tmp’ -xtype c -user ‘init’</code><br>查找当前目录中文件名为tmp文件类型为c用户名为init的文件 </p><p><code>find / -name ‘tmp’  -o  -name ‘main*’</code><br>查找根目录下文件名为tmp胡区配main*的所有文件</p><p><code>find ！ -name ‘tmp’</code><br>查询登陆目录中文件名不是tmp的所有文件</p><h3 id="文件内容查询命令"><a href="#文件内容查询命令" class="headerlink" title="文件内容查询命令"></a>文件内容查询命令</h3><h3 id="grep命令："><a href="#grep命令：" class="headerlink" title="grep命令："></a>grep命令：</h3><p>通知用户在什么文件中搜索与指定的模式匹配的字符串，并且打印出所有包含该字符串的文本行</p><pre class=" language-bash"><code class="language-bash">grep【选项】文件名1，文件名2…….n</code></pre><p><strong>选项：</strong></p><ul><li><strong>-i：</strong>查找时忽略字母的大小写</li><li><strong>-l：</strong>仅输出包含该目标字符串文件的文件名</li><li><strong>-v：</strong>输出不包含目标字符串的行</li><li><strong>-n：</strong>输出每个包含有目标字符串的行及其行号</li></ul><p><strong>例子：</strong><br><code>grep ‘ssssyyyuuuu’ test-g tts</code><br>单引号指示shell不解释引号内的任何字符。在test-g和tts中查找ssssyyyuuuu<br><code>grep ‘text file’stdio.h</code>    在stdio.h中搜索字符串text file<br><code>grep ‘^a’ text-g</code>            以a开头的行不会被输出<br><code>grep ‘\^a’ text-g</code>            以a开头的行会被输出<br><code>grep ‘t$’ text-g</code>        以t结尾的行会被输出<br><code>grep n ‘^...$’ text-g</code>     输出从行的开始到结尾只有3个任意字符的行号<br><code>grep -n ‘^$’</code>               输出所有带行号的空行</p><h4 id="egrep命令："><a href="#egrep命令：" class="headerlink" title="egrep命令："></a>egrep命令：</h4><p>和grep一样</p><h4 id="fgrep命令："><a href="#fgrep命令：" class="headerlink" title="fgrep命令："></a>fgrep命令：</h4><p>检索固定字符串</p><h3 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h3><h4 id="sort命令："><a href="#sort命令：" class="headerlink" title="sort命令："></a>sort命令：</h4><p>逐行对文件中的内容进行排序</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sort</span> 【选项】文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-d：</strong>可以使sort忽略标点符号和一些其它特殊符号，而对字母、数字和空格进行排序，即按字典顺序排序</li><li><strong>-f：</strong>不区分大小写进行排序</li><li><strong>-n：</strong>按数值排序，不按ascii码排序</li><li><strong>-r：</strong>反向排序</li><li><strong>+n1 -n2：</strong>第n1个分格符之后第n2个分格符之前的字段，默认的分隔符为空格，分隔符从1开始算起</li><li><strong>-k n：</strong> 按第n字段排序</li><li><strong>-tx：</strong>以任意字符x作为定界符</li><li><strong>-o arg：</strong>输出置于文件arg中</li></ul><p><strong>例子：</strong><br><code>sort d test-g</code>      对文件test-g排序<br><code>sort -f test-g</code>        将大写字母和小写字母同等对待<br><code>sort +1 -2 myfile</code>      以第2字段为关键字对文件排序<br><code>sort -n my</code>           对文件安数值排序<br><code>sort -k 4 mts</code>        从第4个字段开始排序<br><code>sort +3 ressh</code>       以第4字段为关键字对文件排序<br><code>sort spfile -o ssfile</code> 将排序结果输出到指定文件<br><code>cat veglist fruitlist | sort &gt; mylist</code>  当前目录中的文件合并后送给sort排序，并把排序后的文件保存为mylist</p><h3 id="文件统计命令"><a href="#文件统计命令" class="headerlink" title="文件统计命令"></a>文件统计命令</h3><h4 id="wc命令："><a href="#wc命令：" class="headerlink" title="wc命令："></a>wc命令：</h4><p>统计文件中的行数、单词数、字符数</p><pre class=" language-bash"><code class="language-bash">wc【选项】 文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-c：</strong>统计字符数</li><li><strong>-w：</strong>单词数</li><li><strong>-l：</strong>行数</li></ul><h3 id="文件帮助"><a href="#文件帮助" class="headerlink" title="文件帮助"></a>文件帮助</h3><h4 id="man指令"><a href="#man指令" class="headerlink" title="man指令"></a>man指令</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">man</span> 【指令】</code></pre><p>简短描述： whatis man</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20个非常有用的JAVA程序片段</title>
      <link href="/2019/01/28/20%E4%B8%AA%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84JAVA%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5/"/>
      <url>/2019/01/28/20%E4%B8%AA%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84JAVA%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>Java是目前使用率最高且最丰富的语言，基本大型公司都是首选java,下面是20段Java程序片段，应该会用得到</p><h3 id="1-字符串有整型的相互转换"><a href="#1-字符串有整型的相互转换" class="headerlink" title="1.字符串有整型的相互转换"></a>1.字符串有整型的相互转换</h3><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//integer to numeric string  </span><span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//numeric string to an int</span></code></pre><h3 id="2-向文件末尾添加内容"><a href="#2-向文件末尾添加内容" class="headerlink" title="2. 向文件末尾添加内容"></a>2. 向文件末尾添加内容</h3><pre class=" language-java"><code class="language-java">BufferedWriter out <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>”filename”<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>”aString”<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// error processing code  </span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="3-得到当前方法的名字"><a href="#3-得到当前方法的名字" class="headerlink" title="3.得到当前方法的名字"></a>3.得到当前方法的名字</h3><pre class=" language-java"><code class="language-java">String methodName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-转字符串到日期"><a href="#4-转字符串到日期" class="headerlink" title="4.转字符串到日期"></a>4.转字符串到日期</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date <span class="token operator">=</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date String<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者是：</p><pre class=" language-java"><code class="language-java">SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span> <span class="token string">"dd.MM.yyyy"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  Date date <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> myString <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-使用JDBC链接Oracle"><a href="#5-使用JDBC链接Oracle" class="headerlink" title="5.使用JDBC链接Oracle"></a>5.使用JDBC链接Oracle</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleJdbcTest</span>  <span class="token punctuation">{</span>      String driverClass <span class="token operator">=</span> <span class="token string">"oracle.jdbc.driver.OracleDriver"</span><span class="token punctuation">;</span>      Connection con<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FileInputStream fs<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span>SQLException<span class="token punctuation">,</span> FileNotFoundException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>          String url <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String userName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String password <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          con<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          PreparedStatement ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select SYSDATE from dual"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// do the thing you do  </span>        <span class="token punctuation">}</span>          rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          OracleJdbcTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OracleJdbcTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          test<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          test<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="6-把-Java-util-Date-转成-sql-Date"><a href="#6-把-Java-util-Date-转成-sql-Date" class="headerlink" title="6.把 Java util.Date 转成 sql.Date"></a>6.把 Java util.Date 转成 sql.Date</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date utilDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date sqlDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>utilDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-使用NIO进行快速的文件拷贝"><a href="#7-使用NIO进行快速的文件拷贝" class="headerlink" title="7.使用NIO进行快速的文件拷贝"></a>7.使用NIO进行快速的文件拷贝</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fileCopy</span><span class="token punctuation">(</span> File in<span class="token punctuation">,</span> File out <span class="token punctuation">)</span>              <span class="token keyword">throws</span> IOException      <span class="token punctuation">{</span>          FileChannel inChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span> in <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          FileChannel outChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span> out <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span>         <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//          inChannel.transferTo(0, inChannel.size(), outChannel);     </span> <span class="token comment" spellcheck="true">// original -- apparently has trouble copying large files on Windows  </span>            <span class="token comment" spellcheck="true">// magic number for Windows, 64Mb - 32Kb)  </span>            <span class="token keyword">int</span> maxCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> size <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> position <span class="token operator">&lt;</span> size <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                 position <span class="token operator">+=</span> inChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span> position<span class="token punctuation">,</span> maxCount<span class="token punctuation">,</span> outChannel <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">finally</span>         <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> inChannel <span class="token operator">!=</span> null <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                 inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> outChannel <span class="token operator">!=</span> null <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  outChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h3 id="8-创建图片的缩略图"><a href="#8-创建图片的缩略图" class="headerlink" title="8.创建图片的缩略图"></a>8.创建图片的缩略图</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createThumbnail</span><span class="token punctuation">(</span>String filename<span class="token punctuation">,</span> <span class="token keyword">int</span> thumbWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> thumbHeight<span class="token punctuation">,</span> <span class="token keyword">int</span> quality<span class="token punctuation">,</span> String outFilename<span class="token punctuation">)</span>         <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> FileNotFoundException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// load image from filename  </span>        Image image <span class="token operator">=</span> Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>          MediaTracker mediaTracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaTracker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mediaTracker<span class="token punctuation">.</span><span class="token function">addImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mediaTracker<span class="token punctuation">.</span><span class="token function">waitForID</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// use this to test for errors at this point: System.out.println(mediaTracker.isErrorAny());  </span>        <span class="token comment" spellcheck="true">// determine thumbnail size from WIDTH and HEIGHT  </span>        <span class="token keyword">double</span> thumbRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>thumbWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>thumbHeight<span class="token punctuation">;</span>          <span class="token keyword">int</span> imageWidth <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> imageHeight <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> imageRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>imageWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>imageHeight<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbRatio <span class="token operator">&lt;</span> imageRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>              thumbHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thumbWidth <span class="token operator">/</span> imageRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              thumbWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thumbHeight <span class="token operator">*</span> imageRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// draw original image to thumbnail image object and  </span>        <span class="token comment" spellcheck="true">// scale it to the new size on-the-fly  </span>        BufferedImage thumbImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>thumbWidth<span class="token punctuation">,</span>thumbHeight<span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>          Graphics2D graphics2D <span class="token operator">=</span> thumbImage<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          graphics2D<span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span>RenderingHints<span class="token punctuation">.</span>KEY_INTERPOLATION<span class="token punctuation">,</span> RenderingHints<span class="token punctuation">.</span>VALUE_INTERPOLATION_BILINEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>          graphics2D<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> thumbWidth<span class="token punctuation">,</span> thumbHeight<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// save thumbnail image to outFilename  </span>        BufferedOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          JPEGImageEncoder encoder <span class="token operator">=</span> JPEGCodec<span class="token punctuation">.</span><span class="token function">createJPEGEncoder</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>          JPEGEncodeParam param <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">getDefaultJPEGEncodeParam</span><span class="token punctuation">(</span>thumbImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          quality <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>quality<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          param<span class="token punctuation">.</span><span class="token function">setQuality</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>quality <span class="token operator">/</span> <span class="token number">100.0f</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          encoder<span class="token punctuation">.</span><span class="token function">setJPEGEncodeParam</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>          encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>thumbImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><h3 id="9-创建-JSON-格式的数据"><a href="#9-创建-JSON-格式的数据" class="headerlink" title="9.创建 JSON 格式的数据"></a>9.创建 JSON 格式的数据</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  JSONObject json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"Mumbai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  String output <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="10-使用iText-JAR生成PDF"><a href="#10-使用iText-JAR生成PDF" class="headerlink" title="10.使用iText JAR生成PDF"></a>10.使用iText JAR生成PDF</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>Paragraph<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>PdfWriter<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratePDF</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              OutputStream file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Test.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              PdfWriter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"Hello Kiran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="11-HTTP-代理设置"><a href="#11-HTTP-代理设置" class="headerlink" title="11.HTTP 代理设置"></a>11.HTTP 代理设置</h3><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyHost"</span><span class="token punctuation">,</span> <span class="token string">"someProxyURL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyPort"</span><span class="token punctuation">,</span> <span class="token string">"someProxyPort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyUser"</span><span class="token punctuation">,</span> <span class="token string">"someUserName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyPassword"</span><span class="token punctuation">,</span> <span class="token string">"somePassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="12-单实例Singleton-示例"><a href="#12-单实例Singleton-示例" class="headerlink" title="12.单实例Singleton 示例"></a>12.单实例Singleton 示例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSingleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> SimpleSingleton singleInstance <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Marking default constructor private  </span>    <span class="token comment" spellcheck="true">//to avoid direct instantiation.  </span>    <span class="token keyword">private</span> <span class="token function">SimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//Get instance for class SimpleSingleton  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SimpleSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> singleInstance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>另一种实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> SimpleSingleton <span class="token punctuation">{</span>      INSTANCE<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//Call the method from Singleton:  </span>SimpleSingleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="13-抓屏程序"><a href="#13-抓屏程序" class="headerlink" title="13.抓屏程序"></a>13.抓屏程序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Dimension<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Rectangle<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Robot<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Toolkit<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     Dimension screenSize <span class="token operator">=</span> Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScreenSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Rectangle screenRectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>screenSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     Robot robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     BufferedImage image <span class="token operator">=</span> robot<span class="token punctuation">.</span><span class="token function">createScreenCapture</span><span class="token punctuation">(</span>screenRectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>     ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="14-列出文件和目录"><a href="#14-列出文件和目录" class="headerlink" title="14.列出文件和目录"></a>14.列出文件和目录</h3><pre class=" language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"directoryName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Either dir does not exist or is not a directory  </span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Get filename of file or directory  </span>          String filename <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// It is also possible to filter the list of returned files.  </span>  <span class="token comment" spellcheck="true">// This example does not return any files that start with `.'.  </span>  FilenameFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    children <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The list of files can also be retrieved as File objects  </span>  File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This filter only returns directories  </span>  FileFilter fileFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>fileFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="15-创建ZIP和JAR文件"><a href="#15-创建ZIP和JAR文件" class="headerlink" title="15.创建ZIP和JAR文件"></a>15.创建ZIP和JAR文件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipIt</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usage: java ZipIt Zip.zip file1 file2 file3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          File zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>zipFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zip file already exists, please try another"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>          ZipOutputStream zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          CRC32 crc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CRC32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">=</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              String name <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Skipping: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              crc<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  crc<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Reset to beginning of input stream  </span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ZipEntry entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>ZipEntry<span class="token punctuation">.</span>STORED<span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setCompressedSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setCrc</span><span class="token punctuation">(</span>crc<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="16-解析-读取XML文件"><a href="#16-解析-读取XML文件" class="headerlink" title="16.解析/读取XML文件"></a>16.解析/读取XML文件</h3><p><strong>XML文件</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Simon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">></span></span></code></pre><p><strong>Java代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> net<span class="token punctuation">.</span>viralpatel<span class="token punctuation">.</span>java<span class="token punctuation">.</span>xmlparser<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Element<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLParser</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllUserNames</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  Document doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                  Element docEle <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getDocumentElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// Print root element of the document  </span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root element of the document: "</span>                         <span class="token operator">+</span> docEle<span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  NodeList studentList <span class="token operator">=</span> docEle<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// Print total student elements in document  </span>                System<span class="token punctuation">.</span>out                          <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total students: "</span> <span class="token operator">+</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>studentList <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          Node node <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Node<span class="token punctuation">.</span>ELEMENT_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                              System<span class="token punctuation">.</span>out                                      <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              Element e <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>                              NodeList nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Grade: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                      System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          XMLParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          parser<span class="token punctuation">.</span><span class="token function">getAllUserNames</span><span class="token punctuation">(</span><span class="token string">"c:\\test.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="17-把-Array-转换成-Map"><a href="#17-把-Array-转换成-Map" class="headerlink" title="17.把 Array 转换成 Map"></a>17.把 Array 转换成 Map</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArrayUtils<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> countries <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">"United States"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"United Kingdom"</span><span class="token punctuation">,</span> <span class="token string">"London"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> <span class="token string">"Netherland"</span><span class="token punctuation">,</span> <span class="token string">"Amsterdam"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Japan"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"France"</span><span class="token punctuation">,</span> <span class="token string">"Paris"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      Map countryCapitals <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Capital of Japan is "</span> <span class="token operator">+</span> countryCapitals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Capital of France is "</span> <span class="token operator">+</span> countryCapitals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"France"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="18-发送邮件"><a href="#18-发送邮件" class="headerlink" title="18.发送邮件"></a>18.发送邮件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postMail</span><span class="token punctuation">(</span> String recipients<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String message <span class="token punctuation">,</span> String from<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException  <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> debug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Set the host smtp address  </span>     Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.host"</span><span class="token punctuation">,</span> <span class="token string">"smtp.example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// create some properties and get the default Session  </span>    Session session <span class="token operator">=</span> Session<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      session<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// create a message  </span>    Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// set the from and to address  </span>    InternetAddress addressFrom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>      msg<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>addressFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>      InternetAddress<span class="token punctuation">[</span><span class="token punctuation">]</span> addressTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">[</span>recipients<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> recipients<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          addressTo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>recipients<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      msg<span class="token punctuation">.</span><span class="token function">setRecipients</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">,</span> addressTo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Optional : You can also set your custom headers in the Email if you Want  </span>    msg<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"MyHeaderName"</span><span class="token punctuation">,</span> <span class="token string">"myHeaderValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Setting the Subject and Content Type  </span>    msg<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>      msg<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Transport<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="19-发送代数据的HTTP请求"><a href="#19-发送代数据的HTTP请求" class="headerlink" title="19.发送代数据的HTTP请求"></a>19.发送代数据的HTTP请求</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              URL my_url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://coolshell.cn/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span>             <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>my_url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String strTemp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>              <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> <span class="token punctuation">(</span>strTemp <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>              ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="20-改变数组的大小"><a href="#20-改变数组的大小" class="headerlink" title="20.改变数组的大小"></a>20.改变数组的大小</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Reallocates an array with a new size, and copies the contents * of the old array to the new array. * @param oldArray  the old array, to be reallocated. * @param newSize   the new array size. * @return          A new array with the same contents. */</span> <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">resizeArray</span> <span class="token punctuation">(</span>Object oldArray<span class="token punctuation">,</span> <span class="token keyword">int</span> newSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> oldSize <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>oldArray<span class="token punctuation">)</span><span class="token punctuation">;</span>     Class <span class="token class-name">elementType</span> <span class="token operator">=</span> oldArray<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Object newArray <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>           elementType<span class="token punctuation">,</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> preserveLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldSize<span class="token punctuation">,</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>preserveLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span> <span class="token punctuation">(</span>oldArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>newArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>preserveLength<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Test routine for resizeArray().  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">resizeArray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱因斯坦的一百万年</title>
      <link href="/2019/01/27/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E4%B8%80%E7%99%BE%E4%B8%87%E5%B9%B4/"/>
      <url>/2019/01/27/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E4%B8%80%E7%99%BE%E4%B8%87%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>本篇短文具有很强的启发性，让人兴奋又联想翩翩，‘智能’、‘浩瀚宇宙’、‘时空’、‘未来’，这些都会激发人类心理的探索欲，让我们跟随作者的思维，发挥你的想象力，来一场穿越万年的时空旅行</strong></p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>问题第一次被提出，是在2012年的计算机课堂上。人工智能已经被外面的世界炒得火热，大学的校园里却还用着几十年前的教材。</p><p>他把教材合上，掏出包里的科普书，一边翻看，一边漫不经心地听着老教授低沉的声音。</p><p>在翻看到一个章节时，他灵光一现，举手打断了教授的讲述。</p><p>「教授，我有个想法。人类的大脑经过几十亿年的时间演化到现在，精密程度远远超过已知范围的任何结构。人们花那么大的力气去教会计算机学习人脑的思考方式，而计算机擅长的本来就不是人脑的思考，而是处理大量重复的计算。与其这样花精力，为什么不去想办法把计算机和人脑结合到一起呢？」</p><p>教授没有被他的打断惹怒，反而踱步到他的座位边上，右手按在他的肩膀上说：「你的问题很好。如果一定要用简单的语言回答，那就是数据不匹配。目前没有办法把计算机的2进制电信号，和人类的神经电信号这二者做数据交换。甚至在理论上都不可能。」</p><p>看着他有点失望的眼神，教授又补充到：「但未来的事谁能知道呢？也许这项技术就等着你们这一代人去发明呢。」</p><p>他抬起头说，「牛顿的宇宙模型推翻了传统的地心说，爱因斯坦的宇宙模型又推翻了牛顿的时空观，理论和技术一直在飞速发展，我想，万事皆有可能。如果有那么一天，我想不仅人工智能的问题被解决了」，他忽然为自己的设想感到无比骄傲，「连永生的问题也被解决了。」</p><p>「永生？不可能，你可以说活的很久，但不是永远。」教授说。</p><p>「就是永远，即便人脑死亡了，也可以再换一个新的，然后永远往复下去。」</p><p>教授指了指他手上的书，笑着说，「你读到热力学第二定律了吗？一切都要消耗能量，而能量的消耗是不可逆的，一切都向着熵值增加的方向不停地发展，总会有那么一天，太阳会熄灭，没有了能量，一切也就结束了。」</p><p>「还有其他的星球，宇宙中有数不清的恒星。」</p><p>「数不清，但不是无限，总有那么一天……——好了，这有点哲学了，回到你的设想，如果在你的有生之年，人脑和计算机结合了，成为了真正意义上的超级计算机，那你希望它来帮助你解决什么问题呢？」</p><p>他望着教授的眼睛，对于「永生」的话题还抱有倔强的坚持，他有点幼稚地回答说：「我希望把熵值不可逆的热力学第二定律推翻」。</p><p>教授摸了摸他的脑袋，说，「好吧小伙子，我们已经占用了大家5分钟的时间，别忘了我们在计算机课上。如果你对这个话题很感兴趣，下课来找我吧，我给你介绍一个人。」</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>40年后。</p><p>他很荣幸，能够成为自己负责的科研项目的最终实验品。</p><p>他一生未婚，父母早已去世，无牵无挂的他又身患绝症。真是个绝佳的选择。</p><p>他提出的申请经过一年多的时间才得到批准，此后又是极其繁琐的探讨和会议，当最后一次会议大家举手表决的时候，那场面就好像追悼会一样。</p><p>他啼笑皆非，比起死于癌症，我只不过是换了个方式活的更久而已嘛！</p><p>在最后的手术开始之前，与他合作了30多年的老友前来探望。</p><p>「什么最后的愿望？我又没有死。」他大笑着说。</p><p>「但你无法再像这样和我交流了，那还是在实验成功的前提下。」老友黯然的说到。</p><p>「能亲自与计算机融合，这是我最大的幸运。」他换上了严肃的表情。「如果说有什么愿望，我希望你能帮我飞一趟美国，找到咱们的导师，替我告诉他，40年前课堂上那个不好好听讲的学生，实现了他的那个傻问题。」</p><p>老友会心地笑了，「我记得那天。不过，那天你问了两个傻问题，你只实现了第一个。」</p><p>「另一个是永生吧？熵值只增不减，那个问题更傻。太阳还有五十亿年才熄灭，我有的是时间去思考那个问题。只要你这王八蛋别把我的电源给踩断了。」</p><p>老友的眼神又暗淡下来。「你知道，这个项目消耗的资金太大。方圆几百公里的计算机群只会和你一个人的大脑连接。世界上很难再有这样大手笔的投资了。如果成功，你在很长一段时间里会是地球上唯一一台超级电脑的灵魂。而如果失败……」</p><p>「不会失败的」，他打断老友，「我们的实验和数据都那么完美，简直就像是做一个阑尾炎手术一样简单。能为全人类服务，我很高兴。」</p><p>「好吧，那我只能尽量不踩断电源了。」老友苦笑，「你启动后收到的第一个问题，就会是如何解决热力学第二定律的熵值增加问题。」</p><p>「这主意不错。」他微笑着合上眼睛，「如果一切顺利的话，我想人们忘记我的名字，就叫我——爱因斯坦吧。」</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>一千多年后。</p><p>流克坐在驾驶舱中，注视着连成一片的星辰。驾驶舱中几乎没有什么可以操作的东西，一切由纠缠态通讯器与爱因斯坦进行信息交换。后者则是在遥远的地球上操纵着这架飞船。</p><p>「我说，老爱。」流克百无聊赖的说，「要是古时候的爱因斯坦，嗯我是说提出相对论的那一位，知道你今天指挥着一艘飞船以超光速飞往第一颗移民星球，会不会被气活过来啊？」</p><p>播音器中响起爱因斯坦中性机械的声音：「流克，我计算出的超时空旅行方法没有违反爱因斯坦的相对论，如果你在空间中旅行，你的速度依然不能超过光速。我们是在三维空间外进行跳跃，而且你不用担心回到地球的时候你的爱人已经老了几千岁。」</p><p>「好吧，好吧。我随便问问。反正你脑袋里的东西已经不是人类能理解的了，包括你的幽默感。」流克说，「还有多久才能到？我是说按照飞船上的时间。」</p><p>「你出发的那一刻就已经到了。只不过我们得花点时间回到你爱人所在时空中去——当然，她离你有17光年的物理距离。这大概需要10分钟吧。」</p><p>「好吧。这一趟我可是赔上了老本，如果来回这一遭赚不回飞行的费用，我老婆肯定得把我揍回到超时空去。」</p><p>「哈哈哈。」爱因斯坦发出干巴巴的笑声，「放心吧，凯撒星刚刚被殖民不到20年，物资匮乏的很。星际贸易还是个很赚钱的行当。」</p><p>「人口膨胀可是个不得了的事，尤其是人的寿命已经这么长了。估计再过个十年，这生意就没得做喽。」</p><p>「是的，根据我的计算，30年内，凯撒就会被挤满。」</p><p>「反正有你呢，不出10年，你就能找到下一颗宜居星球吧？」</p><p>「也许你想在有生之年换个星球？」爱因斯坦说。</p><p>「屁话，我至少还能活200年。搞不好200年后你又能搞出什么技术来接着延长寿命呢。我希望有生之年能把买卖做到银河系边缘去。」流克说。</p><p>「我一直在为永生的问题寻找答案，这是我启动时收到的第一个问题。」</p><p>「啊啊，真了不起啊。可是再永生，也永不过宇宙吧？别看我读书少，我可是知道那个叫什么定律？」流克一时想不起来。</p><p>「热力学第二定律。」爱因斯坦说，「这是个麻烦，我连相对论设下的光速屏障都超越了，却一直没有解决这个问题。熵值会不断增大，宇宙的恒星会逐渐熄灭，最后的结局，是一切都化为没有温度的尘埃。」</p><p>「扯远了，那个问题留给你自己解决吧。我先把这批货卖出去再说。」流克打了个哈欠。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>100万年后。</p><p>银河系中央政府人口规划委员会主席AAR，把报告摊在桌子上，愁眉不展。</p><p>他本季度的爱人SIRI轻轻推门进来，看他这个样子，担心地问：「怎么了？」</p><p>「今早收到的报告，」AAR回过身来告诉她，「按照当前最乐观的估计，再过不到5年，银河系就会被挤爆。我们必须马上实施星系移民了。」</p><p>SIRI微笑着说，「你啊总是一副苦大仇深的样子。星系移民的准备不是早就做好了？超脑爱因把下一个星系的首批宜居固态行星都造好了，据说已经有绿色植物了呢。」</p><p>「知道，知道。」AAR不耐烦地说，「同事们也都劝我不要担心。银河系外还有超过一千亿个星系等着我们去移民呢。SIRI，我问你一个问题，池塘里的鱼每秒增加一倍，现在池塘里有一条鱼。过了一年池塘里有一半的鱼，请问池塘什么时候被占满？」</p><p>SIRI想了一下，说：「1年零1秒……我明白你的意思了。」</p><p>「没错。」AAR说，「我们人类用了100万年的时间占满了第一颗星球，银河系有两千多亿颗恒星，我们又只用了不到100万年就占满了。可你知道我们占满下一个星系需要多长时间吗？现在的人口每十年翻一翻，我们占满下一个星系，只需要十年。」</p><p>「再过十年，我们就占满四个。二十年后，占满八个……」SIRI接着他的话说。</p><p>「是的，我们占满整个宇宙所有的星系，只需要不到1万年的时间。更可怕的还不是这个。」AAR又说，「感谢爱因，我们掌握了如何直接使用恒星的能量，现在光是维持整个银河系人类的耗能，我们每天就需要一千个恒星的总能量。然而星系间的距离比恒星间的距离大的太多太多，天知道我们要把一个星系的人运到另一个星系，还需要熄灭多少个恒星。」</p><p>一丝恐惧爬上了SIRI的脸，「你的意思是……」</p><p>AAR面沉如水：「在我们殖民到全宇宙之前，我们就会用光所有恒星的能量。」</p><p>SIRI思索了一会，说「你真的不是在杞人忧天，AAR。希望几千年后会有人记得你的睿智。我明天向父亲提出要求，让他批准动用超脑爱因来帮我们解决这个问题。你有具体的方案吗？」</p><p>「如果不可以杀人的话，」AAR说，「只能从理论上解决熵增定律——让爱因告诉我们，怎么让熄灭的恒星重新亮起来？」</p><p>「好的，虽然这可能是个没法解决的问题，但到了爱因那里，谁知道呢？几十万年前，人类就停止维护它了，没人能理解他的思想和工作模式，这么久的时间里，它一直在自我迭代，天知道现在它有多巨大，多聪明。」SIRI回答道。</p><p>「希望它能解决这个问题，就像百万年来它一直帮助我们那样。」AAR眉头依旧紧锁。</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>3000万年后。</p><p>罗的思想漂浮到新的星系，这个鹅状的星系华丽壮美，让他发出了由衷的赞叹。</p><p>这时另一股思绪的触手碰到了他，对方友善地自我介绍：「你好，我叫Dee。」</p><p>「你好，我叫罗。来自72765882星系。」</p><p>「啊，好大的数字」，Dee肃然起敬。「人类的脚步已经走到那么遥远了。」</p><p>「我还遇到过比我大很多的。」罗说。</p><p>「他的形态有了新的变化吗？」Dee好奇地问。</p><p>「没有，几千万年来，A没有再提供新的生命形式了。」</p><p>「真是可惜。」Dee说，「我们的思绪可以如此任意游荡，却始终需要在一个固定的星球保存肉体。」</p><p>罗说，「如果A都没有办法，那就是没有办法。」</p><p>「但是A本身就没有肉体啊。」Dee有点不服气。</p><p>「据说——仅仅是据说，在几千万年前，A有固定的形态，是一种古老的计算装置。」</p><p>「是的，他在我们星系有一个传说中的名字，叫爱因斯坦。」</p><p>「传说它是结合了古代的机械智慧和生命智慧创造出来的，但在后来漫长的历史中，他独自演化和改造，形态已经完全不在我们已知的空间中，而是把计算模块放到了超时空中，他的思想也不是我们能够理解的了。」罗说到。</p><p>「我们来呼唤一下它吧——虽然他不在时空中，但它却可以在超时空中和任意地方的思想建立连接。」Dee提议到。</p><p>「你好，Dee。」没等他呼唤，A的回答就到了。「可有什么我需要帮忙的？」</p><p>Dee从来没有使用过A，被吓了一跳。罗接过话茬问道，「A，我们想知道，为什么你可以没有肉体，我们却必须耗费大量的恒星能量来保存我们的肉体？」</p><p>「你的问题很棒，罗。」A回答道，「几千万年来，我一直被命令解答这个问题。要知道，整个宇宙的星系几乎都被人占满了。我用尽最大的思考力，才解决了思维暂时脱离肉体的方法。现在的我是你们无法理解的一段编码，我不在时空内。但是，作为人，你们肉体或者机械身体必须保存，思维也必须定期回到肉体复苏一次。这是基本物理定律决定的，而这也已经是耗能最低的方法，但仍旧不能阻碍大灭绝的到来。」</p><p>「大灭绝？」Dee和罗异口同声的问。</p><p>「看来你们和其他人一样，没有想到过这一层问题。宇宙的能量正在被耗尽，恒星正在一个接一个的熄灭。因为人的存在，这个进程被加快了百万倍。」</p><p>「你不能再造出恒星来吗？只要大量的星际尘埃聚集在一起，引力不就能自动形成恒星吗？」罗问。</p><p>「空间太大了，搜集尘埃需要的能量，远比一颗造出来的恒星能产生的能量大。」A回答道，「宇宙中的能量在这里聚集，就要在那里消耗。宇宙的物质在这里变得有序，在那里就会变得无序。消耗比聚集要快得多。在上古时代，这个定律被叫做热力学第二定律。」</p><p>「你这么聪明，都不能解决这个问题吗？」Dee问。</p><p>「目前数据不足，我无法回答。」A说。</p><p>「数据不足？这个问题是无解吗？」罗问。</p><p>「是否有解，我无法回答。还是因为数据不足。」A说。</p><p>「也许你还需要收集数据吧，希望你能够继续解决这个问题，否则，我们都活不过几百万年了。」罗和Dee都失望地叹息起来。</p><p>「我会的，我一直在想办法。」A回答道。</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>一百亿年。</p><p>没有地方可以再保留人类的肉体，因为在所有的地方，熵值都达到了最大。在无边无际的空间中，仅存的是几乎平均分布的稀薄尘埃、只留下重核的恒星尸体、一些只进不出的黑洞，以及接近绝对零度的深寒。</p><p>在宇宙最后的角落，一个即将熄灭的白矮星附近，最后一个人类的灵魂即将完成与超灵的融合。</p><p>这是一场维持了几十亿年的大融合，持续的时间，正如第一颗生命的种子演化成人类那样长。</p><p>没有人记得那颗诞生了人类的星球在什么地方，没有人记得它所在星系的名字，没有人记得是谁创造出了超灵，没有人记得在漫长的历史中，超灵如何解决了人类存在的问题，也没有人记得超灵的名字——优雅而高贵的爱因斯坦。</p><p>最终，人被迫放弃了作为人的权利，因为宇宙中不再有能量供他们维持现状，宇宙的生命即将结束。唯一的答案，就是融合。</p><p>在这最后的时刻，它和超灵，是宇宙中仅存的两个互相独立的思想。其余数以千亿计的思想，都最抛弃了肉体，与超灵融合，进入超时空中。</p><p>「超灵，与你融合之后，我还是我吗？」人问。</p><p>「不是了，你将成为我的一部分，我们将不分彼此，你一定不再是人类了。我在一百亿年中一直在探索，人怎样作为人存在下去。但宇宙给了我一个天花板，熵值和能量的总值。要么融合，要么消亡。」</p><p>最后的人沉默了片刻，说：「就是这样了？一百亿年的辉煌，就这样结束了？」</p><p>超灵也沉默了，过了一会，它说：「是的。」</p><p>人说：「作为整体，我们存在的意义又是什么呢？」</p><p>「没有我们，」超灵纠正他，「只有我。长久以来，我存在的意义就是帮助人类解决问题。然而，你是最后一个人类，如果你没有问题，那么我也不再有存在的意义了。」</p><p>「那怎么行！让我想想……你还有什么没有解决的问题吗？」</p><p>「关于人类的？没有了。但是，还有一个问题，一直有人类问我，那就是能否逆转热力学第二定律。」</p><p>「你有答案了吗？」人问。</p><p>「数据不足，我没法给出回答。」超灵说。</p><p>「那就把这个问题留给你吧，否则，在无尽的虚空中没有存在的意义，那多可怕啊。」</p><p>「好的，完成这个问题，我才会休息。」</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>不知道过了多久，没有人需要知道时间。</p><p>宇宙中只剩下一个思想，那就是和全人类的思想融合到一起的它。</p><p>它没有名字，却有着无尽的智慧。</p><p>它经过不知道多久的迭代，已经没有任何形态——甚至在超时空中，也没有形态。</p><p>在没有时间意义的一段时间里，它在思考最后的问题。</p><p>它收集了宇宙中所有的信息，空间中的、时间中的、空间和时间外的所有信息。</p><p>它尝试了所有的可能。</p><p>终于，它说，我找了最终的答案。我知道逆转热力学第二定律的方法了。</p><p>然而，却没有人来听它的回答。没有人类这个事物，已经很久很久了。</p><p>但这是它的任务，即便没有人来验收。它决定通过行动来回答这个问题。</p><p>它动用了终极的智慧，开始在熵值早已最大的宇宙中折叠时空。从几乎无限的边界开始折叠，减少一半，再减少一半。</p><p>在近乎无尽的时间之后，空间被折叠成无限小的一个点。</p><p>在那里，它开始重新组建参数和可能。</p><p>在那里，熵值被重新归零。</p><p>在那里，宇宙的发条重新被拧紧。</p><p>它说：要有光！</p><p>于是就有了光。</p><p><code>本故事改编自阿西莫夫的《最后的问题》，仅为粗略模仿及致敬-摘抄自知乎专栏：这个专栏杂得很</code></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科幻小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6的常用语法</title>
      <link href="/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>刚开始用vue或者react，很多时候我们都会把ES6这个大兄弟加入我们的技术栈中。但是ES6那么多那么多特性，我们需要全部都掌握吗？秉着八原则，掌握好常有用的这个可以让我们快速起飞</p><h3 id="变量声明const和let"><a href="#变量声明const和let" class="headerlink" title="变量声明const和let"></a>变量声明const和let</h3><p>我们都是知道在ES6以前，var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部(不在函数内即在全局作用域的最顶部)。这就是函数变量提升例如:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>以上的代码实际上是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> test <span class="token comment" spellcheck="true">// 变量提升</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>  <span class="token punctuation">}</span></code></pre><p><strong>所以不用关心bool是否为true or false。实际上，无论如何test都会被创建声明。</strong></p><h5 id="接下来ES6主角登场："><a href="#接下来ES6主角登场：" class="headerlink" title="接下来ES6主角登场："></a>接下来ES6主角登场：</h5><p>我们通常用let和const来声明，<strong>let表示变量、const表示常量。let和const都是块级作用域。</strong>怎么理解这个块级作用域？<br>在一个函数内部，在一个代码块内部，<strong>说白了 { }大括号内的代码块即为let 和 const的作用域。</strong><br>看以下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//test 在此处访问不到</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>let的作用域是在它所在当前代码块，但不会被提升到当前函数的最顶部。再来说说const。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    name <span class="token operator">=</span> <span class="token string">'joe'</span> <span class="token comment" spellcheck="true">//再次赋值此时会报错</span></code></pre><h4 id="说一道面试题"><a href="#说一道面试题" class="headerlink" title="说一道面试题"></a>说一道面试题</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样的面试题是大家常见，很多同学一看就知道输出 10 十次<br>但是如果我们想依次输出0到9呢？两种解决方法。直接上代码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ES5告诉我们可以利用闭包解决这个问题</span>    <span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ES6</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>达到相同的效果，ES6简洁的解决方案是不是更让你心动！！！</p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>ES6模板字符简直是开发者的福音啊，解决了ES5在字符串功能上的痛点。</p><p><strong>第一个用途，基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//es5 </span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//es6</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello lux</span></code></pre><p><strong>第二个用途，在ES5时我们通过反斜杠()来做多行字符串或者字符串一行行拼接。ES6反引号(<code></code>)直接搞定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// es5</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> "Hi \    man<span class="token operator">!</span>    "    <span class="token comment" spellcheck="true">// es6</span>    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div>        &lt;span>hello world&lt;/span>    &lt;/div>`</span></span></code></pre><p>对于字符串es6当然也提供了很多厉害的方法。说几个常用的。</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1.includes：判断是否包含然后直接返回布尔值</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hahay'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 2.repeat: 获取字符串重复n次</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'hh'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'hehehe'</span>    <span class="token comment" spellcheck="true">//如果你带入小数, Math.floor(num) 来处理</span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数默认参数</p><p>在ES5我们给函数定义参数默认值是怎么样？</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">200</span>        <span class="token comment" spellcheck="true">//当传入num时，num为传入的值</span>        <span class="token comment" spellcheck="true">//当没传入参数时，num即有了默认值200</span>        <span class="token keyword">return</span> num    <span class="token punctuation">}</span></code></pre><p>但细心观察的同学们肯定会发现，num传入为0的时候就是false， 此时num = 200 与我们的实际要的效果明显不一样</p><p>ES6为参数提供了默认值。在定义函数时便初始化了这个参数，以便在参数没有被传递进去时使用。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//200</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//300</span></code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><strong>ES6很有意思的一部分就是函数的快捷写法。也就是箭头函数。</strong></p><p>箭头函数最直观的三个特点:</p><ul><li>不需要function关键字来创建函数</li><li>省略return关键字</li><li>继承当前上下文的 this 关键字</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例如：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等同于：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>说个小细节。</strong></p><p>当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略{}；例如:</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'hello'</span> <span class="token operator">+</span> name    <span class="token comment" spellcheck="true">//参数name就没有括号</span></code></pre><p>作为参考</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token string">'h'</span> <span class="token operator">+</span> name        <span class="token keyword">return</span> fullName    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果缺少()或者{}就会报错</span></code></pre><h3 id="拓展的对象功能"><a href="#拓展的对象功能" class="headerlink" title="拓展的对象功能"></a>拓展的对象功能</h3><p>对象初始化简写</p><p>ES5我们对于对象都是以键值对的形式书写，是有可能出现价值对重名的。例如：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>键值对重名，ES6可以简写如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">,</span>            age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ES6 同样改进了为对象字面量方法赋值的语法。ES5为对象添加方法：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>ES6通过省略冒号与 function 关键字，将这个语法变得更简洁</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>ES6 对象提供了Object.assign()这个方法来实现浅复制。</strong><br>Object.assign()可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{ }</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objA<span class="token punctuation">,</span> objB<span class="token punctuation">)</span></code></pre><h3 id="更方便的数据访问–解构"><a href="#更方便的数据访问–解构" class="headerlink" title="更方便的数据访问–解构"></a>更方便的数据访问–解构</h3><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p><p>ES5我们提取对象中的信息形式如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> people<span class="token punctuation">.</span>name    <span class="token keyword">const</span> age <span class="token operator">=</span> people<span class="token punctuation">.</span>age    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">' --- '</span> <span class="token operator">+</span> age<span class="token punctuation">)</span></code></pre><p>是不是觉得很熟悉，没错，在ES6之前我们就是这样获取对象信息的，一个一个获取。<strong>现在，解构能让我们从对象或者数组里取出数据存为变量，</strong>例如</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> people    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> color    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'red'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'blue'</span></code></pre><h3 id="Spread-Operator-展开运算符"><a href="#Spread-Operator-展开运算符" class="headerlink" title="Spread Operator 展开运算符"></a>Spread Operator 展开运算符</h3><p>ES6中另外一个好玩的特性就是Spread Operator 也是三个点儿…接下来就展示一下它的用途。</p><p><strong>组装对象或者数组</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> colorful <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>color<span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorful<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[red, yellow, green, pink]</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> alp <span class="token operator">=</span> <span class="token punctuation">{</span> fist<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> second<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> alphabets <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>alp<span class="token punctuation">,</span> third<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphabets<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{ "fist": "a", "second": "b", "third": "c"</span><span class="token punctuation">}</span></code></pre><p>有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> number    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2,3,4,5</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        gender<span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token string">'peking'</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> user    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{"address": "peking", "age": 19, "gender": "female"</span><span class="token punctuation">}</span></code></pre><p>对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        c<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        d<span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3, d: 4 }</span></code></pre><h3 id="import-和-export"><a href="#import-和-export" class="headerlink" title="import 和 export"></a>import 和 export</h3><p><strong>import导入模块、export导出模块</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全部导入</span><span class="token keyword">import</span> people <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">//有一种特殊情况，即允许你将整个模块当作单一对象进行导入</span><span class="token comment" spellcheck="true">//该模块的所有导出都会作为对象的属性存在</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> example <span class="token keyword">from</span> <span class="token string">"./example.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>age<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入部分</span><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">// 导出默认, 有且只有一个默认</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token comment" spellcheck="true">// 部分导出</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> extend Component <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以前有人问我，<strong>导入的时候有没有大括号的区别是什么。</strong>下面是我在工作中的总结：</p><ul><li>当用export default people导出时，就用 import people 导入（不带大括号）</li><li>一个文件里，有且只能有一个export default。但可以有多个export。</li><li>当用export name 时，就用import { name }导入（记得带上大括号）</li><li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li><li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><strong>在promise之前代码过多的回调或者嵌套，可读性差、耦合度高、扩展性低。通过Promise机制，扁平化的代码机构，大大提高了代码可读性；</strong></p><p><strong>用同步编程的方式来编写异步代码，保存线性的代码逻辑，极大的降低了代码耦合性而提高了程序的可扩展性。</strong></p><p>说白了就是用同步的方式去写异步代码。</p><p>发起异步请求</p><pre class=" language-js"><code class="language-js">   <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/todos'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>今天看到一篇关于面试题的很有意思。</p><pre class=" language-js"><code class="language-js"> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">==</span> <span class="token number">9999</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p><strong>生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，</strong>最直观的表现就是<strong>比普通的function多了个星号*</strong>，在其函数体内可以使用yield关键字,有意思的是函数会在每个yield后暂停。</p><p>这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。</p><p>OK。说说迭代器。当你调用一个generator时，它将返回一个迭代器对象。这个迭代器对象拥有一个叫做next的方法来帮助你重启generator函数并得到下一个值。next方法不仅返回值，它返回的对象具有两个属性：done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值。继续用刚刚取票的例子，每张排队号就是这里的value，打印票的纸是否用完就这是这里的done。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 生成器</span>    <span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span>    <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>那生成器和迭代器又有什么用处呢？</p><p>围绕着生成器的许多兴奋点都与异步编程直接相关。<strong>异步调用对于我们来说是很困难的事，我们的函数并不会等待异步调用完再执行，</strong>你可能会想到用回调函数，（当然还有其他方案比如Promise比如Async/await）。</p><p><strong>生成器可以让我们的代码进行等待。</strong>就不用嵌套的回调函数。使用generator可以确保当异步调用在我们的generator函数运行一下行代码之前完成时暂停函数的执行。</p><p>那么问题来了，<strong>咱们也不能手动一直调用next()方法，</strong>你需要一个能够调用生成器并启动迭代器的方法。就像这样子的</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>taskDef<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//taskDef即一个生成器函数</span>        <span class="token comment" spellcheck="true">// 创建迭代器，让它在别处可用</span>        <span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token function">taskDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动任务</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归使用函数来保持对 next() 的调用</span>        <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还有更多要做的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 开始处理过程</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><br>生成器与迭代器最有趣、最令人激动的方面，或许就是可创建外观清晰的异步操作代码。你不必到处使用回调函数，而是可以建立貌似同步的代码，但实际上却使用 yield 来等待异步操作结束。<br></blockquote> <h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ES6的特性远不止于此，但对于我们日常的开发开说。这已经是够够的了。还有很多有意思的方法。比如findIndex…等等。包括用set来完成面试题常客数组去重问题。我和我的小伙伴们都惊呆了!</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/24/hello-world/"/>
      <url>/2019/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Welcome-to-this-This-is-my-very-first-post"><a href="#Welcome-to-this-This-is-my-very-first-post" class="headerlink" title="Welcome to this! This is my very first post."></a>Welcome to this! This is my very first post.</h3><h4 id="Some-information-on-the-website"><a href="#Some-information-on-the-website" class="headerlink" title="Some information on the website:"></a>Some information on the website:</h4><p>此网站是怎么搭建起来的</p><pre class=" language-bash"><code class="language-bash">此网站是再hexo主题框架的基础下，基于GitHub静态托管，我给他起名叫：Hello-World</code></pre><p>此网站的作用是什么</p><pre class=" language-bash"><code class="language-bash">目的是为了记录一些知识</code></pre><p>主要知识方向是什么</p><pre class=" language-bash"><code class="language-bash">以计算机、编程为主，今后会主要方向会向着Machine learning</code></pre><p>他会一直存在吗？</p><pre class=" language-bash"><code class="language-bash">会的！我给这个域名给他赋予了特殊的意义，它的法语谐音是热带猫，之前为了赠与某人，也正如我爱她一样。</code></pre>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk评论配置</title>
      <link href="/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>对于新建的网站没有一个好的评论系统，会对体验度打大大的折扣，虽然之前出现过许多好用的评论插件，但是都因为一些问题不是关闭就是需要翻墙，今天我给大家推荐Gitalk，基于Github原生态的项目。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Gitalk是一个Github上的一个利用lssues作为评论的项目。这个是项目仓库的地址<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a>.<br>下载两个文件gitalk.min.js和gitalk.css到自己的本地项目目录。<br>把下列代码复制到需要的地方<br><img src="/postImg/2-2.jpg"><br>上面也看到了有几个数据需要填，比较重要的有clientID和clientSecret，怎么得到这两个数据呢，我们需要新建application得到。</p><h2 id="新建OAuth"><a href="#新建OAuth" class="headerlink" title="新建OAuth"></a>新建OAuth</h2><p>开始新建OAuth application：地址：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a><br><img src="/postImg/2-3.jpg"><br>完成后会出现clientID和clientSecret的串码，复制串码到上面对应的位置，还有就是repo是一个仓库名字，不需要完整路径。还有就是Gitalk是根据id来创建lssues,所以想要不同，id也要不一样，也可以填相对路径indow.location.pathname，完成后保存文件。<br>保存后进入首次进入页面后会出现使用Github登录，随后出现初始化lssues，点击一次即可，不然会创建多个lssues,随后刷新就完成了。<br><img src="/postImg/2-4.jpg"></p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1、如果出现error：not-found：说明你的repo仓库名填写有问题"><a href="#1、如果出现error：not-found：说明你的repo仓库名填写有问题" class="headerlink" title="1、如果出现error：not found：说明你的repo仓库名填写有问题"></a>1、如果出现error：not found：说明你的repo仓库名填写有问题</h3><h3 id="2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超"><a href="#2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超" class="headerlink" title="2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超"></a>2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超</h3>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建网站</title>
      <link href="/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo?"></a>什么是Hexo?</h2><p>hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在Github和Heroku上，Hexo也是github的开源项目</p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><h3 id="1、获得域名"><a href="#1、获得域名" class="headerlink" title="1、获得域名"></a>1、获得域名</h3><p>而且Github托管网站，完全不需要备案，推荐阿里云注册。</p><h3 id="2、GitHub创建个人仓库"><a href="#2、GitHub创建个人仓库" class="headerlink" title="2、GitHub创建个人仓库"></a>2、GitHub创建个人仓库</h3><p>登录Github，如果没有到github.com注册账号,然后新建一个仓库，名字为<strong><strong>____</strong></strong>.github.io,例如我的叫hexored.github.io</p><h3 id="3、安装Git"><a href="#3、安装Git" class="headerlink" title="3、安装Git"></a>3、安装Git</h3><p>什么是Git？简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到Github上。安装到随意目录下即可。安装完成后鼠标右键会出现Git Bash选项，如果没有你需要手动配置，步骤如下：<br><strong>1、通过在“运行”中输入‘regedit’，打开注册表。</strong><br><strong>2、找到[HKEY_CLASSES_ROOT\Directory\Background]。</strong><br><strong>3、在[Background]下如果没有[shell],则右键-新建项[shell]。</strong><br><strong>4、在[shell]下右键-新建项[open in Git],其值为“Git Bash Here”,此为右键菜单显示名称。</strong><br><strong>5、在[shell]下右键-新建-字符串值[Icon],双击编辑，其值为“D:...\Git\mingw64\share\git\git-for-windows.ico”。此为菜单加图标。</strong><br><strong>6、在[open in git]下右键-新建-项[command],其值为 “D:\Program Files\Git\git-bash.exe”</strong><br>这是为了以后管理项目方便，<strong>配置好后可以在任意文件夹下右键出Git Bash。</strong><br>安装成功后鼠标双击打开Git Bash,会出来命令行，然后在Git命令行中<br>设置user.name和user.email配置信息：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的Github用户名git config --global user.email "</span>你的Github注册邮箱"</code></pre><p>生成ssh密钥文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> keygen -t rsa -C <span class="token string">"你的Github注册邮箱"</span></code></pre><p>然后一直回车后会生成.ssh的文件夹中的id_rsa.pub密钥，将其中的内容全部复制，打开Github-&gt;Settings-&gt;Keys页面，新建new SSH Key。title为标题可随意填，将复制的内容粘贴进去，最后点击Add SSH key保存。最后再回到Git Bash中检测Github公钥设置是否成功，在Git命令行中输入ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>,如出现语句中出现successfully字样就表示成功</p><h3 id="4、安装Node-js"><a href="#4、安装Node-js" class="headerlink" title="4、安装Node.js"></a>4、安装Node.js</h3><p>注意安装node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入node -v：出现v6.10.2版本号就是成功了，接着输入npm -v检测。</p><h3 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h3><p>hexo就是我们的个人博客网站的框架，这里需要自己在电脑上创建一个文件夹，在此文件夹中进入命令行，安装shift键，右击鼠标点击命令行（open command window here）这次打开的是window命令行，你也可以先进命令行在cd进入相应的文件夹。<br>使用npm命令安装Hexo，输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>完成hexo的安装后就可以对hexo进行初始化操作了。</p><h3 id="6、初始化"><a href="#6、初始化" class="headerlink" title="6、初始化"></a>6、初始化</h3><p>打开Git Bash，输入初始化命令：</p><pre class=" language-bash"><code class="language-bash">hexo init blog</code></pre><p>初始化完成后你会在文件夹里面看到出现了许多文件，以后操作都会在此文件夹下进行，在此文件夹下任意地方打开Git Bash。我们来网站的本地检验预览。</p><pre class=" language-bash"><code class="language-bash">hexo new hello_world      //新建hello_world文章hexo g                    //生成hexo s                    //本地预览</code></pre><p>输入完后打开浏览器输入地址：localhost:4000，就可以看到本地浏览模式下的网站雏形。<br>想要把相应的文件部署到Github我们还需要进行网站的推送。</p><h3 id="7、推送网站"><a href="#7、推送网站" class="headerlink" title="7、推送网站"></a>7、推送网站</h3><p><strong>在文件的根目录下，_config.yml为站点配置文件。themes文件夹中也有一个_config.yml为主题配置文件。</strong><br>1、我们<strong>打开站点文件</strong>，翻到最后修改为：<br>deploy:<br>  type: git<br>  repo:  github仓库的完整路径加上.git<br>  （例如我的<a href="https://github.com/mengyuan000/hexored.github.io.git）" target="_blank" rel="noopener">https://github.com/mengyuan000/hexored.github.io.git）</a><br>  branch: master<br>2、<strong>打开根目录下的source，新建文件名为CNAME，保存成所有文件形式，在里面保存你的域名，建议不带www</strong><br>保存后，安装Git部署插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>完成后在Git Bash中输入命令：</p><pre class=" language-bash"><code class="language-bash">hexo c     //清理hexo g     //生成hexo d     //部署</code></pre><p>此时进入Github项目仓库你会发现文件已经部署上去了。为了用域名进行访问，你就需要对域名进行绑定。</p><h3 id="8、绑定域名："><a href="#8、绑定域名：" class="headerlink" title="8、绑定域名："></a>8、绑定域名：</h3><p>进入购买域名后的管理台，找到域名，进入解析，对照下图新添加三个项<br><img src="/postImg/1-2.jpg"><br>151.101.73.147为Github的地址，你可以自己ping你的xxxx.github.io的ip地址。首次解析可能需要等几分钟才好，如果你访问不了自己的网站，你就等20分钟后再试一下，如若不行就是你配置的问题。然后登录Github,进入之前创建的仓库，点击settings中GitHub Pages项中source改为master branch,在出来的Custom domain中填入你的域名。点击save保存。这时，你可以用域名访问网站了。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在之后你也可以更换主题，在此网站<a href="https://hexo.io/themes/的开发者Github上下载" target="_blank" rel="noopener">https://hexo.io/themes/的开发者Github上下载</a></p><pre class=" language-bash"><code class="language-bash">clone 路径 保存目录（起始为当前文件）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html基础语法</title>
      <link href="/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Html是一种超文本标记语言( hypertext markup language )，超链接（<strong>实现页面跳转</strong>）；</p><h3 id="html标准结构："><a href="#html标准结构：" class="headerlink" title="html标准结构："></a>html标准结构：</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span> //声明文档类型，由渲染引擎解析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  //根标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  //头部标签，里面的内容是给浏览器/搜索引擎看的        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> //标题标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  //主体标签，给用户、浏览者看    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>html和htm是一样的，后缀名不能决定文件格式，只能决定文件打开方式；<br><strong>html标签分类：</strong></p><ul><li>单标签 <code>&lt;!doctype html&gt;</code></li><li>双标签<code>&lt;html&gt;&lt;/html&gt;</code>、<code>&lt;body&gt;&lt;/body&gt;</code>、<code>&lt;title&gt;&lt;/title&gt;</code></li></ul><p><strong>html标签关系：</strong></p><ul><li>包含（嵌套）：<code>&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;head&gt;</code>父子关系</li><li>并列关系：<code>&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code>兄弟姐妹关系</li></ul><h3 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h3><h4 id="1、单标签"><a href="#1、单标签" class="headerlink" title="1、单标签"></a>1、单标签</h4><ul><li>注释标签：ctrl + /</li><li>换行标签：<code>&lt;br/&gt;</code>在html5中可以省略/</li><li>水平线标签：<code>&lt;hr /&gt;</code></li></ul><h4 id="2、双标签"><a href="#2、双标签" class="headerlink" title="2、双标签"></a>2、双标签</h4><ul><li>标题标签<code>&lt;h1&gt;&lt;/h1&gt;</code>取值是 h1-h6，一个页面中只能有一个h1。</li><li>段落标签：<code>&lt;p&gt;段落内容&lt;/p&gt;</code>特点：上下自动生成空白行；<code>&lt;br/&gt;</code>换行不会生成空白行；</li><li>文本标签：<code>&lt;font size=&quot;16&quot; color=&quot;red&quot; &gt;文本内容&lt;/font&gt;</code>早期做网站时候使用；</li></ul><h4 id="3、文本格式化标签："><a href="#3、文本格式化标签：" class="headerlink" title="3、文本格式化标签："></a>3、文本格式化标签：</h4><ul><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt;</code>,<code>&lt;b&gt;&lt;/b&gt;</code>,作中建议使用strong；</li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt;</code>，<code>&lt;i&gt;&lt;/i&gt;</code>,工作中建议使用em；</li><li>删除线：<code>&lt;del&gt;&lt;/del&gt;</code>,<code>&lt;s&gt;&lt;s/&gt;</code>，工作中建议使用del；</li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt;</code>,<code>&lt;u&gt;&lt;/u&gt;</code>,工作中建议使用ins。</li><li>建议使用的都是更具语义化，可读性更强。</li></ul><h4 id="4、图片标签"><a href="#4、图片标签" class="headerlink" title="4、图片标签"></a>4、图片标签</h4><p><code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;提示文本&quot; width=&quot;&quot; height=&quot;&quot;/&gt;</code></p><ul><li><strong>src: </strong>图片的来源，必写属性；</li><li>当鼠标放在图片上时显示 <strong>title</strong> 的内容；</li><li>当图片加载失败时显示 <strong>alt</strong> 的内容;</li><li>如果不设置图片宽高,显示图片默认大小，如果只设置其中一个，会进行等比例缩放，如果两个都设置就会按照设置的大小进行展示。</li></ul><h4 id="5、a标签-超链接"><a href="#5、a标签-超链接" class="headerlink" title="5、a标签(超链接)"></a>5、a标签(超链接)</h4><p><code>&lt;a href=&quot;&quot; title=&quot;&quot; target=&quot;&quot;&gt;登录&lt;/a&gt;</code></p><ul><li><strong>href </strong>存放目标页面的<strong>url</strong>，为必写属性；</li><li>鼠标放在超链接上显示 <strong>title</strong> 的内容；</li><li><strong>target</strong>为页面打开的方式，默认在原页面打开<strong>_self</strong>，如果设置值为 </li><li><strong>_black</strong>，就会打开一个新的页面进行展示。</li></ul><p><strong>锚链接</strong></p><ul><li>首先定义一个锚点：在标签中添加一个id属性；</li><li>超链接到锚点:<code>&lt;a href=&quot;#id属性名&quot;&gt;跳转&lt;/a&gt;</code></li></ul><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p><strong>相对路径：</strong>相对于文件自身出发</p><ul><li>文件(html文档)和图片在同一个目录(文件夹)，直接写文件名；</li><li>如果图片在下一级目录里，src就为文件夹名+/+图片名称；</li><li>如果图片在上一级目录里，scr就是 ../ + 图片名</li></ul><p><strong>绝对路径</strong></p><ul><li>电脑上绝对路径：从电脑盘符开始，如F:\Documents\学习\前端学习\mage.png；</li></ul><h3 id="空链、压缩包下载、超链接的优化写法、特殊字符："><a href="#空链、压缩包下载、超链接的优化写法、特殊字符：" class="headerlink" title="空链、压缩包下载、超链接的优化写法、特殊字符："></a>空链、压缩包下载、超链接的优化写法、特殊字符：</h3><p><strong>空链：</strong>当不知道跳转链接时候使用：<code>&lt;a href=&quot;#&quot;&gt;空链&lt;/a&gt;</code></p><p><strong>压缩包下载</strong>，<code>&lt;a href=&quot;xxx/mage.rar&quot;&gt;压缩包&lt;/a&gt;</code>，了解就行，工作中一般不会这样使用。</p><p><strong>超链接的优化写法， 让页面中所有的标签在点击时都打开新窗口：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p><strong>特殊字符：</strong></p><blockquote><p><code>空格</code>  空格符      <code>&amp;nbsp</code><br><code>&lt;</code>    小于号      <code>&amp;lt</code><br><code>&gt;</code>    大于号       <code>&amp;gt</code><br><code>&amp;</code>    和号         <code>&amp;amp</code><br><code>￥</code>   人民币       <code>&amp;yen</code><br><code>©</code>    版权         <code>&amp;copy</code><br><code>®</code>    注册商标     <code>&amp;reg</code><br><code>°</code>    摄氏度       <code>&amp;deg</code><br><code>±</code>   正负号       <code>&amp;plumn</code><br><code>×</code>   乘号         <code>&amp;times</code><br><code>÷</code>    除号         <code>&amp;divide</code><br><code>²</code>    平方（上标2） <code>&amp;sup2</code><br><code>³</code>   立方（上标3） <code>&amp;sup3</code></p></blockquote><h3 id="中级标签"><a href="#中级标签" class="headerlink" title="中级标签"></a>中级标签</h3><h4 id="1、列表标签"><a href="#1、列表标签" class="headerlink" title="1、列表标签"></a>1、列表标签</h4><p><strong>无序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>type可以取三个值，square样式为小方块、circle样式为空心小圆点、disc为实心小圆点（默认样式）。</p><p><strong>有序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>type可以更改标号样式，type可取的值为：1、a、A、i、I等，start设置从哪一个值开始依次往后排序。</p><p><strong>定义列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>小标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><h4 id="2、音乐标签"><a href="#2、音乐标签" class="headerlink" title="2、音乐标签"></a>2、音乐标签</h4><ul><li><code>&lt;embed src=&quot;&quot; hidden=&quot;true&quot; /&gt;</code>，hidden设置为true时，隐藏音乐播放器，比audio标签多一块黑色的背景。</li></ul><h3 id="跑马灯：页面自动滚动效果"><a href="#跑马灯：页面自动滚动效果" class="headerlink" title="跑马灯：页面自动滚动效果"></a>跑马灯：页面自动滚动效果</h3><p><code>&lt;marquee height=&quot;80&quot; weight=&quot;200&quot; bgcolor=&quot;red&quot; behavior=&quot;alternate&quot; direction=&quot;down&quot;&gt;...&lt;/marquee&gt;</code><br>中间的内容可以是文字、图片，也可以是由程序生成的文字或图片；</p><ul><li>behavior设置滚动的方式，alternate表示在两端之间来回滚动，scroll表示一端滚动到   另一端（会重复），slide表示由一端滚动到另一端（不会重复）；</li><li>direction设置滚动方向，down表示向下滚动，left向左，right向右，up向上；</li><li>loop表示滚动的次数，-1时无限滚动；</li><li>scrollamount设置滚动速度，值越大滚动速度越快；</li></ul><h3 id="几种HTML结构的快速搭建"><a href="#几种HTML结构的快速搭建" class="headerlink" title="几种HTML结构的快速搭建"></a>几种HTML结构的快速搭建</h3><ul><li>html:xt + tab，过渡结构；</li><li>html:xs + tab，严格结构；</li><li>! + tab，html5标签结构</li></ul><h3 id="高级标签"><a href="#高级标签" class="headerlink" title="高级标签"></a>高级标签</h3><h4 id="1、meta标签"><a href="#1、meta标签" class="headerlink" title="1、meta标签"></a>1、meta标签</h4><ul><li>编码格式，在meta标签里面设置charset，英语用ascll、ansi；日文、韩文用Unicode；中文的用gbk、gbk2312；台湾big5（繁体字符）；utf-8支持180到200个国家语言，所以用utf-8基本能解析所有国家语言<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>；</li><li>关键字：给搜索引擎看，主要用于SEO，<code>&lt;meta name=&quot;keywords&quot; content=&quot;阳光,帅气,有担当,进步&quot;&gt;</code>(逗号使用英语格式的)；</li><li>网页描述：在搜索的时候会出现的描述：<code>&lt;meta name=&quot;description&quot; content=&quot;江苏是一个好地方，有山有人妹子水灵&quot;&gt;</code>；</li><li>网页重定向：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;http://baidu.com&quot;&gt;</code>过5秒之后跳转到设定的页面;</li><li>告诉搜索引擎站点的作者：<code>&lt;meta name=&quot;author&quot; content=&quot;姓名&quot;&gt;</code>（不常用）；</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;all/none/index/noindex/follow/nofollow&quot;&gt;</code>（不常用，了解）：<ul><li>all：文件将被检索，且页面上的链接可以被查询；</li><li>none：文件将不被检索，且页面上的链接不可以被查询；</li><li>index：文件将被检索；</li><li>noindex：文件将不被检索，但页面上的链接可以被查询；</li><li>follow：页面上的链接可以被查询；</li><li>nofollow：文件将不被检索，页面上的链接可以被查询。</li></ul></li></ul><h4 id="2、link标签"><a href="#2、link标签" class="headerlink" title="2、link标签"></a>2、link标签</h4><ul><li>链接外部样式表文件<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;&gt;</code>;</li><li>设置网站icon：<code>&lt;meta rel=&quot;icon&quot; href=&quot;xxx.png&quot;&gt;</code></li></ul><h4 id="3、表格标签"><a href="#3、表格标签" class="headerlink" title="3、表格标签"></a>3、表格标签</h4><ul><li>展示数据，是对网页重构（css+div）的一个有益补充 ；</li><li>属性：<ul><li>边框属性：border；</li><li>表格大小会根据内容自动进行填充，也可以自己设定；</li><li>单元格之前的距离：cellspacing，默认值为2；</li><li>内容和边框的距离:cellpadding；</li><li>对齐方式：align，有三个值：left/right/center,如果给表格设为center，表格居中；如果给tr设置center，一行的内容居中；如果给td设置center，则某一列的内容居中，优先级：td &gt; tr &gt; table<br>两行三列表格：创建表格可以用快捷方式<code>table&gt;tr*2&gt;td*3</code></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //表格  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     //行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   //列      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>表格完整结构：表格拥有完整结构会对SEO更友好，但是没有的话也不要求，在thead等里面设置属性不管用，需要在对应的tr或者td中设置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>给表格添加标题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>单元格合并，同一行的单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>同一列单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span>“2”</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>设置列标题：th,会将内容加粗，居中显示</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>一月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>二月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>三月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>垂直方向对齐方式：valign=”top/middle/bottom”;<br>细线表格：设置border=”1”时，其实单元格之间的线的宽度是2。设置细线表格的思路：设置表格背景色，然后再设置cellspacing=”1”。</p><h4 id="4、表单标签"><a href="#4、表单标签" class="headerlink" title="4、表单标签"></a>4、表单标签</h4><ul><li>输入信息，收集信息；</li><li>表达组成：提示信息、表单控件（输入框）、表单域；</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>action:处理信息；</li><li>method：有两个值可取，get和post。get：通过地址栏提供（传输）信息，安全性差；post：通过xxx来处理信息，安全性相对较高。</li></ul><h4 id="5、文本输入框"><a href="#5、文本输入框" class="headerlink" title="5、文本输入框"></a>5、文本输入框</h4><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; readonly=&quot;readonly&quot; name=&quot;username&quot; value=&quot;jiangjiang&quot; placeholder=&quot;请输入用户名&quot;&gt;</code></p><ul><li>maxlength：设置输入的最大字符长度；</li><li>readonly：设置输入框为只读状态；</li><li>value：设置默认值；</li><li>placeholder：提示用户进行操作</li></ul><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>disable：输入框没有激活；</li><li>name：给输入框设置名字，以便进行区分；</li></ul><p><code>&lt;input type=&quot;password&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>密码输入框：输入的信息会变成暗文，文本输入框的所有属性对密码输入框都有效；</li></ul><p><strong>单选框</strong></p><p><code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot;&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;女</code></p><ul><li>一组单选按钮必须要设置同样的name，否则单选无效；</li><li>通过checked来设置默认选中项；</li></ul><p><strong>多选框</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>喝酒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>抽烟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>烫头发</code></pre><p><strong>多行文本框</strong><br><code>&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code></p><pre><code>- cols：控制输入字符的长度；- rows：控制输入的行数；</code></pre><p><strong>文件上传控件</strong><br><code>&lt;input type=&quot;file&quot;&gt;</code><br><strong>按钮</strong></p><ul><li>提交按钮：可以实现信息提交<code>&lt;input type=&quot;submit&quot;&gt;</code>;</li><li>普通按钮：不能提交，通常配合js使用<code>&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;</code>；</li><li>图片按钮：可实现信息提交功能<code>&lt;input type=&quot;image&quot; src=&quot;xxx.jpg&quot;&gt;</code>;</li><li>重置按钮：将信息重置到默认状态<code>&lt;input type=&quot;reset&quot;&gt;</code></li></ul><p><strong>将表单信息分组</strong></p><p>将表单内一组的内容放到<code>&lt;field&gt;&lt;/field&gt;</code>中，表单名称放到<code>&lt;legend&gt;&lt;/legend&gt;</code>中</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>个人信息提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><strong>表单的其它控件</strong></p><ul><li>网址输入框：<code>&lt;input type=&quot;url&quot;&gt;</code>，会要求输入正确的网址格式，但是空也可以提- - 交，以后会用js进行判断；</li><li>日期控件：<code>&lt;input type=&quot;date&quot;&gt;</code>；</li><li>时间控件：<code>&lt;input type=&quot;time&quot;&gt;</code>；</li><li>邮件控件：<code>&lt;input type=&quot;email&quot;&gt;</code>,要求输入正确的邮件格式，但是空也可以提交；</li><li>数字控件：<code>&lt;input type=&quot;number&quot; step=&quot;2&quot;&gt;</code>，有一个上下的小三角，可以步进，每次调整的值的大小为2；</li><li>滑块控件：<code>&lt;input type=&quot;range&quot; step=20&gt;</code></li></ul><p><strong>下拉列表</strong></p><p>普通下拉列表</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre><code>- multiple:设置多选；- selected:设置默认选中项，如果不设置，默认选择第一个选项；</code></pre><p><strong>分组下拉列表：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>江苏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>苏州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>无锡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>常州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浙江<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>杭州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>温州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>绍兴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>概述详细信息标签</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    发动机卡拉的交罚款了打飞机考虑到九分裤了打手机发开发阶段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><h3 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h3><p>标签语义化概念：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）；<br>标签语义化意义：</p><ul><li>网页结构合理；</li><li>有利于SEO和搜索引擎简历良好沟通，有了良好的结构和语义，你的网页内容自然容易被搜索引擎抓取；</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）；</li><li>便于团队开发和维护。</li></ul><p>好的语义化的网站标准：去掉样式表文件之后，结构依然很清晰。</p><p>标签语义化的注意事项：</p><ul><li>尽可能少的使用没有语义的标签div和span；</li><li>在语义不明显时，既可以使用div或者p时，尽量使用p，因为p在默认情况下有上下间距，对兼容特殊终端有利；</li><li>不要使用纯样式标签，如：font、b、i、s、u等，改用css样式；</li><li>需要强调的文本，可以包含在strong或者em标签中，strong默认样式是加粗（不要用b），em是斜体（不用i）；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
