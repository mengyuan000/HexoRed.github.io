<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6的常用语法</title>
      <link href="/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>刚开始用vue或者react，很多时候我们都会把ES6这个大兄弟加入我们的技术栈中。但是ES6那么多那么多特性，我们需要全部都掌握吗？秉着八原则，掌握好常有用的这个可以让我们快速起飞</p><h3 id="变量声明const和let"><a href="#变量声明const和let" class="headerlink" title="变量声明const和let"></a>变量声明const和let</h3><p>我们都是知道在ES6以前，var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部(不在函数内即在全局作用域的最顶部)。这就是函数变量提升例如:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>以上的代码实际上是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> test <span class="token comment" spellcheck="true">// 变量提升</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>  <span class="token punctuation">}</span></code></pre><p><strong>所以不用关心bool是否为true or false。实际上，无论如何test都会被创建声明。</strong></p><h5 id="接下来ES6主角登场："><a href="#接下来ES6主角登场：" class="headerlink" title="接下来ES6主角登场："></a>接下来ES6主角登场：</h5><p>我们通常用let和const来声明，<strong>let表示变量、const表示常量。let和const都是块级作用域。</strong>怎么理解这个块级作用域？<br>在一个函数内部，在一个代码块内部，<strong>说白了 { }大括号内的代码块即为let 和 const的作用域。</strong><br>看以下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//test 在此处访问不到</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>let的作用域是在它所在当前代码块，但不会被提升到当前函数的最顶部。再来说说const。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    name <span class="token operator">=</span> <span class="token string">'joe'</span> <span class="token comment" spellcheck="true">//再次赋值此时会报错</span></code></pre><h4 id="说一道面试题"><a href="#说一道面试题" class="headerlink" title="说一道面试题"></a>说一道面试题</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样的面试题是大家常见，很多同学一看就知道输出 10 十次<br>但是如果我们想依次输出0到9呢？两种解决方法。直接上代码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ES5告诉我们可以利用闭包解决这个问题</span>    <span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ES6</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>达到相同的效果，ES6简洁的解决方案是不是更让你心动！！！</p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>ES6模板字符简直是开发者的福音啊，解决了ES5在字符串功能上的痛点。</p><p><strong>第一个用途，基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//es5 </span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//es6</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello lux</span></code></pre><p><strong>第二个用途，在ES5时我们通过反斜杠()来做多行字符串或者字符串一行行拼接。ES6反引号(<code></code>)直接搞定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// es5</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> "Hi \    man<span class="token operator">!</span>    "    <span class="token comment" spellcheck="true">// es6</span>    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div>        &lt;span>hello world&lt;/span>    &lt;/div>`</span></span></code></pre><p>对于字符串es6当然也提供了很多厉害的方法。说几个常用的。</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1.includes：判断是否包含然后直接返回布尔值</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hahay'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 2.repeat: 获取字符串重复n次</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'hh'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'hehehe'</span>    <span class="token comment" spellcheck="true">//如果你带入小数, Math.floor(num) 来处理</span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数默认参数</p><p>在ES5我们给函数定义参数默认值是怎么样？</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">200</span>        <span class="token comment" spellcheck="true">//当传入num时，num为传入的值</span>        <span class="token comment" spellcheck="true">//当没传入参数时，num即有了默认值200</span>        <span class="token keyword">return</span> num    <span class="token punctuation">}</span></code></pre><p>但细心观察的同学们肯定会发现，num传入为0的时候就是false， 此时num = 200 与我们的实际要的效果明显不一样</p><p>ES6为参数提供了默认值。在定义函数时便初始化了这个参数，以便在参数没有被传递进去时使用。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//200</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//300</span></code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><strong>ES6很有意思的一部分就是函数的快捷写法。也就是箭头函数。</strong></p><p>箭头函数最直观的三个特点:</p><ul><li>不需要function关键字来创建函数</li><li>省略return关键字</li><li>继承当前上下文的 this 关键字</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例如：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等同于：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>说个小细节。</strong></p><p>当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略{}；例如:</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'hello'</span> <span class="token operator">+</span> name    <span class="token comment" spellcheck="true">//参数name就没有括号</span></code></pre><p>作为参考</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token string">'h'</span> <span class="token operator">+</span> name        <span class="token keyword">return</span> fullName    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果缺少()或者{}就会报错</span></code></pre><h3 id="拓展的对象功能"><a href="#拓展的对象功能" class="headerlink" title="拓展的对象功能"></a>拓展的对象功能</h3><p>对象初始化简写</p><p>ES5我们对于对象都是以键值对的形式书写，是有可能出现价值对重名的。例如：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>键值对重名，ES6可以简写如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">,</span>            age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ES6 同样改进了为对象字面量方法赋值的语法。ES5为对象添加方法：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>ES6通过省略冒号与 function 关键字，将这个语法变得更简洁</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>ES6 对象提供了Object.assign()这个方法来实现浅复制。</strong><br>Object.assign()可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{ }</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objA<span class="token punctuation">,</span> objB<span class="token punctuation">)</span></code></pre><h3 id="更方便的数据访问–解构"><a href="#更方便的数据访问–解构" class="headerlink" title="更方便的数据访问–解构"></a>更方便的数据访问–解构</h3><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p><p>ES5我们提取对象中的信息形式如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> people<span class="token punctuation">.</span>name    <span class="token keyword">const</span> age <span class="token operator">=</span> people<span class="token punctuation">.</span>age    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">' --- '</span> <span class="token operator">+</span> age<span class="token punctuation">)</span></code></pre><p>是不是觉得很熟悉，没错，在ES6之前我们就是这样获取对象信息的，一个一个获取。<strong>现在，解构能让我们从对象或者数组里取出数据存为变量，</strong>例如</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> people    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> color    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'red'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'blue'</span></code></pre><h3 id="Spread-Operator-展开运算符"><a href="#Spread-Operator-展开运算符" class="headerlink" title="Spread Operator 展开运算符"></a>Spread Operator 展开运算符</h3><p>ES6中另外一个好玩的特性就是Spread Operator 也是三个点儿…接下来就展示一下它的用途。</p><p><strong>组装对象或者数组</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> colorful <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>color<span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorful<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[red, yellow, green, pink]</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> alp <span class="token operator">=</span> <span class="token punctuation">{</span> fist<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> second<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> alphabets <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>alp<span class="token punctuation">,</span> third<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphabets<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{ "fist": "a", "second": "b", "third": "c"</span><span class="token punctuation">}</span></code></pre><p>有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> number    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2,3,4,5</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        gender<span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token string">'peking'</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> user    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{"address": "peking", "age": 19, "gender": "female"</span><span class="token punctuation">}</span></code></pre><p>对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        c<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        d<span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3, d: 4 }</span></code></pre><h3 id="import-和-export"><a href="#import-和-export" class="headerlink" title="import 和 export"></a>import 和 export</h3><p><strong>import导入模块、export导出模块</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全部导入</span><span class="token keyword">import</span> people <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">//有一种特殊情况，即允许你将整个模块当作单一对象进行导入</span><span class="token comment" spellcheck="true">//该模块的所有导出都会作为对象的属性存在</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> example <span class="token keyword">from</span> <span class="token string">"./example.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>age<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入部分</span><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">// 导出默认, 有且只有一个默认</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token comment" spellcheck="true">// 部分导出</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> extend Component <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以前有人问我，<strong>导入的时候有没有大括号的区别是什么。</strong>下面是我在工作中的总结：</p><ul><li>当用export default people导出时，就用 import people 导入（不带大括号）</li><li>一个文件里，有且只能有一个export default。但可以有多个export。</li><li>当用export name 时，就用import { name }导入（记得带上大括号）</li><li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li><li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><strong>在promise之前代码过多的回调或者嵌套，可读性差、耦合度高、扩展性低。通过Promise机制，扁平化的代码机构，大大提高了代码可读性；</strong></p><p><strong>用同步编程的方式来编写异步代码，保存线性的代码逻辑，极大的降低了代码耦合性而提高了程序的可扩展性。</strong></p><p>说白了就是用同步的方式去写异步代码。</p><p>发起异步请求</p><pre class=" language-js"><code class="language-js">   <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/todos'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>今天看到一篇关于面试题的很有意思。</p><pre class=" language-js"><code class="language-js"> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">==</span> <span class="token number">9999</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p><strong>生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，</strong>最直观的表现就是<strong>比普通的function多了个星号*</strong>，在其函数体内可以使用yield关键字,有意思的是函数会在每个yield后暂停。</p><p>这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。</p><p>OK。说说迭代器。当你调用一个generator时，它将返回一个迭代器对象。这个迭代器对象拥有一个叫做next的方法来帮助你重启generator函数并得到下一个值。next方法不仅返回值，它返回的对象具有两个属性：done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值。继续用刚刚取票的例子，每张排队号就是这里的value，打印票的纸是否用完就这是这里的done。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 生成器</span>    <span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span>    <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>那生成器和迭代器又有什么用处呢？</p><p>围绕着生成器的许多兴奋点都与异步编程直接相关。<strong>异步调用对于我们来说是很困难的事，我们的函数并不会等待异步调用完再执行，</strong>你可能会想到用回调函数，（当然还有其他方案比如Promise比如Async/await）。</p><p><strong>生成器可以让我们的代码进行等待。</strong>就不用嵌套的回调函数。使用generator可以确保当异步调用在我们的generator函数运行一下行代码之前完成时暂停函数的执行。</p><p>那么问题来了，<strong>咱们也不能手动一直调用next()方法，</strong>你需要一个能够调用生成器并启动迭代器的方法。就像这样子的</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>taskDef<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//taskDef即一个生成器函数</span>        <span class="token comment" spellcheck="true">// 创建迭代器，让它在别处可用</span>        <span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token function">taskDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动任务</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归使用函数来保持对 next() 的调用</span>        <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还有更多要做的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 开始处理过程</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><br>生成器与迭代器最有趣、最令人激动的方面，或许就是可创建外观清晰的异步操作代码。你不必到处使用回调函数，而是可以建立貌似同步的代码，但实际上却使用 yield 来等待异步操作结束。<br></blockquote> <h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ES6的特性远不止于此，但对于我们日常的开发开说。这已经是够够的了。还有很多有意思的方法。比如findIndex…等等。包括用set来完成面试题常客数组去重问题。我和我的小伙伴们都惊呆了!</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/24/hello-world/"/>
      <url>/2019/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Welcome-to-this-This-is-my-very-first-post"><a href="#Welcome-to-this-This-is-my-very-first-post" class="headerlink" title="Welcome to this! This is my very first post."></a>Welcome to this! This is my very first post.</h3><h4 id="Some-information-on-the-website"><a href="#Some-information-on-the-website" class="headerlink" title="Some information on the website:"></a>Some information on the website:</h4><p>此网站是怎么搭建起来的</p><pre class=" language-bash"><code class="language-bash">此网站是再hexo主题框架的基础下，基于GitHub静态托管，我给他起名叫：Hello-World</code></pre><p>此网站的作用是什么</p><pre class=" language-bash"><code class="language-bash">目的是为了记录一些知识</code></pre><p>主要知识方向是什么</p><pre class=" language-bash"><code class="language-bash">以计算机、编程为主，今后会主要方向会向着Machine learning</code></pre><p>他会一直存在吗？</p><pre class=" language-bash"><code class="language-bash">会的！我给这个域名给他赋予了特殊的意义，它的法语谐音是热带猫，之前为了赠与某人，也正如我爱她一样。</code></pre>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk评论配置</title>
      <link href="/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>对于新建的网站没有一个好的评论系统，会对体验度打大大的折扣，虽然之前出现过许多好用的评论插件，但是都因为一些问题不是关闭就是需要翻墙，今天我给大家推荐Gitalk，基于Github原生态的项目。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Gitalk是一个Github上的一个利用lssues作为评论的项目。这个是项目仓库的地址<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a>.<br>下载两个文件gitalk.min.js和gitalk.css到自己的本地项目目录。<br>把下列代码复制到需要的地方<br><img src="/postImg/2-2.jpg"><br>上面也看到了有几个数据需要填，比较重要的有clientID和clientSecret，怎么得到这两个数据呢，我们需要新建application得到。</p><h2 id="新建OAuth"><a href="#新建OAuth" class="headerlink" title="新建OAuth"></a>新建OAuth</h2><p>开始新建OAuth application：地址：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a><br><img src="/postImg/2-3.jpg"><br>完成后会出现clientID和clientSecret的串码，复制串码到上面对应的位置，还有就是repo是一个仓库名字，不需要完整路径。还有就是Gitalk是根据id来创建lssues,所以想要不同，id也要不一样，也可以填相对路径indow.location.pathname，完成后保存文件。<br>保存后进入首次进入页面后会出现使用Github登录，随后出现初始化lssues，点击一次即可，不然会创建多个lssues,随后刷新就完成了。<br><img src="/postImg/2-4.jpg"></p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1、如果出现error：not-found：说明你的repo仓库名填写有问题"><a href="#1、如果出现error：not-found：说明你的repo仓库名填写有问题" class="headerlink" title="1、如果出现error：not found：说明你的repo仓库名填写有问题"></a>1、如果出现error：not found：说明你的repo仓库名填写有问题</h3><h3 id="2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超"><a href="#2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超" class="headerlink" title="2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超"></a>2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超</h3>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建网站</title>
      <link href="/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo?"></a>什么是Hexo?</h2><p>hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在Github和Heroku上，Hexo也是github的开源项目</p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><h3 id="1、获得域名"><a href="#1、获得域名" class="headerlink" title="1、获得域名"></a>1、获得域名</h3><p>而且Github托管网站，完全不需要备案，推荐阿里云注册。</p><h3 id="2、GitHub创建个人仓库"><a href="#2、GitHub创建个人仓库" class="headerlink" title="2、GitHub创建个人仓库"></a>2、GitHub创建个人仓库</h3><p>登录Github，如果没有到github.com注册账号,然后新建一个仓库，名字为<strong><strong>____</strong></strong>.github.io,例如我的叫hexored.github.io</p><h3 id="3、安装Git"><a href="#3、安装Git" class="headerlink" title="3、安装Git"></a>3、安装Git</h3><p>什么是Git？简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到Github上。安装到随意目录下即可。安装完成后鼠标右键会出现Git Bash选项，如果没有你需要手动配置，步骤如下：<br><strong>1、通过在“运行”中输入‘regedit’，打开注册表。</strong><br><strong>2、找到[HKEY_CLASSES_ROOT\Directory\Background]。</strong><br><strong>3、在[Background]下如果没有[shell],则右键-新建项[shell]。</strong><br><strong>4、在[shell]下右键-新建项[open in Git],其值为“Git Bash Here”,此为右键菜单显示名称。</strong><br><strong>5、在[shell]下右键-新建-字符串值[Icon],双击编辑，其值为“D:...\Git\mingw64\share\git\git-for-windows.ico”。此为菜单加图标。</strong><br><strong>6、在[open in git]下右键-新建-项[command],其值为 “D:\Program Files\Git\git-bash.exe”</strong><br>这是为了以后管理项目方便，<strong>配置好后可以在任意文件夹下右键出Git Bash。</strong><br>安装成功后鼠标双击打开Git Bash,会出来命令行，然后在Git命令行中<br>设置user.name和user.email配置信息：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的Github用户名git config --global user.email "</span>你的Github注册邮箱"</code></pre><p>生成ssh密钥文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> keygen -t rsa -C <span class="token string">"你的Github注册邮箱"</span></code></pre><p>然后一直回车后会生成.ssh的文件夹中的id_rsa.pub密钥，将其中的内容全部复制，打开Github-&gt;Settings-&gt;Keys页面，新建new SSH Key。title为标题可随意填，将复制的内容粘贴进去，最后点击Add SSH key保存。最后再回到Git Bash中检测Github公钥设置是否成功，在Git命令行中输入ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>,如出现语句中出现successfully字样就表示成功</p><h3 id="4、安装Node-js"><a href="#4、安装Node-js" class="headerlink" title="4、安装Node.js"></a>4、安装Node.js</h3><p>注意安装node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入node -v：出现v6.10.2版本号就是成功了，接着输入npm -v检测。</p><h3 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h3><p>hexo就是我们的个人博客网站的框架，这里需要自己在电脑上创建一个文件夹，在此文件夹中进入命令行，安装shift键，右击鼠标点击命令行（open command window here）这次打开的是window命令行，你也可以先进命令行在cd进入相应的文件夹。<br>使用npm命令安装Hexo，输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>完成hexo的安装后就可以对hexo进行初始化操作了。</p><h3 id="6、初始化"><a href="#6、初始化" class="headerlink" title="6、初始化"></a>6、初始化</h3><p>打开Git Bash，输入初始化命令：</p><pre class=" language-bash"><code class="language-bash">hexo init blog</code></pre><p>初始化完成后你会在文件夹里面看到出现了许多文件，以后操作都会在此文件夹下进行，在此文件夹下任意地方打开Git Bash。我们来网站的本地检验预览。</p><pre class=" language-bash"><code class="language-bash">hexo new hello_world      //新建hello_world文章hexo g                    //生成hexo s                    //本地预览</code></pre><p>输入完后打开浏览器输入地址：localhost:4000，就可以看到本地浏览模式下的网站雏形。<br>想要把相应的文件部署到Github我们还需要进行网站的推送。</p><h3 id="7、推送网站"><a href="#7、推送网站" class="headerlink" title="7、推送网站"></a>7、推送网站</h3><p><strong>在文件的根目录下，_config.yml为站点配置文件。themes文件夹中也有一个_config.yml为主题配置文件。</strong><br>1、我们<strong>打开站点文件</strong>，翻到最后修改为：<br>deploy:<br>  type: git<br>  repo:  github仓库的完整路径加上.git<br>  （例如我的<a href="https://github.com/mengyuan000/hexored.github.io.git）" target="_blank" rel="noopener">https://github.com/mengyuan000/hexored.github.io.git）</a><br>  branch: master<br>2、<strong>打开根目录下的source，新建文件名为CNAME，保存成所有文件形式，在里面保存你的域名，建议不带www</strong><br>保存后，安装Git部署插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>完成后在Git Bash中输入命令：</p><pre class=" language-bash"><code class="language-bash">hexo c     //清理hexo g     //生成hexo d     //部署</code></pre><p>此时进入Github项目仓库你会发现文件已经部署上去了。为了用域名进行访问，你就需要对域名进行绑定。</p><h3 id="8、绑定域名："><a href="#8、绑定域名：" class="headerlink" title="8、绑定域名："></a>8、绑定域名：</h3><p>进入购买域名后的管理台，找到域名，进入解析，对照下图新添加三个项<br><img src="/postImg/1-2.jpg"><br>151.101.73.147为Github的地址，你可以自己ping你的xxxx.github.io的ip地址。首次解析可能需要等几分钟才好，如果你访问不了自己的网站，你就等20分钟后再试一下，如若不行就是你配置的问题。然后登录Github,进入之前创建的仓库，点击settings中GitHub Pages项中source改为master branch,在出来的Custom domain中填入你的域名。点击save保存。这时，你可以用域名访问网站了。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在之后你也可以更换主题，在此网站<a href="https://hexo.io/themes/的开发者Github上下载" target="_blank" rel="noopener">https://hexo.io/themes/的开发者Github上下载</a></p><pre class=" language-bash"><code class="language-bash">clone 路径 保存目录（起始为当前文件）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html基础语法</title>
      <link href="/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Html是一种超文本标记语言( hypertext markup language )，超链接（<strong>实现页面跳转</strong>）；</p><h3 id="html标准结构："><a href="#html标准结构：" class="headerlink" title="html标准结构："></a>html标准结构：</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span> //声明文档类型，由渲染引擎解析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  //根标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  //头部标签，里面的内容是给浏览器/搜索引擎看的        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> //标题标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  //主体标签，给用户、浏览者看    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>html和htm是一样的，后缀名不能决定文件格式，只能决定文件打开方式；<br><strong>html标签分类：</strong></p><ul><li>单标签 <code>&lt;!doctype html&gt;</code></li><li>双标签<code>&lt;html&gt;&lt;/html&gt;</code>、<code>&lt;body&gt;&lt;/body&gt;</code>、<code>&lt;title&gt;&lt;/title&gt;</code></li></ul><p><strong>html标签关系：</strong></p><ul><li>包含（嵌套）：<code>&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;head&gt;</code>父子关系</li><li>并列关系：<code>&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code>兄弟姐妹关系</li></ul><h3 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h3><h4 id="1、单标签"><a href="#1、单标签" class="headerlink" title="1、单标签"></a>1、单标签</h4><ul><li>注释标签：ctrl + /</li><li>换行标签：<code>&lt;br/&gt;</code>在html5中可以省略/</li><li>水平线标签：<code>&lt;hr /&gt;</code></li></ul><h4 id="2、双标签"><a href="#2、双标签" class="headerlink" title="2、双标签"></a>2、双标签</h4><ul><li>标题标签<code>&lt;h1&gt;&lt;/h1&gt;</code>取值是 h1-h6，一个页面中只能有一个h1。</li><li>段落标签：<code>&lt;p&gt;段落内容&lt;/p&gt;</code>特点：上下自动生成空白行；<code>&lt;br/&gt;</code>换行不会生成空白行；</li><li>文本标签：<code>&lt;font size=&quot;16&quot; color=&quot;red&quot; &gt;文本内容&lt;/font&gt;</code>早期做网站时候使用；</li></ul><h4 id="3、文本格式化标签："><a href="#3、文本格式化标签：" class="headerlink" title="3、文本格式化标签："></a>3、文本格式化标签：</h4><ul><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt;</code>,<code>&lt;b&gt;&lt;/b&gt;</code>,作中建议使用strong；</li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt;</code>，<code>&lt;i&gt;&lt;/i&gt;</code>,工作中建议使用em；</li><li>删除线：<code>&lt;del&gt;&lt;/del&gt;</code>,<code>&lt;s&gt;&lt;s/&gt;</code>，工作中建议使用del；</li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt;</code>,<code>&lt;u&gt;&lt;/u&gt;</code>,工作中建议使用ins。</li><li>建议使用的都是更具语义化，可读性更强。</li></ul><h4 id="4、图片标签"><a href="#4、图片标签" class="headerlink" title="4、图片标签"></a>4、图片标签</h4><p><code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;提示文本&quot; width=&quot;&quot; height=&quot;&quot;/&gt;</code></p><ul><li><strong>src: </strong>图片的来源，必写属性；</li><li>当鼠标放在图片上时显示 <strong>title</strong> 的内容；</li><li>当图片加载失败时显示 <strong>alt</strong> 的内容;</li><li>如果不设置图片宽高,显示图片默认大小，如果只设置其中一个，会进行等比例缩放，如果两个都设置就会按照设置的大小进行展示。</li></ul><h4 id="5、a标签-超链接"><a href="#5、a标签-超链接" class="headerlink" title="5、a标签(超链接)"></a>5、a标签(超链接)</h4><p><code>&lt;a href=&quot;&quot; title=&quot;&quot; target=&quot;&quot;&gt;登录&lt;/a&gt;</code></p><ul><li><strong>href </strong>存放目标页面的<strong>url</strong>，为必写属性；</li><li>鼠标放在超链接上显示 <strong>title</strong> 的内容；</li><li><strong>target</strong>为页面打开的方式，默认在原页面打开<strong>_self</strong>，如果设置值为 </li><li><strong>_black</strong>，就会打开一个新的页面进行展示。</li></ul><p><strong>锚链接</strong></p><ul><li>首先定义一个锚点：在标签中添加一个id属性；</li><li>超链接到锚点:<code>&lt;a href=&quot;#id属性名&quot;&gt;跳转&lt;/a&gt;</code></li></ul><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p><strong>相对路径：</strong>相对于文件自身出发</p><ul><li>文件(html文档)和图片在同一个目录(文件夹)，直接写文件名；</li><li>如果图片在下一级目录里，src就为文件夹名+/+图片名称；</li><li>如果图片在上一级目录里，scr就是 ../ + 图片名</li></ul><p><strong>绝对路径</strong></p><ul><li>电脑上绝对路径：从电脑盘符开始，如F:\Documents\学习\前端学习\mage.png；</li></ul><h3 id="空链、压缩包下载、超链接的优化写法、特殊字符："><a href="#空链、压缩包下载、超链接的优化写法、特殊字符：" class="headerlink" title="空链、压缩包下载、超链接的优化写法、特殊字符："></a>空链、压缩包下载、超链接的优化写法、特殊字符：</h3><p><strong>空链：</strong>当不知道跳转链接时候使用：<code>&lt;a href=&quot;#&quot;&gt;空链&lt;/a&gt;</code></p><p><strong>压缩包下载</strong>，<code>&lt;a href=&quot;xxx/mage.rar&quot;&gt;压缩包&lt;/a&gt;</code>，了解就行，工作中一般不会这样使用。</p><p><strong>超链接的优化写法， 让页面中所有的标签在点击时都打开新窗口：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p><strong>特殊字符：</strong></p><blockquote><p><code>空格</code>  空格符      <code>&amp;nbsp</code><br><code>&lt;</code>    小于号      <code>&amp;lt</code><br><code>&gt;</code>    大于号       <code>&amp;gt</code><br><code>&amp;</code>    和号         <code>&amp;amp</code><br><code>￥</code>   人民币       <code>&amp;yen</code><br><code>©</code>    版权         <code>&amp;copy</code><br><code>®</code>    注册商标     <code>&amp;reg</code><br><code>°</code>    摄氏度       <code>&amp;deg</code><br><code>±</code>   正负号       <code>&amp;plumn</code><br><code>×</code>   乘号         <code>&amp;times</code><br><code>÷</code>    除号         <code>&amp;divide</code><br><code>²</code>    平方（上标2） <code>&amp;sup2</code><br><code>³</code>   立方（上标3） <code>&amp;sup3</code></p></blockquote><h3 id="中级标签"><a href="#中级标签" class="headerlink" title="中级标签"></a>中级标签</h3><h4 id="1、列表标签"><a href="#1、列表标签" class="headerlink" title="1、列表标签"></a>1、列表标签</h4><p><strong>无序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>type可以取三个值，square样式为小方块、circle样式为空心小圆点、disc为实心小圆点（默认样式）。</p><p><strong>有序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>type可以更改标号样式，type可取的值为：1、a、A、i、I等，start设置从哪一个值开始依次往后排序。</p><p><strong>定义列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>小标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><h4 id="2、音乐标签"><a href="#2、音乐标签" class="headerlink" title="2、音乐标签"></a>2、音乐标签</h4><ul><li><code>&lt;embed src=&quot;&quot; hidden=&quot;true&quot; /&gt;</code>，hidden设置为true时，隐藏音乐播放器，比audio标签多一块黑色的背景。</li></ul><h3 id="跑马灯：页面自动滚动效果"><a href="#跑马灯：页面自动滚动效果" class="headerlink" title="跑马灯：页面自动滚动效果"></a>跑马灯：页面自动滚动效果</h3><p><code>&lt;marquee height=&quot;80&quot; weight=&quot;200&quot; bgcolor=&quot;red&quot; behavior=&quot;alternate&quot; direction=&quot;down&quot;&gt;...&lt;/marquee&gt;</code><br>中间的内容可以是文字、图片，也可以是由程序生成的文字或图片；</p><ul><li>behavior设置滚动的方式，alternate表示在两端之间来回滚动，scroll表示一端滚动到   另一端（会重复），slide表示由一端滚动到另一端（不会重复）；</li><li>direction设置滚动方向，down表示向下滚动，left向左，right向右，up向上；</li><li>loop表示滚动的次数，-1时无限滚动；</li><li>scrollamount设置滚动速度，值越大滚动速度越快；</li></ul><h3 id="几种HTML结构的快速搭建"><a href="#几种HTML结构的快速搭建" class="headerlink" title="几种HTML结构的快速搭建"></a>几种HTML结构的快速搭建</h3><ul><li>html:xt + tab，过渡结构；</li><li>html:xs + tab，严格结构；</li><li>! + tab，html5标签结构</li></ul><h3 id="高级标签"><a href="#高级标签" class="headerlink" title="高级标签"></a>高级标签</h3><h4 id="1、meta标签"><a href="#1、meta标签" class="headerlink" title="1、meta标签"></a>1、meta标签</h4><ul><li>编码格式，在meta标签里面设置charset，英语用ascll、ansi；日文、韩文用Unicode；中文的用gbk、gbk2312；台湾big5（繁体字符）；utf-8支持180到200个国家语言，所以用utf-8基本能解析所有国家语言<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>；</li><li>关键字：给搜索引擎看，主要用于SEO，<code>&lt;meta name=&quot;keywords&quot; content=&quot;阳光,帅气,有担当,进步&quot;&gt;</code>(逗号使用英语格式的)；</li><li>网页描述：在搜索的时候会出现的描述：<code>&lt;meta name=&quot;description&quot; content=&quot;江苏是一个好地方，有山有人妹子水灵&quot;&gt;</code>；</li><li>网页重定向：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;http://baidu.com&quot;&gt;</code>过5秒之后跳转到设定的页面;</li><li>告诉搜索引擎站点的作者：<code>&lt;meta name=&quot;author&quot; content=&quot;姓名&quot;&gt;</code>（不常用）；</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;all/none/index/noindex/follow/nofollow&quot;&gt;</code>（不常用，了解）：<ul><li>all：文件将被检索，且页面上的链接可以被查询；</li><li>none：文件将不被检索，且页面上的链接不可以被查询；</li><li>index：文件将被检索；</li><li>noindex：文件将不被检索，但页面上的链接可以被查询；</li><li>follow：页面上的链接可以被查询；</li><li>nofollow：文件将不被检索，页面上的链接可以被查询。</li></ul></li></ul><h4 id="2、link标签"><a href="#2、link标签" class="headerlink" title="2、link标签"></a>2、link标签</h4><ul><li>链接外部样式表文件<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;&gt;</code>;</li><li>设置网站icon：<code>&lt;meta rel=&quot;icon&quot; href=&quot;xxx.png&quot;&gt;</code></li></ul><h4 id="3、表格标签"><a href="#3、表格标签" class="headerlink" title="3、表格标签"></a>3、表格标签</h4><ul><li>展示数据，是对网页重构（css+div）的一个有益补充 ；</li><li>属性：<ul><li>边框属性：border；</li><li>表格大小会根据内容自动进行填充，也可以自己设定；</li><li>单元格之前的距离：cellspacing，默认值为2；</li><li>内容和边框的距离:cellpadding；</li><li>对齐方式：align，有三个值：left/right/center,如果给表格设为center，表格居中；如果给tr设置center，一行的内容居中；如果给td设置center，则某一列的内容居中，优先级：td &gt; tr &gt; table<br>两行三列表格：创建表格可以用快捷方式<code>table&gt;tr*2&gt;td*3</code></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //表格  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     //行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   //列      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>表格完整结构：表格拥有完整结构会对SEO更友好，但是没有的话也不要求，在thead等里面设置属性不管用，需要在对应的tr或者td中设置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>给表格添加标题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>单元格合并，同一行的单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>同一列单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span>“2”</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>设置列标题：th,会将内容加粗，居中显示</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>一月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>二月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>三月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>垂直方向对齐方式：valign=”top/middle/bottom”;<br>细线表格：设置border=”1”时，其实单元格之间的线的宽度是2。设置细线表格的思路：设置表格背景色，然后再设置cellspacing=”1”。</p><h4 id="4、表单标签"><a href="#4、表单标签" class="headerlink" title="4、表单标签"></a>4、表单标签</h4><ul><li>输入信息，收集信息；</li><li>表达组成：提示信息、表单控件（输入框）、表单域；</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>action:处理信息；</li><li>method：有两个值可取，get和post。get：通过地址栏提供（传输）信息，安全性差；post：通过xxx来处理信息，安全性相对较高。</li></ul><h4 id="5、文本输入框"><a href="#5、文本输入框" class="headerlink" title="5、文本输入框"></a>5、文本输入框</h4><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; readonly=&quot;readonly&quot; name=&quot;username&quot; value=&quot;jiangjiang&quot; placeholder=&quot;请输入用户名&quot;&gt;</code></p><ul><li>maxlength：设置输入的最大字符长度；</li><li>readonly：设置输入框为只读状态；</li><li>value：设置默认值；</li><li>placeholder：提示用户进行操作</li></ul><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>disable：输入框没有激活；</li><li>name：给输入框设置名字，以便进行区分；</li></ul><p><code>&lt;input type=&quot;password&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>密码输入框：输入的信息会变成暗文，文本输入框的所有属性对密码输入框都有效；</li></ul><p><strong>单选框</strong></p><p><code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot;&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;女</code></p><ul><li>一组单选按钮必须要设置同样的name，否则单选无效；</li><li>通过checked来设置默认选中项；</li></ul><p><strong>多选框</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>喝酒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>抽烟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>烫头发</code></pre><p><strong>多行文本框</strong><br><code>&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code></p><pre><code>- cols：控制输入字符的长度；- rows：控制输入的行数；</code></pre><p><strong>文件上传控件</strong><br><code>&lt;input type=&quot;file&quot;&gt;</code><br><strong>按钮</strong></p><ul><li>提交按钮：可以实现信息提交<code>&lt;input type=&quot;submit&quot;&gt;</code>;</li><li>普通按钮：不能提交，通常配合js使用<code>&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;</code>；</li><li>图片按钮：可实现信息提交功能<code>&lt;input type=&quot;image&quot; src=&quot;xxx.jpg&quot;&gt;</code>;</li><li>重置按钮：将信息重置到默认状态<code>&lt;input type=&quot;reset&quot;&gt;</code></li></ul><p><strong>将表单信息分组</strong></p><p>将表单内一组的内容放到<code>&lt;field&gt;&lt;/field&gt;</code>中，表单名称放到<code>&lt;legend&gt;&lt;/legend&gt;</code>中</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>个人信息提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><strong>表单的其它控件</strong></p><ul><li>网址输入框：<code>&lt;input type=&quot;url&quot;&gt;</code>，会要求输入正确的网址格式，但是空也可以提- - 交，以后会用js进行判断；</li><li>日期控件：<code>&lt;input type=&quot;date&quot;&gt;</code>；</li><li>时间控件：<code>&lt;input type=&quot;time&quot;&gt;</code>；</li><li>邮件控件：<code>&lt;input type=&quot;email&quot;&gt;</code>,要求输入正确的邮件格式，但是空也可以提交；</li><li>数字控件：<code>&lt;input type=&quot;number&quot; step=&quot;2&quot;&gt;</code>，有一个上下的小三角，可以步进，每次调整的值的大小为2；</li><li>滑块控件：<code>&lt;input type=&quot;range&quot; step=20&gt;</code></li></ul><p><strong>下拉列表</strong></p><p>普通下拉列表</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre><code>- multiple:设置多选；- selected:设置默认选中项，如果不设置，默认选择第一个选项；</code></pre><p><strong>分组下拉列表：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>江苏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>苏州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>无锡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>常州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浙江<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>杭州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>温州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>绍兴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>概述详细信息标签</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    发动机卡拉的交罚款了打飞机考虑到九分裤了打手机发开发阶段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><h3 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h3><p>标签语义化概念：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）；<br>标签语义化意义：</p><ul><li>网页结构合理；</li><li>有利于SEO和搜索引擎简历良好沟通，有了良好的结构和语义，你的网页内容自然容易被搜索引擎抓取；</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）；</li><li>便于团队开发和维护。</li></ul><p>好的语义化的网站标准：去掉样式表文件之后，结构依然很清晰。</p><p>标签语义化的注意事项：</p><ul><li>尽可能少的使用没有语义的标签div和span；</li><li>在语义不明显时，既可以使用div或者p时，尽量使用p，因为p在默认情况下有上下间距，对兼容特殊终端有利；</li><li>不要使用纯样式标签，如：font、b、i、s、u等，改用css样式；</li><li>需要强调的文本，可以包含在strong或者em标签中，strong默认样式是加粗（不要用b），em是斜体（不用i）；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
