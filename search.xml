<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>On Time</title>
      <link href="/2019/02/08/%E4%B8%80%E4%B8%AA%E6%95%85%E4%BA%8B/"/>
      <url>/2019/02/08/%E4%B8%80%E4%B8%AA%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4894309&auto=0&height=66"></iframe></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=448975002&auto=0&height=66"></iframe><br>（<em>随便点击播放上面这两首优美音乐的其中一个，不是我找不到更好听的，而是有版权</em>）o(<em>￣▽￣</em>)ブ</p><p>周蓉同志，其实我一直想和你谈谈心，在我看来，我想我们或多或少也许有一些弄不清道不明的事，我只是借此让你知道我的所想，事实上我一直都想和你说清楚，第一件事情就是我不知道你有没有喜欢过我，这是一个愚昧的问题，但是当局者迷。为什么会问这个问题呢？因为我一直认为是我自己把你弄丢的，我总是这样责怪自己。虽然我不是女生，但是我些许可以从你给我的感觉中猜到。虽然已经再牵不到你的手，<strong>但我还是记得你想要和我一起唱《七里香》的那种好奇、那天节目后台你拉着我的手去拍照、大一期末考试我回头问你会不会时，你脸红的像个苹果，哈哈，</strong>（读到这你会说，咦~这个人还记得这些，我都不记得，是魔鬼吗。总感觉想起这是他说的都有点反胃呢，如果你有这种感觉，我想我们的误会还不是一点，我的目的也就是让你了解我，重塑你心中我的形象）你当时给我的感觉不止是想象，就像一部古典的钢琴曲即将被创作出来一样，那音符的旋律就等我去弹奏。可惜的是我没有这么去做，因为我害怕做一个抢别人女朋友的人，所以我一直刻意的和你保持距离。有时我也会感觉好像是上天安排好的一场闹剧一样，我在还没清醒的时候你就出现，<strong>我的没自信、不会说话、自以为</strong>，这些让我好像做什么都是错的。也许被我说中，也许你本就不喜欢这样的男生包括我，但不管哪一种，我都想讲讲我以前的故事。</p><p>其实<strong>我小的时候是一个活泼开朗、幽默、顽皮的孩子</strong>，曾因为调皮被学校开除过两次，也总喜欢和姐姐开恶作剧，她愤怒的追着我跑的时候是我最开心的时刻，我还有个小伙伴，两个人是村里面出了名的捣蛋鬼。虽然这样，但是我的数学出奇的好，我很喜欢数学，成绩也好，我也很自信。也可能因为这一点，我很招女孩子喜欢，6年级是我最疯狂的一年，被数学老师推荐参加奥数，照大头贴的时候偷亲我喜欢的女生，仗着老师喜欢我，在她的课堂抱着那个女生上课，我在校外送过他礼物，我在班级我经常恶作剧别人，但他们不敢对我生气，学着学长拿着收缩棍混校霸，也许我真的是当时的校霸。我喜欢这种不学习但是就是学习好的感觉！但接下来发生的一件事改变了我的性格，我曾玩的很好的女生追我，老是问我喜不喜欢她，可当时的我不喜欢她，我有喜欢的人了，看着她那双期盼的眼神，让当时的我不知该怎样拒绝，接下来的每一天她都各种办法讨好我，吃人东西嘴软，拿人东西手短，我决定实话实说，可没想到她当时的情绪是那么激动，我害怕了。我心想到了中学应该就不会见到了，但残酷的命运把她安排在了我的座位后，这改变了我的性格，我会比别人想的多，<strong>我害怕让别人喜欢我</strong>，我开始在乎别人对我的看法，因为我毕竟当时挺酷的。但即使是考试这样的一面之缘，都会有人喜欢上我，嗯，这次是被我果断拒绝了（我开始产生了一种心里，就是如果你喜欢我，我就对你的好感度大减），同时因为是数学课代表，平时表现的很文静，这让那些调皮的同学仗着认识学长没少欺负我，开学时又说又笑，为什么要这样针对我，我很不理解，但是我拿他们没办法（的确学校门口经常有人打群架），我总是想为什么我没有哥哥在学校，这让我慢慢变得胆小。初中时，我还爱上了打游戏，但即使这样，我的数学还是很好（我的数学几乎都是前三），这更让我膨胀。高中，我命运的下滑点，因为轻度近视和网瘾，我引以为傲的数学离开我了，我不在是哪个小天才，小黑马，但这并没有让我紧张，反而让<strong>我沉浸在游戏的世界</strong>，我几乎满脑子都是游戏，我可以翻墙头出去通宵，第二天课堂上呼呼大睡，这让我的成绩和人际沟通都出现了问题，我害怕与人社交，但是奇怪的是我的魅力还是没有消失，还是有不乏的追求者，也都被我拒绝了，我想的都是怎么打游戏。失败的开始—–在我高三的时候可能周围的朋友都有女朋友，我可能羡慕了，我决定找一个，我送她礼物，约她出来，老是问她同不同意，可是她就是不说，情景莫名的相似，<strong>我渐渐发现，我竟然失去的不只是数学，还有我的幽默和自信</strong>，在大一刚开学的时候，我最后问她一次后，我决定放弃。在此之后我越来越没自信，胆小，因为我害怕社交（都是游戏害的），大学里的我不是真正的我，<strong>无数次的场合，我都在想，这不是原来的我，我为什么变得不幽默了？不会说话了？还有我的情商跑哪去了？越想我就越说不出话来，这也是我经常情绪低落的原因</strong>。我变得喜欢安静，特别喜欢一个人欣赏风景，那种自由自在的感觉。</p><p><strong>我害怕表露自己的想法，刻意掩饰自己</strong>，当时我害怕和你坦白，因为我怕我们连朋友也做不成，我总觉得时机还没到，因为我没自信，渐渐的我发现我们越来越生疏，我想和你说话但是不敢也不知怎么说，这是我在删除你之前的几乎每一天的想法，我试着打一个心型的代码给你看，我试着想，你为什么不会主动，哪怕只是一次？我也心里有底了，可能就是一场误会吧。我还记得野外烧烤那次，你的眼神我到现在都还觉得害怕，那种讨厌的眼神。。。，还有一次我给你看动物园猴子的照片，你也是爱答不理的感觉，<strong>我想，我自己也会有今天啊</strong>。所以如果我有什么让你不开心的还望原谅，我也不想真的，大学里我从未找回我之前的我，<strong>我渐渐发现我自身缺的东西太多了</strong>，我刻意的去学习如何变得幽默，如何和别人交谈，和决定忘记你。大二下半学期，我也找到了女朋女，但是我发现我不喜欢她，分了，我决定让自己变强！我痴迷于代码，所以才有了此网站，我要让自己变得富有！我做各种兼职，传菜员、发传单、保安、干快递、路推牛奶、上门销售净水器。。。。，我觉得不行，我自己招兼职，这期间也结识了许多朋友，也让我些许找回了我的一点自信，大三我选择接本留在学校，和我的好朋友做校园商城送货服务，自己开发过微信小程序，但是服务器上的代码我还不会，所有只有雏型，我一直都没有放弃过编程，但奈何周围无人会，自己学不会，只好留作一种精神食粮没事时画饼充饥，我18年的3月出去找了份工作，老板对我是真的好，让我负责生产到发货之间的所有事情，但是我一心想写代码，在工作之余我复习考试科目和C语言，因为我很羡慕我的舍友可以在公司写单片机的控制代码，他是常州大学毕业的，经理很喜欢他。我开始意识到，虽说你只要厉害，就可以做成事，但别人会相信你吗？你拿什么去证明，之前我一直认为我的C语言已经可以了，但是真的是这样吗？不是，当我从新认真复习准备考计算机二级的时候，我才发现我是眼高手低的那种人，我的初中数学老师没说错，所以我在9月开学的时候选择了回扬州。那段时间我真的过的真充实，就连路途中的时间我都利用上了。要钱没钱，要资源没资源的我，不知何去何从，我下一步的打算就是考研，之虽然不是最好的选择，但是我想试一试，既然就已经上了两年了，在多着半年又如何，我买了一堆复习资料，准备破釜沉舟一次！这几年我真的改变很多，只因我之前空缺的太多，我不想再一次的失去机会（生活中的各种机遇），<strong>我要能够变得有能力</strong>，学、思考、悟，这是我写在笔记上的三个大字，一个悟字是我一直在感悟的，我不怕我懂得的太多而烦恼会增多，我要我的能力变强，<strong><code>生活何曾不苟且？如若不努力，我又能抓的住什么？那些我曾经拥有的，还是那些我本可以拥有的？</code></strong>我不担心我找不到我喜欢的，我只是希望她能来的更早一些。同样的我不担心我的未来，我对我的未来充满希望，我只是担心我不会一直都有年轻的体态和精力。</p><p>我也不知道我为什么就中意你，奇了怪了？可能你长得像徐州人吧，可能我还没遇到另一个我喜欢的吧，既然我敢说，我就不怕，哈哈，你也不要觉得反感，我只是憋得太久想说出来才舒服，<strong>说真的，我希望你每天都能开心。还有理解我，无论我做过什么。</strong></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些技术问题的解法</title>
      <link href="/2019/02/03/%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95/"/>
      <url>/2019/02/03/%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机类"><a href="#计算机类" class="headerlink" title="计算机类"></a>计算机类</h2><h3 id="Win10商店打不开解法"><a href="#Win10商店打不开解法" class="headerlink" title="Win10商店打不开解法"></a>Win10商店打不开解法</h3><p><strong>不知道有没有小伙伴的电脑出现了自带商店打不开的问题，我有一个亲测有效的方法就是：重新安装。</strong><br>这种方法很简单粗暴，简直没有天理，直接上就行。</p><p><strong>1.用管理员打开powershell</strong><br><img src="/postImg/12-1-a.jpg"></p><p><strong>2.找出Windows Store 的包名</strong><br>  输入以下指令：<br>  <code>Get-AppxPackage -allusers | Select Name, PackageFullName</code><br>  点击回车机会出现下列的应用列表<br><img src="/postImg/12-1-b.jpg"></p><p><strong>3.找到Microsoft.WindowsStore并把后面的完整名称复制下来</strong><br> <img src="/postImg/12-1-c.jpg"></p><p><strong>4.把上一步复制下来的完整名称添加到后面代码：</strong><br><code>Add-AppxPackage -register “C:\Program Files\WindowsApps\（完整名称）\appxmanifest.xml” -DisableDevelopmentMode</code></p><p><strong>5.然后回到powershell执行这段指令</strong></p><p><strong>等待程序运行完毕，重启</strong><br><strong>搞定！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些好用的软件推荐</title>
      <link href="/2019/02/02/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2019/02/02/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><h3 id="基于C-C-的Visual-Studio-IDE"><a href="#基于C-C-的Visual-Studio-IDE" class="headerlink" title="基于C/C++的Visual Studio IDE"></a>基于C/C++的Visual Studio IDE</h3><p><img src="/postImg/11-1-a.jpg"><br>适用于Windows和Mac的Visual Studio IDE ，功能非常强大，<strong>开发适用于Android。ios、Mac、Windows、Wed和云的应用</strong>，Visual Studio 使你能够准确、高效地编写代码，并且不会丢失当前的文件上下文。通过代码的历史数据可跨语言快速查找并修复 bug，无论是在本地还是远程。使用全面的测试工具编写高质量代码，<strong>在任意提供商（包括 GitHub）托管的 Git 存储库中管理你的源代码。</strong>通过利用 Microsoft、合作伙伴和社区提供的工具、控件和模板，扩展 Visual Studio 功能。 </p><p><strong>注意</strong>:里面的组建比较多，安装内容也比较大，会有一部分组件会强制安装在C盘,C盘不够用的小伙伴要注意一下！</p><p><strong>安装步骤</strong><br>首先找到微软的官网，<a href="https://www.visualstudio.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-cn%2F，下载需要的IDE产品" target="_blank" rel="noopener">https://www.visualstudio.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-cn%2F，下载需要的IDE产品</a><br><img src="/postImg/11-1-b.jpg"><br>选择community这个安装系列工具集下载器，你所之后需要的扩展功能都可以在这里面安装<br><img src="/postImg/11-1-c.jpg"><br><img src="/postImg/11-1-d.jpg"><br>完成后就会出现下面页面，根据需要装载组建，对于C程序这一部分组件就够了，按照图勾选上<br><img src="/postImg/11-1-e.jpg"><br>下载完成之后我们就打开软件，测试一下，首先打开文件新建项目<br><img src="/postImg/11-1-f.jpg"><br>选择windows控制台，填写项目名称以及路径，文件名默认为C++文件.cpp，如果写的是C，文件名后面需要加.c，然后确定。<br><img src="/postImg/11-1-g.jpg"><br>然后就可以在打开的文件里面开始编写，<br><img src="/postImg/11-1-h.jpg"><br>然后调试编译<br><img src="/postImg/11-1-i.jpg"><br>最后查看是否出错<br><img src="/postImg/11-1-j.jpg"><br>测试后的错误列表和输出都可以再视图里面找到<br><img src="/postImg/11-1-k.jpg"></p><h3 id="VC-2010Express"><a href="#VC-2010Express" class="headerlink" title="VC++2010Express"></a>VC++2010Express</h3><p><img src="/postImg/11-2-a.jpg"><br>VC++2010Express是VS2010版本中的一个组件，使其编写C/C++的一个工具，一般不会用到，最近计算机二级C考试软件改成了VC++2010学习版，对于软件使用的熟练程度也影响着成绩，所以不妨下一个熟悉一下操作环境。<br><strong>百度云盘下载地址：链接: <a href="https://pan.baidu.com/s/1Eyio46MqICng357_PNIiCA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Eyio46MqICng357_PNIiCA</a> 密码: xy4u</strong></p><p><strong>安装：</strong><br>除了安装目录，一直点确定就可以了，软件是中文版的<br><strong>配置小操作：</strong><br>刚安装号后进入软件是没有编译按钮的需要自己添加，对于不熟悉的小伙伴不用担心浪费时间，我给你找好了方法</p><p><strong>首先快捷栏里面是没有我们熟悉的编译按钮的，这需要我们自己弄上去</strong><br>首先点击工具→自定义<br><img src="/postImg/11-2-b.jpg"></p><p>然后把生成打上勾，你就会发现软件面板上出现了编译按钮<br><img src="/postImg/11-2-c.jpg"></p><p>右击编译栏右边的小箭头→添加执行→自定义，因为我们编写的不是真正的项目，所以选择执行但不调试<br><img src="/postImg/11-2-d.jpg"><br><img src="/postImg/11-2-e.jpg"><br><img src="/postImg/11-2-f.jpg"></p><p>完成！之后在写完程序后就可以点击这个绿色的三角按钮进行执行操作。</p><h2 id="影视音乐类"><a href="#影视音乐类" class="headerlink" title="影视音乐类"></a>影视音乐类</h2><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><p>网易去音乐可以说很好了，如果你喜欢英文歌，那你选它就是对的。</p><h3 id="FDM下载器"><a href="#FDM下载器" class="headerlink" title="FDM下载器"></a>FDM下载器</h3><p>FDM(Free Download Manager)是一款非常好用的轻量级下载器，相比于迅雷的免费版，这款下载器可以说是免费且没有广告，可以告别弹广告的恶心事情。<br>官网地址：<a href="https://www.freedownloadmanager.org/" target="_blank" rel="noopener">https://www.freedownloadmanager.org/</a><br>点击Free Download,安装时一直确认就行，记得自己换安装路径。<br>你只需要把下载的种子资源拖进去就可以实现下载，而且还不会像迅雷一样限速。<br><img src="/postImg/11-3-a.jpg"></p><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="Bandizip"><a href="#Bandizip" class="headerlink" title="Bandizip"></a>Bandizip</h3><p>Bandizip是一款解压软件，同样的我也是看中了它免费且无广告的优点。<br>官网地址：<a href="http://www.bandisoft.com/bandizip/" target="_blank" rel="noopener">http://www.bandisoft.com/bandizip/</a><br><img src="/postImg/11-3-b.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础</title>
      <link href="/2019/02/01/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/02/01/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="一、Linux网络配置基础"><a href="#一、Linux网络配置基础" class="headerlink" title="一、Linux网络配置基础"></a>一、Linux网络配置基础</h3><p><strong>TCP/IP是Internet网络的标准协议</strong>，也是全球使用最广泛、最重要的一种网络通信协议。目前无论是UNLX系统还是Windows系统都全面支持TCP/IP。<br>接入TCP/IP网络的计算机一般都需要进行网络配置，可能<strong>需要配置的参数包括主机名、IP地址、子网掩码、网关地址和DNS服务器地址</strong>等。</p><h4 id="一-TCP-IP参考模型"><a href="#一-TCP-IP参考模型" class="headerlink" title="(一)TCP/IP参考模型"></a>(一)TCP/IP参考模型</h4><p>TCP/IP参考模型包括网络接口层、网络层、传输层和应用层。</p><p><img src="/postImg/10-2.jpg"></p><h5 id="1-网络接口层"><a href="#1-网络接口层" class="headerlink" title="1.网络接口层"></a>1.网络接口层</h5><p><strong>TCP/IP参考模型最底层是网络接口层，塔包括那些能使TCP/IP与物理网络进行通信的协议</strong>。TCP/IP标准并没有定义具体的网络接口协议，而是<strong>旨在提供灵活性，以适应各种网络类型</strong>。网络<strong>类型通常有以太网、令牌环网、帧中继网和ATM网络</strong>。以太网是目前使用最广泛的局域网技术，<strong>属于基带总线局域网</strong>，核心技术采用<strong>CSMA/CD</strong>（Carrier Sense Multiple Access with Collision Detection）通信控制机制。<strong><code>CSMA/CD是一种算法，主要用于传输以及解码格式化的数据包，包括检测节点地址并监控传输错误</code></strong>。</p><h5 id="2-网络层"><a href="#2-网络层" class="headerlink" title="2.网络层"></a>2.网络层</h5><p>网络层所执行的功能是消息寻址以及把逻辑地址和名称转换成物理地址。<strong>通过判定从原计算机到目标计算机的路由，该层还控制子网的操作</strong>。在网络层中，含有4个重要协议：互联网协议（Internet Pretocol，IP）、互联网控制报文协议（Internet Control Message Protocol，ICMP）、地址转换协议（Address Resolution Protocol，ARP）和反向地址转换协议（Reverse Address Resolution Protocol，RARP）。</p><ul><li><strong><code>IP</code>：</strong>负责通过网络交换数据包，同时也负责主机间数据包的路由和主机寻址。</li><li><strong><code>ICMP</code>：</strong>传送各种信息，包括与包交付有关的错误报告。</li><li><strong><code>ARP</code>：</strong>通过目标设备的IP地址，查询目标设备的硬件MAC地址。</li><li><strong><code>RARP</code>：</strong>声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个地址。</li></ul><h5 id="3-传输层"><a href="#3-传输层" class="headerlink" title="3.传输层"></a>3.传输层</h5><p>在TCP/IP模型中，传输层的主要功能是提供从一个应用程序到另一个应用程序的通信，<strong>常称为端对端通信。</strong>现在的操作系统都支持多用户和多任务操作，一台计算机可以运行多个应用程序，因此<strong>所谓端对端的通信实际上是指从源进程发出数据到目标进程的通信过程</strong>。传输层包括2个主要协议：传输控制协议TCP和数据报协议UDP，分别支持两种数据传送方式。</p><ul><li><strong>传输控制协议<code>TCP</code>：</strong>面向对象链接的通信提供可靠的数据传送。用于大量数据的传输或主机之间的扩展对话，通常要求可靠的传送。</li><li><strong>用户数据报协议<code>UDP</code>:  </strong>在发送数据前不要求建立链接，目的是提供高效的离散数据报传送，但是不能保证传送被完成。</li></ul><h5 id="4-应用层"><a href="#4-应用层" class="headerlink" title="4.应用层"></a>4.应用层</h5><p>应用层位于TCP/IP模型的最高层。最常用的协议包括：文件传输协议FTP、远程登录Telnet、域名服务DNS、简单邮件传输SMTP和超文本传输协议HTTP等。</p><ul><li><strong><code>FTP</code>：</strong>用于实现主机之间的文件传输功能。</li><li><strong><code>HTTP</code>：</strong>用于实现互联网中的WWW服务。</li><li><strong><code>SMTP</code>：</strong>用于实现互联网中的电子邮件传送功能。</li><li><strong><code>DNS</code>：</strong>用于实现主机名与IP地址间的转换。</li><li><strong><code>SMB</code>：</strong>用于实现Windows主机与Linux主机间的文件共享。</li><li><strong><code>Telnet</code>：</strong>用于实现远程登陆功能。</li><li><strong><code>DHCP</code>：</strong>用于实现动态分配IP配置信息。</li></ul><h4 id="二-网络配置参数"><a href="#二-网络配置参数" class="headerlink" title="(二)网络配置参数"></a>(二)网络配置参数</h4><h5 id="1-主机名"><a href="#1-主机名" class="headerlink" title="1.主机名"></a>1.主机名</h5><p>主机名用于标识网络中的计算机，通常主机名在网络中是唯一的。<strong>如果某一主机在DNS服务器上进行过域名注册，那么其主机名和域名通常也是相同的</strong>。</p><h5 id="2-IP地址和子网掩码"><a href="#2-IP地址和子网掩码" class="headerlink" title="2.IP地址和子网掩码"></a>2.IP地址和子网掩码</h5><p>TCP/IP网络中一台计算机要与网络中的其他计算机进行通信，就必须至少拥有一个唯一的IP地址，否则在信息传送过程中无法识别信息的接收方和发送方。<strong>IP地址一定设置在主机的网卡上，网卡的IP地址等同于主机的IP地址</strong>。<br>IP地址采用“x.x.x.x”格式表示，每个x部分的取值范围在0~255.传统上将IP地址分为A、B、C、D、E五类。</p><p>IP地址分类：</p><p><img src="/postImg/10-3.jpg"></p><p>在所有的IP地址中，<strong>以“127”开头的IP地址不可用于指定主机的IP地址</strong>，它被称为回送地址，供计算机在各个网络进程之间进行通讯时使用。同一网络中每一台主机的IP地址必须不同，否则会造成IP地址的冲突。<br><strong>在配置IP地址的同时还必须配置子网掩码。为了保证网络的安全和减轻网络管理的负担，有时会把一个网络分成多个部分，而分出的部分就是子网</strong>，与之对应的子网掩码用来区分不同的子网，其表现形式与IP地址一样。在一般网络应用中，通常不进行子网划分，采取默认的子网掩码。</p><h5 id="3-网关地址"><a href="#3-网关地址" class="headerlink" title="3.网关地址"></a>3.网关地址</h5><p><strong>设置主机的IP地址和子网掩码后，该主机就可以使用IP地址与同一网段的其他主机进行通信了，但是不能与不同网段的主机进行通信。即使两个网段连接在一台交换机上</strong>，TCP/IP也会根据子网掩码判定主机处在不同的网络。<strong>要实现这两个网络之间的通信，<code>必须通过网关来实现</code>。</strong><br><strong><code>假设: 有网络A和网络B，网络A的IP地址范围为192.168.0.1~192.168.0.254,子网掩码为255.255.255.0。当网络A中的主机向网络B中的主机发送数据包时，网络A中的主机会把数据包转发给网络A的网关，在由该网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机。为了实现与不同网段的主机进行通信，必须设置网关地址，该网关地址一定是同网段主机的IP地址。</code></strong></p><h5 id="4-DNS服务器地址"><a href="#4-DNS服务器地址" class="headerlink" title="4.DNS服务器地址"></a>4.DNS服务器地址</h5><p>直接使用IP地址就可以访问网络中的主机，但是用<strong>数字表示的IP地址难以记忆，通常人们使用域名来访问网络中的主机</strong>。为了能够使用域名，需要为计算机指定至少一个DNS服务器，由这个DNS服务器来完成域名解析的工作。域名解析包括两个方面：<strong><code>正想解析</code></strong>和<strong><code>反向解析</code> </strong>。</p><h4 id="三-Linux网络服务器对应端口"><a href="#三-Linux网络服务器对应端口" class="headerlink" title="(三)Linux网络服务器对应端口"></a>(三)Linux网络服务器对应端口</h4><p>采用TCP/IP的服务可为客户机提供各种网络服务，如WWW服务，FTP服务。<strong>为区别不同类型的网络连接，TCP/IP利用端口号来进行区别。TCP/IP的端口范围为：0-65536，其中：0~255称为“知名端口”，该类端口保留给常用服务程序使用；256~1024是用于UNIX/Linux专用服务；</strong>1024以上的端口为动态端口，动态端口不是预先分配的，必要时才将它分配给进程。 </p><p>常用的网络服务和端口：</p><p><img src="/postImg/10-4.jpg"></p><h3 id="二、以太网的TCP-IP设置"><a href="#二、以太网的TCP-IP设置" class="headerlink" title="二、以太网的TCP/IP设置"></a>二、以太网的TCP/IP设置</h3><h4 id="一-Linux网络接口"><a href="#一-Linux网络接口" class="headerlink" title="(一)Linux网络接口"></a>(一)Linux网络接口</h4><h5 id="1-lo接口"><a href="#1-lo接口" class="headerlink" title="1.lo接口"></a>1.lo接口</h5><p>lo接口表示本地回送接口，用于网络测试以及本地主机各网络进程之间的通信。无论什么应用程序，只要使用回送地址（127.0.0.1）发送数据都不会进行任何真实的网络传输。Linux系统默认包含会送接口。</p><h5 id="2-eth-接口"><a href="#2-eth-接口" class="headerlink" title="2.eth*接口"></a>2.eth*接口</h5><p>eth接口表示网卡设备接口，并附加数字来反映物理网卡的序号。如第一块网卡称为eth0，第二块网卡称为eth1，并依次类推。</p><h5 id="3-ppp接口"><a href="#3-ppp接口" class="headerlink" title="3.ppp接口"></a>3.ppp接口</h5><p>Ppp接口表示ppp设备接口，并附加数字来反映ppp设备的序号。第一个ppp接口称为ppp0，第二个ppp接口称为ppp1，并依此类推。采用ISDN或ADSL等方式接入Internet时使用ppp接口。</p><h4 id="二-Linux网络相关配置文件"><a href="#二-Linux网络相关配置文件" class="headerlink" title="(二)Linux网络相关配置文件"></a>(二)Linux网络相关配置文件</h4><p><strong>/etc</strong>目录中包含一系列与<strong>网络配置</strong>相关的文件和目录。</p><h5 id="1-etc-sysconfig-network文件"><a href="#1-etc-sysconfig-network文件" class="headerlink" title="1./etc/sysconfig/network文件"></a>1./etc/sysconfig/network文件</h5><p>Network文件用来设置主机基本的网络信息。其内容如下：</p><pre class=" language-bash"><code class="language-bash">NETWORKING<span class="token operator">=</span>yes/no     //启动系统时是否启用网络服务HOSTNAME-abc.com     //设置主机名GATEWAY<span class="token operator">=</span>192.168.0.1    //设定默认网关GATEWAYDEV<span class="token operator">=</span>eth0      //设定网关接口FORWARD_IPV4<span class="token operator">=</span>yes/no    //是否启用IP转发功能</code></pre><h5 id="2-etc-hosts文件"><a href="#2-etc-hosts文件" class="headerlink" title="2./etc/hosts文件"></a>2./etc/hosts文件</h5><p><strong>Hosts文件可以保留主机域名与IP地址的对应关系</strong>。在计算机网络的发展初期，系统可以利用hosts文件查询域名所对应的IP地址。随着Internet的迅速发展，现在一般通过DNS服务器来查询域名所对应的IP地址。但是hosts文件让然被保留下来，用于经常访问的主机域名和IP地址，可以提高访问的速度。</p><h5 id="3-etc-sysconfig-network-scripts-ifcfg-eth0文件"><a href="#3-etc-sysconfig-network-scripts-ifcfg-eth0文件" class="headerlink" title="3./etc/sysconfig/network-scripts/ifcfg-eth0文件"></a>3./etc/sysconfig/network-scripts/ifcfg-eth0文件</h5><p>此文件用于配置以太网接口中第一块网卡的IP信息。其内容如下：</p><pre class=" language-bash"><code class="language-bash">ONBOOT<span class="token operator">=</span>yes                     //启动是是否激活网卡DEVICE<span class="token operator">=</span>eth0                      //设置接口名称BOOTPROTO<span class="token operator">=</span>none<span class="token operator">|</span>static<span class="token operator">|</span>dhcp<span class="token operator">|</span>bootp  //设定网卡启动协议IPADDR<span class="token operator">=</span>193.168.3.24                //设置主机IPNETMASK<span class="token operator">=</span>255.255.255.0             //设定子网掩码BROADCAST<span class="token operator">=</span>192.168.2.255        //设定广播码NETWORK<span class="token operator">=</span>192.168.3.0          //设置网络号GATEWAY<span class="token operator">=</span>192.168.3.1               //设定网关TYPE<span class="token operator">=</span>Ethernet                     //设定网络类型</code></pre><h5 id="4-etc-resolv-Conf文件"><a href="#4-etc-resolv-Conf文件" class="headerlink" title="4./etc/resolv.Conf文件"></a>4./etc/resolv.Conf文件</h5><p>此文件列出了客户机所使用的DNS服务器的相关信息。内容如下：</p><pre class=" language-bash"><code class="language-bash">domainname    linux.com         //设定主机所在的网络域名，可以不设置serch    linux.com               //设定DNS服务器的域名搜索列表nameserver    192.168.0.10        //设定DNS服务器的IP地址</code></pre><blockquote><p>注意：最多只能设置3个DNS服务器地址，并且每个DNS服务器的记录自成一行。当主机需要进行域名解析时，首先查询第一个DNS服务器，如果无法成功则像第二个DNS服务器查询。</p></blockquote><p><strong><code>案例分析1：在配置文件中配置本系统的主机信息、IP地址等信息，配置都可以让该系统正常登陆互联网。</code></strong></p><pre class=" language-bash"><code class="language-bash">1）设置主机信息/etc/sysconfig/network文件：NETWORKING<span class="token operator">=</span>yes/no    HOSTNAME-abc.com    GATEWAY<span class="token operator">=</span>192.168.0.1   GATEWAYDEV<span class="token operator">=</span>eth0     FORWARD_IPV4<span class="token operator">=</span>yes/no 2）用vi编辑器打开/etc/sysconfig/network-scripts/ifcfg-eth0，并设置:Vi /etc/sysconfig/network-scripts/ifcfg-eth0ONBOOT<span class="token operator">=</span>yes                      DEVICE<span class="token operator">=</span>eth0                     BOOTPROTO<span class="token operator">=</span>none<span class="token operator">|</span>static<span class="token operator">|</span>dhcp<span class="token operator">|</span>bootp  IPADDR<span class="token operator">=</span>193.168.1.24               NETMASK<span class="token operator">=</span>255.255.255.0              BROADCAST<span class="token operator">=</span>192.168.1.255          NETWORK<span class="token operator">=</span>192.168.1.0             GATEWAY<span class="token operator">=</span>192.168.1.1             TYPE<span class="token operator">=</span>Ethernet  3<span class="token punctuation">)</span>设置DNS信息：domainname    linux.com         serch    linux.com              nameserver    192.168.0.10 4<span class="token punctuation">)</span>修改完保存退出，重新启动网络配置即可etc/rc.d/init.d/network    restart或者servise   httpd    start/restart</code></pre><p><strong><code>案例分析2：设定主机存在eth0设备，它的IP地址是192.168.3.24，要求给eth0再绑定IP地址192.168.3.44</code></strong></p><pre class=" language-bash"><code class="language-bash">1）输入以下命令：<span class="token function">cd</span> /etc/sysconfig/network-scripts<span class="token function">cp</span> ifcfg-eth0   ifcfg-eth0:0     //取值从0开始2）输入以下命令：Vi  ifcfg-eth0:0修改后的内容如下：ONBOOT<span class="token operator">=</span>yes        //启动时是否激活网卡BOOTPROTO<span class="token operator">=</span>none    //设置网卡启动协议DEVICE<span class="token operator">=</span>eth0:0       //设置接口名称IPADDR<span class="token operator">=</span>192.168.3.44  //设定主机IP地址NETMASK<span class="token operator">=</span>255.25.255.0     //设定子网掩码NETWORK<span class="token operator">=</span>192.168.3.0      //设定网络号BROADCAST<span class="token operator">=</span>192.168.3.255  //设定广播码GATEWAY<span class="token operator">=</span>192.168.3.1      //设定网关3）输入以下内容：<span class="token function">vi</span> ifcfg-eth0修改后的内容：ONBOOT<span class="token operator">=</span>yes       BOOTPROTO<span class="token operator">=</span>none   DEVICE<span class="token operator">=</span>eth0 IPADDR<span class="token operator">=</span>192.168.3.24 NETMASK<span class="token operator">=</span>255.25.255.0NETWORK<span class="token operator">=</span>192.168.3.0 BROADCAST<span class="token operator">=</span>192.168.3.255 GATEWAY<span class="token operator">=</span>192.168.3.1</code></pre><h5 id="5-服务的启动方式"><a href="#5-服务的启动方式" class="headerlink" title="5.服务的启动方式"></a>5.服务的启动方式</h5><p><strong>1）服务的分类</strong><br>独立服务：每项服务只监听该服务指定的端口，服务的启动脚本存放在/etc/rc.d/init.d/<br>超级服务：超级服务有xinetd管理，服务的配置文件存放在/etc/xinetd.d/目录中。<br><strong>2）服务的启动、关闭与重启</strong><br>方法一：</p><pre class=" language-bash"><code class="language-bash">/etc/rc.d/init.d/脚本 <span class="token operator">&lt;</span>start<span class="token operator">|</span>restart<span class="token operator">|</span>stop<span class="token operator">></span>或/etc/init.d/脚本名  <span class="token operator">&lt;</span>start<span class="token operator">|</span>restart<span class="token operator">|</span>stop<span class="token operator">></span>其中/etc/rc.d/init.d/network用法为：/etc/rc.d/init.d/network <span class="token operator">&lt;</span>start<span class="token operator">|</span>stop<span class="token operator">|</span>restart<span class="token operator">|</span>reload<span class="token operator">|</span>status<span class="token operator">></span>例如：/etc/rc.d/init.d/network restart/etc/rc.d/init.d/network start设置网络参数：            <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>弹出环回接口：            <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>弹出界面rth0：             <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>又如：/etc/rc.d/init.d/network stop/etc/rc.d/init.d/network stop正在关闭接口eth0：        <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>关闭环回接口:              <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span></code></pre><p>方法二：</p><pre class=" language-bash&#39;"><code class="language-bash&#39;">service 服务名 <start|restart|stop>例如：Service  httpd  start|stopService  httpd  start启动httpd：              [  确定  ]Service  httpd  stop    停止httpd：              [  确定  ]</code></pre><p><strong><code>例子3：对本机内的一个网卡eth0再绑定一个IP地址</code></strong><br><strong>根据一块网卡绑定两个IP地址的方法，修改IP地址，保存退出vi编辑器，然后重新启动网络服务使更改生效</strong><br>/etv/rc.d/init.d/network  restart   或者  service   httpd  start|restart</p><h3 id="三、常用的网络配置命令"><a href="#三、常用的网络配置命令" class="headerlink" title="三、常用的网络配置命令"></a>三、常用的网络配置命令</h3><h5 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h5><p>功能：显示网络接口的配置信息、激活/禁用某个网络接口、配置网络接口IP地址。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ifconfig</span> 【接口名】 IP地址   netmask  子网掩码 <span class="token punctuation">[</span>up/down<span class="token punctuation">]</span></code></pre><p><strong>示例：</strong><br><code>ifconfig</code>  //查看当前网络接口配置情况<br><code>ifconfig eth0</code> //查看eth0网络接口配置情况<br><code>ifconfig eth0 down</code> //停用网卡eth0<br><code>ifconfig 192.168.0.10   netmask  255.255.255.0</code>//将网卡的IP地址设置为192.168.0.10，子网掩码设置为255.255.255.0</p><h5 id="ifup命令"><a href="#ifup命令" class="headerlink" title="ifup命令"></a>ifup命令</h5><p>功能：激活/启用网络接口</p><pre class=" language-bash"><code class="language-bash">ifup【设备名】</code></pre><h5 id="ifdown命令"><a href="#ifdown命令" class="headerlink" title="ifdown命令"></a>ifdown命令</h5><p>功能：禁用或停止网络接口</p><pre class=" language-bash"><code class="language-bash">ifdown【设备名】</code></pre><h5 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h5><p>功能：向目标主机发送ICMP数据包，检测IP连通性。</p><pre class=" language-bash"><code class="language-bash">ping【参数】 IP地址/主机名</code></pre><p><strong>参数：</strong></p><ul><li><code>-c  n</code>：指定得到n个应答后中断操作</li></ul><blockquote><p>示例：测试与地址192.168.0.1的主机联通情况<br>Ping 192.168.0.1<br>Ping -c 3 192.168.0.1   //应答3次后中断</p></blockquote><h5 id="traceroute命令"><a href="#traceroute命令" class="headerlink" title="traceroute命令"></a>traceroute命令</h5><p>功能：跟踪路由<br>示例：测试与<a href="http://www.sina.com的路由连通情况" target="_blank" rel="noopener">www.sina.com的路由连通情况</a></p><pre class=" language-bash"><code class="language-bash">tracerout  www.sina.com</code></pre><h5 id="hostname命令"><a href="#hostname命令" class="headerlink" title="hostname命令"></a>hostname命令</h5><p>功能：显示或修改主机名</p><pre class=" language-bash"><code class="language-bash"><span class="token function">hostname</span> 【主机名】</code></pre><blockquote><p>示例：<br>hostname    //显示主机名<br>Hostname  hhhh   //主机名更换为hhhh</p></blockquote><h5 id="route命令"><a href="#route命令" class="headerlink" title="route命令"></a>route命令</h5><p>功能：显示路由表、添加路由、删除路由和添加/删除默认网关。</p><pre class=" language-bash"><code class="language-bash">routeRoute add   -net     网络地址  netmask   子网掩码  dev  网卡设备名Route del    -net     网络地址  netmask   子网掩码  Route add   default   gw      网关IP地址    dev    网卡设备名Route del   default   gw      网关IP地址    dev    网卡设备名</code></pre><h2 id="FTP服务器"><a href="#FTP服务器" class="headerlink" title="FTP服务器"></a>FTP服务器</h2><p>FTP是互联网中一种应用非常广泛的服务，<strong>用户可以通过其服务获取需要的文档、资料、音频和视频等</strong>。从互联网出现的开始，它一直就是用户使用频率最高的应用服务器之一。</p><h3 id="FTP服务器简介"><a href="#FTP服务器简介" class="headerlink" title="FTP服务器简介"></a>FTP服务器简介</h3><p>虽然用户可以采用多种方式来发送文件，但是FTP凭借其简单高效的特性，仍然是跨平台直接传送文件的主要方式。<strong>FTP是FTP/IP的一种具体应用，其工作在OSI模型的第七层，TCP模型的第四层上，即应用层</strong>。FTP使用TCP传输而不是UDP传输，这样客户在和服务器建立连接之前就要经过一个广为熟知的“三次握手过程”，它的意义在于客户与服务器之间的连接是可靠的，而且是面向连接。<br><strong>FTP的主要作用：</strong></p><ul><li>从客户向服务器发送一个文件</li><li>从服务器向客户发送一个文件</li><li>从服务器向客户发送文件或目录列表</li></ul><p><strong>与大多数Internet服务器一样，FTP也采用客户机/服务器模式</strong>。用户利用FTP客户机程序连接到远程主机上的FTP服务器程序，然后向服务器程序发送命令，服务器程序执行用户所发出的命令，并将执行结果返回到客户机。<br><strong>在此过程中，FTP服务器与FTP客户机之间建立两个连接：<code>控制连接</code>和<code>数据连接</code>。</strong>控制连接用于传送FTP命令以及相应结果，而数据连接负责传送文件。<strong>通常FTP服务器的守候进程总是监听21端口，等待控制连接建立请求</strong>。控制连接建立后，FTP服务器通过一定的方式验证用户的身份，然后才会建立数据连接。<br><strong>目前Linux系统中常用的FTP服务器有两种：vsftpd、wu-ftpd。它们都是基于<code>GPL</code>协议开发的。</strong></p><h3 id="Vsftpd服务器"><a href="#Vsftpd服务器" class="headerlink" title="Vsftpd服务器"></a>Vsftpd服务器</h3><p>Vsftpd是一个基于GPL发布的类UNIX操作系统上运行的服务器，该服务器提供默认的FTP服务器。该服务器支持很多其他传统FTP服务器不支持的特性，具有以下特点：</p><ul><li>非常高的安全性</li><li>带宽限制功能</li><li>良好的扩展性</li><li>支持船舰虚拟用户</li><li>支持IPV6</li><li>支持虚拟IP</li><li>高速、稳定</li></ul><h4 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h4><p><strong>下载网址：<a href="http://www.vsftpd.org" target="_blank" rel="noopener">http://www.vsftpd.org</a></strong></p><h5 id="1-源代码安装"><a href="#1-源代码安装" class="headerlink" title="1.源代码安装"></a>1.源代码安装</h5><p>得到源代码并解压tar包后，进入新的目录并运行make：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> xavf vsftpd-2.0.5.tar.gz<span class="token function">cd</span> vsftpd-2.0.5<span class="token function">make</span></code></pre><p>在这之前<strong>应该查看用户nobody和目录/usr/share/empty是否存在</strong>，如果不存在的化就新建这个用户和目录。<strong>如果允许匿名访问，用ftp和目录var/ftp也需要建立</strong>：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> /var/ftp<span class="token function">useradd</span> -d /var/ftp <span class="token function">ftp</span></code></pre><p><strong>由于安全原因，目录/var/ftp不应该属于用户ftp，也不应该有写权限。如果用户已存在，用下面两个命令可以改变目录的所有者并去掉其他用户的写权限：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> root.root /var/ftp<span class="token function">chmod</span> og-w /var/ftp</code></pre><p>具备了所有条件后<strong>开始安装：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span></code></pre><h5 id="2-启动和关闭vsftpd"><a href="#2-启动和关闭vsftpd" class="headerlink" title="2.启动和关闭vsftpd"></a>2.启动和关闭vsftpd</h5><p><strong>启动vsftpd可采用3中方式：inetd、xinetd和Stand alone（独立）工作模式</strong>，由于目前使用的xinetd扩展了inetd，它比inetd更加高效和使用，下面介绍xinetd以及standalone两种启动方式。</p><p><strong>(1)xinetd方式启动</strong><br>使用该启动方式，在/etc/xinetd  d/vsftpd配置文件当中，<strong>应当将“listen=yes”设为“listen=yes”，并且将“tcp_wrapper=yes”设为“tcp_wrapper=no”，</strong>并且使用如下命令将vsftpd的文档目录复制到/etc/xinetd.d目录下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/doc/vsftpd-1.1.3/vsftpd.xinetd   /etc/xinetd.d/vsftpd<span class="token function">vi</span> /etc/xinetd.d/vsftpd<span class="token function">cat</span> /etc/xinetd.d/vsftpd</code></pre><p>现在就可以启动vsftpd了：</p><pre class=" language-bash"><code class="language-bash">     server vsftpd stop       //停止独立运行vsftpd     关闭vsftpd：   <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>     server xinetd restart    //重新启动xinetd守候进程     停止xinetd:    <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>     启动xinetd：   <span class="token punctuation">[</span>确定<span class="token punctuation">]</span></code></pre><blockquote><p>提示：如果想在系统启动时就运行该服务，那么要使用setup命令，在“system service”选项中，选中vsftpd守候进程即可。</p></blockquote><p><strong>(2) 独立工作模式启动</strong><br><strong>vsftpd也可以在独立的工作模式下工作</strong>，这样，使用vi编辑器需要再次打开/etc/vsftpd/vsftpd.conf文件做如下修改：“listen=yes”：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> vsftpd start</code></pre><p><strong>(3) 简单测试FTP服务器</strong><br>  <strong>登陆IP地址为192.168.0.10的FTP服务器，使用匿名用户名“anonyous”，输入密码，超级用户直接回车即可，就能实现成功登陆Bye退出FTP服务器。：</strong><br>ftp 192.168.0.10<br>anonymous<br>并且浏览了服务器上的文件夹。<strong>Vsftpd提供了很多特性和很高的安全性。一个显著的例子就是vsftpd是在chroot模式下工作的，chroot模式就是登陆的主目录，在使用过程中，用户被限制不能访问除那个目录之外的任何程序文件</strong>，这样就使得系统中潜在的攻击者和其他用户的目录空间被严格分割开来，从而就不能破坏提供的FTP服务器，即便出现攻击事件，也极大地缩小了受损的空间和程序文件的范围，从而提高安全性。</p><p><strong>(4) 关闭vsftpd服务器</strong></p><pre class=" language-bash"><code class="language-bash">     Service  vsftpd  stop</code></pre><p><strong>不自启动：使用setup命令，在“systernm service”的选项中，取消选中的vsftpd守候进程即可</strong>。</p><h5 id="3-FTP客户端的操作"><a href="#3-FTP客户端的操作" class="headerlink" title="3.FTP客户端的操作"></a>3.FTP客户端的操作</h5><p>FTP客户端使用如下命令来<strong>连接FTP服务器：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">ftp</span>  服务器IP地址/名称</code></pre><p>连接服务器成功后，使用下述命令格式来<strong>进行FTP操作：</strong></p><pre class=" language-bash"><code class="language-bash">ftp<span class="token operator">></span>ftp 子命令</code></pre><p><strong>常用的子命令有：</strong></p><ul><li><strong><code>？|help</code></strong>：//显示ftp内部命令的帮助信息</li><li><strong><code>！[命令]</code></strong>：//在本机中执行shell命令后回到ftp环境中。</li><li><strong><code>lcd[dir]</code></strong>：//将本地工作目录切到dir</li><li><strong><code>close</code></strong>：//中断与远程服务器的FTP对话。</li><li><strong><code>asc</code></strong>：//使用ascii类型传输方式</li><li><strong><code>bin</code></strong>：//使用二进制文件传输方式</li><li><strong><code>cd dir-name</code></strong>：//进入远程主机目录</li><li><strong><code>pwd</code></strong>：//显示远程主机的当前工作目录</li><li><strong><code>mkdir dir-name</code></strong>：//在远程主机中建立目录</li><li><strong><code>ls [dir-name/file-name]</code></strong>：//显示远程目录中的内容</li><li><strong><code>get 远程文件名 [本地文件名]</code></strong>：//下载远程主机的文件</li><li><strong><code>mget 文件名 文件名 ...（或者是目录名）</code></strong>：//下载远程主机上的多个文件。</li><li><strong><code>put 本地文件</code></strong>：//将本地文件传送到远程FTP服务器。</li><li><strong><code>mput 本地文件 本地文件...</code></strong>://将多个本地文件传送到远程的FTP服务器</li><li>r<strong><code>ename 旧文件名 新文件名</code></strong>：//更改远程主机文件名。</li><li><strong><code>deletde 文件名</code></strong>：//删除远程主机中的指定文件</li><li><strong><code>mdeletd 文件名</code></strong>：//删除远程FTP服务器中的多个文件</li><li><strong><code>rmdir dir-name</code></strong>：//删除远程FTP服务器中的指定目录</li><li><strong><code>quit/bye</code></strong>：//退出FTP会话</li></ul><h3 id="vsftpd服务器的配置"><a href="#vsftpd服务器的配置" class="headerlink" title="vsftpd服务器的配置"></a>vsftpd服务器的配置</h3><h5 id="1-安装的相关文件"><a href="#1-安装的相关文件" class="headerlink" title="1.安装的相关文件"></a>1.安装的相关文件</h5><p> 与 FTP服务相关的文件有如下几个：<br> /etc/vsftpd/vsftpd.conf ：//主配置文件<br> /etc/vsftpd.ftpusers   ：  //指定哪些用户不能访问FTP服务器<br> /etc/vsftpd.user_list   ：//文件中指定的用户是否可以访问FTP服务器由vsftpd.conf文件中的userlist_deny的取值来决定。（userlist_deny=yes时不能访问FTP服务器；userlist_deny=no时，仅仅允许/etc/vsftpd.user_list中指定的用户访问FTP服务器）</p><p> /etc/vsftpd.ftpusers  ： //设置不允许登陆的用户名单<br> /etc/vsftpd.user_list ：  //设置方法同于/etc/vsftpd.ftpusers，根据vsftpd.conf中userlist_deny的值决定这个文件的意义</p><h5 id="2-配置vsftpd-ftpusers文件"><a href="#2-配置vsftpd-ftpusers文件" class="headerlink" title="2.配置vsftpd.ftpusers文件"></a>2.配置vsftpd.ftpusers文件</h5><p>Vsftpd.ftpusers文件是用来确定哪些用户不能使用FTP服务器。用户可以根据实际情况<strong>添加或删除其中的某些用户</strong>，默认情况下该文件的内用:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span>  /etc/vsftpd.ftpusers </code></pre><h5 id="3-配置vsftpd-user-list文件"><a href="#3-配置vsftpd-user-list文件" class="headerlink" title="3.配置vsftpd.user_list文件"></a>3.配置vsftpd.user_list文件</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span>  /etc/vsftpd.user_list</code></pre><p>如果需要限制指定的本地用户不能访问FTP服务器，<strong>那么按照以下方法修改/etc/vsftpd/vsftpd.conf照顾配置文件中的相关信息：</strong></p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>yesUserlist_deny<span class="token operator">=</span>yesUserlist_flie<span class="token operator">=</span>/etc/vsftpd.ftpusers </code></pre><p>同样的，如果需要限制指定的本地用户可以访问，而其他的本地用户不可以访问，那么可以参照如下设置来<strong>修改主题配置文件：</strong></p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>yesUserlist_deny<span class="token operator">=</span>noUserlist_flie<span class="token operator">=</span>/etc/vsftpd.ftpusers </code></pre><h4 id="配置vsftpd-conf文件"><a href="#配置vsftpd-conf文件" class="headerlink" title="配置vsftpd.conf文件"></a>配置vsftpd.conf文件</h4><p><strong>配置文件路径为 /etc/vsftpd/vsftpd.conf。</strong>修改：</p><pre class=" language-bash"><code class="language-bash">Vi /etc/vsftpd/vsftpd.conf</code></pre><p>默认文件内容：</p><pre class=" language-bash"><code class="language-bash">Anonymous_enable<span class="token operator">=</span>YES     //允许匿名用户登录Local_enable<span class="token operator">=</span>YES         //允许本地用户登录write_enable<span class="token operator">=</span>YES         //允许本地用户上传Local_mask<span class="token operator">=</span>022           //设置本地用户的文件生成掩码为022，默认值为077dirmessage_enable<span class="token operator">=</span>YES    //设置切换到目录时显示.message隐含文件的内容xferlog_enable<span class="token operator">=</span>YES       //激活上传和下载日志connect_from_port_20<span class="token operator">=</span>YES //设置是否允许启用FTP数据端口20建立连接Pam_service_name<span class="token operator">=</span>vsftpd  //设置PAM认证服务的配置文件名称，该文件存放在/etc/pam.duserlist_enable<span class="token operator">=</span>YES      //允许vsftpd.user_list文件中的用户访问服务器userlist_deny<span class="token operator">=</span>YES        //拒绝vsftpd.user_list文件中的用户访问服务器listen<span class="token operator">=</span>YES               //设置工作模式是否使用独占启动方式Tcp_wrappers<span class="token operator">=</span>YES         //设置是否使用tcp_wrappers作为主机访问控制方式</code></pre><h5 id="1-匿名用户使用vsftpd服务器"><a href="#1-匿名用户使用vsftpd服务器" class="headerlink" title="1.匿名用户使用vsftpd服务器"></a>1.匿名用户使用vsftpd服务器</h5><p>根据vsft服务器的默认设置，匿名用户可以下载/var/ftp目录中的所有文件，但不能上传文件。在vsftp.conf文件的“write_enable=yes”设置语句存在的前提下，取消以下命令行前的’#‘可以增加匿名用户权限。</p><pre class=" language-bash"><code class="language-bash">Anon_upload_enable<span class="token operator">=</span>yes  //允许匿名用户上传文件Anon_mkdir_write_enable<span class="token operator">=</span>yes   //允许匿名用户创建文件</code></pre><blockquote><p>案例分析1：配置vsftpd服务器，要求只允许匿名用户登陆，本地用户不允许登陆。匿名用户可以在/var/ftp/pub目录中新建目录/上传和下载文件。<code>`</code>**<br>1）编辑vsftpd.conf文件<br>Anonymous_enable=YES<br>Local_enable=no<br>write_enable=YES<br>anon_upload_enable=YES<br>Anon_mkdir_write_enable=yes<br>connect_from_port_20=YES<br>listen=YES<br>tcp_wrappers=YES<br>2)修改/var/ftp/pub目录权限，允许属主、同组及其他用户写入文件<br>ca  /var/ftp<br>ls -l<br>chmod  777  pub<br>ls -l<br>3）重新启动vsftpd服务器<br>Services  vsftpd  restart</p></blockquote><h5 id="2-限制本地用户"><a href="#2-限制本地用户" class="headerlink" title="2.限制本地用户"></a>2.限制本地用户</h5><p>Vsftpd服务器提供多种方式来限制某些本地用户登陆服务器<br>1）直接编辑ftpusers文件，将禁止登陆的用户名写入ftpusers文件。<br>2）直接编辑user_list文件，将禁止登陆的用户名写入user_list文件，此时vsftpd.conf文件应该设置“userlist_enable=yes”和“userlist_deny=yes”语句，则user_list文件指定的用户不能访问FTP服务器。<br>3）直接编辑user_list文件，将允许登陆的用户名写入user_list文件，此时vsftpd.conf文件中设置“userlist_enable=yes”和“userlist_deny=no”语句，这只允许user_list文件中指定的用户访问FTP服务器。</p><blockquote><p>提示：如果某用户同时出现在user_list文件和ftpusers文件中，那么该用户将不允许登陆。这是因为vsftpd总是先执行user_list文件，在执行ftpusers文件。</p></blockquote><blockquote><p>案例分析2：配置vsftpd服务器，要求只允许xh本地登录。<br>1）编辑vsftpd.conf文件，修改配置文件选项如下：<br>Anonymous_enable=no<br>Local_enbale=yes<br>Write_enable=yes<br>Connect_from_port_20=yes<br>Userlist_enable=yes<br>Userlist_deny=no<br>Listen=yes<br>Tcp_wrappers=yes<br>2）编辑user_list文件，使其一定包含xh<br>User_list文件中保留用户列表，其是否生效取决于vsftpd.conf文件中的“userlist_enable”参数。当“userlist_deny=no”，表示只有在user_list文件中存在的用户才有权访问vsftpd服务器；如果“userlist_deny=yes”，表示user_list文件中的存在的用户无权访问vsftpd服务器，甚至连密码都不能输入。Vsftpd.conf文件中默认“userlist_deny=yes”:<br>Vi user_list<br>Xh<br>3)重新启动vsftpd服务。<br>Services vsftpd restart<br>4）连接FTP服务器，以xh用户的身份登陆，可以船舰目录和上传下载文件。</p></blockquote><h5 id="3-禁止切换到其他目录"><a href="#3-禁止切换到其他目录" class="headerlink" title="3.禁止切换到其他目录"></a>3.禁止切换到其他目录</h5><p>根据vsftpd服务器的默认设置，本地用户可以浏览其主目录之外的其他目录，并在权限许可的范围内允许上传和下载。这样的默认设置不太安全，<strong>通过设置chroot相关参数，可禁止用户切换到主目录以外的其他目录。</strong><br>1）<strong>设置所有的本地用户都不可切换到主目录之外的其他目录。只需向vsftpd.conf文件添加“chroot_local_user=yes”配置语句</strong><br>2）设置指定的本地用户都不可以切换到主目录之外的其他目录。<br>编辑vsftpd.conf文件，取消以下配置语句前的“#”符号，指定/etc/vsftpd/chroot_list文件中的用户不能切换到主目录之外的目录：</p><pre class=" language-bash"><code class="language-bash">chroot_list_enable<span class="token operator">=</span>yeschroot_list_file<span class="token operator">=</span>/etc/vsftpd/chroot_list</code></pre><p>并且检查vsftpd.conf文件中是否存在“chroot_local_user=yes”配置语句，如果存在那么就要将其修改为“chroot_local_user=no”或者在此配置语句前添加的“#”号。</p><blockquote><p>案例分析3:<br>1）允许匿名用户登陆和本地用户登录<br>2）禁止匿名用户上传<br>3）允许本地用户上传和下载<br>4）进行一定的设置，能以本地用户uscr来登陆到FTP服务器上，并能上传与下载文件，熟悉子命令的应用。<br>如果用户user不存在，则需要创建用户user并设置口令，命令如下：<br>Useradd user<br>Passwd user<br>编辑vsftpd.conf文件：<br>Vi  /etc/vsftpd/vsftpd.conf<br>使其一定包含以下语句：<br>Anonymous_enable=YES<br>Local_enable=YES<br>anon_upload_enable=no<br>anon_mkdir_write_enable=no<br>write_enable=YES<br>Local_mask=022<br>dirmessage_enable=YES<br>xferlog_enable=YES<br>connect_from_port_20=YES<br>Pam_service_name=vsftpd<br>userlist_enable=YES        //允许vsftpd.user_list文件中的用户访问服务器<br>userlist_deny=YES         //拒绝vsftpd.user_list文件中的用户访问服务器<br>listen=YES              //设置工作模式是否使用独占启动方式<br>Tcp_wrappers=YES        //设置是否使用tcp_wrappers作为主机访问控制方式<br>将用户user添加到user_list文件中：<br>Vi user_list<br>User<br>重新启动FTP服务器：<br>Service vsftpd restart<br>5）在windows操作系统中登陆，把linux下的文件下载在windows文件夹中，同时把windows文件夹中的文件上传到linux相应的目录中。ftp服务器地址为：169.254.138.246.</p></blockquote><h3 id="vsftpd高级配置"><a href="#vsftpd高级配置" class="headerlink" title="vsftpd高级配置"></a>vsftpd高级配置</h3><h5 id="1-启动ASCII传输方式"><a href="#1-启动ASCII传输方式" class="headerlink" title="1.启动ASCII传输方式"></a>1.启动ASCII传输方式</h5><p>在配置文件中使用以下语句：</p><pre class=" language-bash"><code class="language-bash">Ascii_upload_enble<span class="token operator">=</span>yesAscii_download_enble<span class="token operator">=</span>yes</code></pre><h4 id="2-设置连接服务器后的欢迎信息"><a href="#2-设置连接服务器后的欢迎信息" class="headerlink" title="2.设置连接服务器后的欢迎信息"></a>2.设置连接服务器后的欢迎信息</h4><pre class=" language-bash"><code class="language-bash">Ftpd_banner<span class="token operator">=</span>welcome to <span class="token function">ftp</span> <span class="token function">service</span>Banner_file<span class="token operator">=</span>/var/vsftpd_banner_file</code></pre><h4 id="3-配置基本的性能和安全选项"><a href="#3-配置基本的性能和安全选项" class="headerlink" title="3.配置基本的性能和安全选项"></a>3.配置基本的性能和安全选项</h4><pre class=" language-bash"><code class="language-bash">Idle_session-timeout<span class="token operator">=</span>60   //设置用户绘画的空闲中断时间Data_connection_timeout<span class="token operator">=</span>120   //设置空闲的数据连接的中断时间Accept_timeout<span class="token operator">=</span>60Connect_timeout<span class="token operator">=</span>60    //设置客户端空闲时自动中断和激活连接时间Max_clients<span class="token operator">=</span>200       //指明服务器总的客户并发连接数为200Max_per_ip<span class="token operator">=</span>3       //指明每个客户机的最大连接数为3local_max_rate50000（50kbytes/sec）Anon_max_rate<span class="token operator">=</span>30000     //设置本地用户和匿名用户的最大传输速率限制Pasv_min_port<span class="token operator">=</span>50000 Pasv_max_port<span class="token operator">=</span>60000     //设置客户端连接时的端口范围。默认0</code></pre><h5 id="4-设置本地用户能否chroot"><a href="#4-设置本地用户能否chroot" class="headerlink" title="4.设置本地用户能否chroot"></a>4.设置本地用户能否chroot</h5><p>设置用户登陆能否切换到个人目录以外的目录<br>1）设置所有的本地用户可以chroot:</p><pre class=" language-bash"><code class="language-bash">Chroot_local_user<span class="token operator">=</span>yes</code></pre><p>2)设置指定用户能够chroot:</p><pre class=" language-bash"><code class="language-bash">Chroot_local_user<span class="token operator">=</span>noChroot_list_enable<span class="token operator">=</span>yesChroot_list_file<span class="token operator">=</span>/etc/vsftpd.chroot_list   //只有/etc/vsftpd.chroot-list中的指定的用户才能执行</code></pre><h5 id="5-配置基于本地用户的访问控制"><a href="#5-配置基于本地用户的访问控制" class="headerlink" title="5.配置基于本地用户的访问控制"></a>5.配置基于本地用户的访问控制</h5><p>1）限制指定的本地用户不能访问，其他本地用户可以访问:</p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>noUserlist_deny<span class="token operator">=</span>yesUserlist_file<span class="token operator">=</span>/etc/vsftpd.user_list   //使文件/etc/vsftpd.user_list中指定的本地用户不能访问，而其他的本地用户可以访问。</code></pre><p>2）限制指定的本地用户可以访问，其他本地用户不能访问:</p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>yesUserlist_deny<span class="token operator">=</span>noUserlist_file<span class="token operator">=</span>/etc/vsftpd.user_list</code></pre><h5 id="6-配置基于主机的访问控制"><a href="#6-配置基于主机的访问控制" class="headerlink" title="6.配置基于主机的访问控制"></a>6.配置基于主机的访问控制</h5><p>设置hosts.allow文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/hosts.allowvsftpd：192.168.5.128：DENY</code></pre><p>vsftpd在独占启动方式下支持tcp_wrappers主机访问控制方式，tcp_wrappers的主要配置文件是/etc/hosts.allow（允许）和/etc/hosts.deny(不允许)，它们的格式都是：</p><pre class=" language-bash"><code class="language-bash">守候进程名：主机表：ALLOW / DENY或守候进程名：主机表</code></pre><p>如果只允许指定的主机访问服务器，可以使用下面的命令：</p><pre class=" language-bash"><code class="language-bash">Only_from<span class="token operator">&lt;</span>主机表<span class="token operator">></span></code></pre><p>列如：<br><code>only_from 192.168.6.0</code> //只允许该网段内的主机访问<br>如果要指定不能访问的主机，则可以使用命令：<br><code>No_access &lt;主机表&gt;</code></p><h5 id="7-配置访问时间限制"><a href="#7-配置访问时间限制" class="headerlink" title="7.配置访问时间限制"></a>7.配置访问时间限制</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /user/share/doc/vsftpd-1.1.3/vsftpd.xinetd   /etc/inetd.d/vsftpdVi  /etc/xinetd.d/vsftpd</code></pre><p>修改为“disable=no”<br>添加配置访问的时间限制（与vsftpd.conf中listen=no相对应）：<br><code>Access_time=hour:min-hour:min</code><br><strong>例如：</strong><br><code>Access_time=8:30-11:30    13:00-18:00</code>  //表示只在这个两个时间段才能访问的</p><h5 id="8-限制文件的传输速度"><a href="#8-限制文件的传输速度" class="headerlink" title="8.限制文件的传输速度"></a>8.限制文件的传输速度</h5><p>编辑vsftpd.conf文件可设置不同类型用户传输时的最大速度，单位为字节/秒<br><strong>(1) anon_max_rate参数</strong><br>向vsftpd.conf文件中添加“anon_max_rate=20000”配置语句，那么匿名用户所能使用的最大传输速度约为20KB/s<br><strong>(2) local_max_rate参数</strong><br>向vsftpd.conf文件中添加“local_max_rate=50000”配置语句，那么本地用户所能使用的最大传输速度约为50KB/s.</p><h2 id="Samba服务器"><a href="#Samba服务器" class="headerlink" title="Samba服务器"></a>Samba服务器</h2><p>当局域网中存在多种操作系统，Samba服务器可以实现不同类型计算机之间文件的打印和共享。</p><h3 id="一、Samba简介"><a href="#一、Samba简介" class="headerlink" title="一、Samba简介"></a>一、Samba简介</h3><p><strong>SMB（Server Message Block，服务信息块）协议是一个高层协议</strong>，它提供了再网络上的不同计算机之间共享文件、打印机和通信资料的手段。<br><strong>Samba是一组使Linux支持SMB协议的软件，基于GPL原则发行，源代码完全公开。</strong>Samba的核心是两个守候进程smbd和nmbd。</p><ul><li><strong>Smbd：</strong>负责建立对话、验证用户、提供文件和打印机共享服务</li><li><strong>Nmbd：</strong>负责实现网络浏览。</li></ul><p>为了将Linux作为客户机集成到Windows环境中，Samba提供了2个工具：nmblookup工具用于NetBIOS名称解析和测试，smbclient工具提供对SMB文件和打印服务的访问。</p><h4 id="一-Samba的工作原理"><a href="#一-Samba的工作原理" class="headerlink" title="(一)Samba的工作原理"></a>(一)Samba的工作原理</h4><p>Samba的工作原理是让Windows操作系统网上邻居的通信协议——NETBIOS（Network Basic Input/Output System）和SMB这两个协议在TCP/IP通信协议上运行，并且使用Windows上的NETBEUI协议让Linux可以在网上邻居中被看到。</p><h4 id="二-Samba服务器功能"><a href="#二-Samba服务器功能" class="headerlink" title="(二)Samba服务器功能"></a>(二)Samba服务器功能</h4><p>共享目录、目录权限、共享打印机、打印机权限</p><h3 id="二、Samba服务器的安装和配置"><a href="#二、Samba服务器的安装和配置" class="headerlink" title="二、Samba服务器的安装和配置"></a>二、Samba服务器的安装和配置</h3><h4 id="一-Samba服务器的安装"><a href="#一-Samba服务器的安装" class="headerlink" title="(一)Samba服务器的安装"></a>(一)Samba服务器的安装</h4><h5 id="1-验证samba是否已经安装"><a href="#1-验证samba是否已经安装" class="headerlink" title="1.验证samba是否已经安装"></a>1.验证samba是否已经安装</h5><pre class=" language-bash"><code class="language-bash">rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> samba</code></pre><p>如果出现以下信息则已安装：<br><code>Samba-common-2.2.7a-7.9.0</code><br><code>Samba-client-2.2.7a-7.9.0</code><br><code>Samba-2.2.7a-7.9.0</code></p><h5 id="2-安装samba"><a href="#2-安装samba" class="headerlink" title="2.安装samba"></a>2.安装samba</h5><p><strong>Samba</strong>有三个安装文件<strong>Samba-common-2.2.7a-7.9.0</strong>、<strong>Samba-client-2.2.7a-7.9.0</strong>、<strong>Samba-2.2.7a-7.9.0</strong>。自行网上下，然后进入这三个文件的目录输入指令：</p><pre class=" language-bash"><code class="language-bash">rpm -ivh Samba-common-2.2.7a-7.9.0       //安装samba的公用软件包rpm -ivh Samba-client-2.2.7a-7.9.0       //安装samba的客户端程序rpm -ivh Samba-2.2.7a-7.9.0              //安装samba的服务器程序</code></pre><p><strong>和samba服务相关的文件有：samba的核心配置文件/etc/samba/smb.conf、Samba的启动脚本/etc/rc.d/init.d/smb、存放Samba用户口令的文件/etc/samba/smdpasswd和添加samba用户的配置文件/usr/bin/smbadduser。</strong></p><h4 id="二-Samba服务器的配置"><a href="#二-Samba服务器的配置" class="headerlink" title="(二)Samba服务器的配置"></a>(二)Samba服务器的配置</h4><p><strong>安装后还需要进一步的配置samba服务器，正确设置防火墙。</strong>默认情况下防火墙不允许windows客户端访问samba服务器，必须打开相应的服务。</p><h5 id="1-smb-conf文件"><a href="#1-smb-conf文件" class="headerlink" title="1.smb.conf文件"></a>1.smb.conf文件</h5><p>Samba服务器全部配置信息均保存在/etc/samba/smb.conf文件中。文件采用分节的结构，一般由三个标准节和若干个用户自定义的共享节组成。利用文本编辑器可以编辑和查看smb.conf文件。<br><strong>1）基本全局参数</strong></p><pre class=" language-bash"><code class="language-bash">Netbios name<span class="token operator">=</span>？        //设置samba的netBIOS的名字Workgroup<span class="token operator">=</span>？          //设置samba要加入的工作组Host allow<span class="token operator">=</span>？<span class="token operator">&lt;</span>192.168.5.   /192.168.5.164<span class="token operator">></span>Host deny<span class="token operator">=</span>？<span class="token operator">&lt;</span>192.168.5.   /192.168.5.164<span class="token operator">></span>   //允许/禁止访问的子网或主机Dead time<span class="token operator">=</span>？            //指定在客户机误操作多少分钟后服务器自动中断连接Max <span class="token function">open</span> files<span class="token operator">=</span>？          //定义一客户机最多能打开的文件数目</code></pre><p><strong>2）共享资源参数</strong></p><pre class=" language-bash"><code class="language-bash">Comment<span class="token operator">=</span>？        //指定对共享文件的描述Path<span class="token operator">=</span>？             //指定共享服务器的路径</code></pre><p><strong>3）访问控制参数</strong></p><pre class=" language-bash"><code class="language-bash">Writable<span class="token operator">=</span>yes          //指定共享的路径是否可写Browsable<span class="token operator">=</span>yes         //指定共享的路径是否可浏览Available<span class="token operator">=</span>yes           //指定共享资源是否可用Read only<span class="token operator">=</span>yes          //指定共享的路径是否为只读Read list<span class="token operator">=</span>yes，@group   //指定只读访问用户列表Write list<span class="token operator">=</span>user，@group  //设置读写访问用户列表Valid users<span class="token operator">=</span>user，@group //制定允许使用服务的用户列表Invalid users<span class="token operator">=</span>user，@group //指定不吞徐使用服务的用户列表Public<span class="token operator">=</span>yes/no              //设置共享资源是否允许所有用户访问，除guest用户以外Guest ok<span class="token operator">=</span>yes/no          //设置是否允许guest用户访问共享资源Guest only<span class="token operator">=</span>yes/no        //设置共享目录只允许guest用户访问</code></pre><p>Smb.conf文件的默认设定值如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>Workgroup<span class="token operator">=</span>mygroupServerstring<span class="token operator">==</span>samba serverSecurity<span class="token operator">=</span>userLoad printers<span class="token operator">=</span>yesLog file<span class="token operator">=</span>/var/log/samba/m.log<span class="token punctuation">[</span>homes<span class="token punctuation">]</span>Comment<span class="token operator">=</span>home directoryBrowserable<span class="token operator">=</span>noWritable<span class="token operator">=</span>yes<span class="token punctuation">[</span>printers<span class="token punctuation">]</span>Comment<span class="token operator">=</span>All printersPath<span class="token operator">=</span>/var/spool/sambaBrowserable<span class="token operator">=</span>noGuest ok<span class="token operator">=</span>no</code></pre><p><strong>4)Samba的安全等级参数</strong><br>Security=？<br>其中可选择的等级参数如下：</p><ul><li><strong>Share（共享级访问）：</strong>当客户端连接到samba服务器后，不需要输入samba用户名和口令就可以访问samba中共享的资源，这种方式方便但不安全。</li><li><strong>User（用户级）：</strong>这是samba服务器默认的安全级别。Samba服务器负责检查samba用户名和口令，验证成功后才能访问相应的共享目录。</li><li><strong>Domain（域）：</strong>samba服务器本身不验证samba用户和口令，而由windows域控制服务器负责。此时必须指定域控制服务器的netbios名称。</li><li><strong>Server（服务器）：</strong>samba服务器不验证samba用户名和口令，而将输入的用户名和口令传给另一个samba服务器来验证。此时必须指定负责验证的那个samba服务器的名称。</li></ul><h5 id="2-启动samba服务"><a href="#2-启动samba服务" class="headerlink" title="2.启动samba服务"></a>2.启动samba服务</h5><p>1）检查配置文件正确性</p><pre class=" language-bash"><code class="language-bash">Testparm</code></pre><p>2）启动服务</p><pre class=" language-bash"><code class="language-bash">Server smb start/restart</code></pre><blockquote><p><strong>案例分析1：架设共享级别的samba服务器，对所有windows计算机用户均可读/share目录，当前工作组为workgroup。</strong><br>配置步骤如下：<br>1）修改Linux配置文件。利用文本编辑工具对/etc/samba/smb.conf进行编辑。<br>vi /etc/samba/smb.conf<br>[global]<br>Workgroup=workgroup          //设置工作组<br>Security=share                 //设置安全级别为共享<br>[share]<br>Path=/tmp/share               //共享/share下的文件<br>Public=yes                    //设置目录允许所有人公用<br>Writable                        //目录可写入<br>Guest ok=ok                   //guest用户可以访问<br>2）利用testparm命令测试配置的正确性<br>Testparm         //测试配置文件的正确性<br>Testparm命令执行后如果显示“Loaded services file OK”信息，那摩说明samba服务器的配置文件完全正确，否则将提出错误信息，此时如果按【Enter】键将显示详细的配置内容如下：<br>[global]<br>Workgroup=workgroup<br>Security=share<br>[share]<br>Path=/tmp/share<br>Public=yes<br>Writable<br>Guest ok=ok<br>提示：testparm命令显示的配置内容跟smb.conf文件不一定完全相同，但功能一定相同<br>3）重新启动服务器<br>service smb restart<br>启动SMB服务              [确定]<br>启动NMB服务              [确定]<br>此时所有用户不需要口令，都可以访问/tmp目录，并具有读写权限。</p></blockquote><blockquote><p><strong>案例分析2：架设用户级别的samba服务器，其中tom用户可以访问其个人目录文件，当前工作组为workgroup。</strong><br>1）把tom用户设置为samba用户，并输入口令。<br>smbpasswd -a tom<br>2）利用文本编辑器修改smb.conf文件<br>vi /etc/samba/smb.conf<br>[global]<br>Workgroup=workgroup          //设置工作组<br>Security=share                 //设置安全级别为共享<br>[homes]<br>Browseable=no<br>Writable=yes             //目录可写入<br>3）利用testparm命令测试文件配置的正确性<br>testparm       //测试配置文件的正确性<br>Testparm命令执行后如果显示“Loaded services file OK”信息，那摩说明samba服务器的配置文件完全正确，否则将提出错误信息，此时如果按【Enter】键将显示详细的配置内容如下：<br>[global]<br>Workgroup=workgroup<br>Security=share<br>[homes]<br>Browseable=no<br>Writable=yes<br>4）重新启动服务器<br>service smb restart<br>关闭SMB服务      [确定]<br>关闭NMB服务      [确定]<br>启动SMB服务      [确定]<br>启动NMB服务      [确定]</p></blockquote><blockquote><p><strong>案例分析3：架设用户级别的samba服务器，其中jack和helen用户可以访问其个人主目录和/var/samba/tmp目录，而其他的普通用户只能访问其个人主目录。</strong><br>1）假设工作组为workgroup。利用smbpasswd命令将Linux系统中所有普通用户都设置为samba用户。<br>2）利用文本编辑器修改smb.conf文件<br>vi /etc/samba/smb.conf<br>[global]<br>Workgroup=workgroup     //设置工作组<br>Security=user             //设置安全级别为共享<br>[homes]<br>Comment=Home directory<br>Browseable=no<br>Writable=yes             //目录可写入<br>[tmp]<br>Path=/var/samba/tmp    //共享/tmp下的文件<br>Writable=yes<br>Valid users=Helen Jack<br>3）利用testparm命令测试配置文件是否正确<br>testparm<br>5)重新启动samba服务器</p></blockquote><h4 id="三-与samba服务器相关的shell指令"><a href="#三-与samba服务器相关的shell指令" class="headerlink" title="(三)与samba服务器相关的shell指令"></a>(三)与samba服务器相关的shell指令</h4><p>除了之前介绍的testparm命令和smbpasswd命令之外，还包括smbclient、smbstatus命令等。</p><h5 id="1-smbclient命令"><a href="#1-smbclient命令" class="headerlink" title="1.smbclient命令"></a>1.smbclient命令</h5><p>功能：查看或访问samba共享文件</p><pre class=" language-bash"><code class="language-bash">smbclient 【-L  IP地址】【共享资源路径】【-U  用户名】</code></pre><p><strong>示例：</strong><br>某samba服务器的IP地址为202.127.250.51，查看其提供的共享资源。<br><code>smbclient -L 202.127.250.51</code></p><p><strong>示例：</strong><br>访问IP地址为192.168.0.10的计算机提供的共享目录/docs<br><code>smbclient  //192.168.0.10/docs</code><br><code>Password：</code><br><code>Domain=[WORKGROUP]OS=[Unix]  server=[Samba2.2.7a]</code><br><code>Smb: \&gt;</code><br>执行命令“ smbclient  //192.168.0.10/docs”后，需要输入口令，验证成功后会进入smbclient环境，出现“Smb： >”提示符等待输入命令。输入“？”将显示所有可使用的命令。在samba交互界面下的操作命令有：</p><ul><li><strong><code>！</code>：</strong>执行本地路径</li><li><strong><code>ls</code>：</strong>显示文件列表</li><li><strong><code>get</code>：</strong>下载单个文件</li><li><strong><code>put</code>：</strong>上传单个文件</li><li><strong><code>mget</code>：</strong>批量下载文件（支持通配符）</li><li><strong><code>mput</code>：</strong>批量上传文件（支持通配符）</li><li><strong><code>mkdir</code>：</strong>建立目录</li><li><strong><code>rmdir</code>：</strong>删除目录</li><li><strong><code>rm</code>：</strong>删除文件</li></ul><h5 id="2-smbstatus命令"><a href="#2-smbstatus命令" class="headerlink" title="2.smbstatus命令"></a>2.smbstatus命令</h5><p>功能：查看samba共享资源的使用情况</p><pre class=" language-bash"><code class="language-bash">smbstatus</code></pre><h5 id="3-建立Samba用户"><a href="#3-建立Samba用户" class="headerlink" title="3.建立Samba用户"></a>3.建立Samba用户</h5><p>当samba服务器的安全级别为用户时，用户访问samba服务器时必须提供其samba用户名和口令。只有Linux系统本身的用户才能成为samba用户，必须要设置其samba口令。Samba用户账号信息默认保存与/etc/samba/smbpassed文件中。<br><strong>1）smbadduser命令</strong><br>功能：将Linux用户设置为samba用户</p><pre class=" language-bash"><code class="language-bash">smbadduser 用户名：用户名</code></pre><p><strong>示例：</strong><br><code>Useradd u1</code> //建立系统用户<br><code>Passwd u1</code>//设置密码<br><code>Smbadduser u1：u1</code> //建立samba用户</p><p><strong>2）smbpasswd命令</strong><br>功能：将Linux用户设置为samba用户</p><pre class=" language-bash"><code class="language-bash">smbpasswd【选项】【用户名】</code></pre><p><strong>选项：</strong></p><ul><li><strong><code>-a &lt;用户名&gt;</code>：</strong> 增加samba用户</li><li><strong><code>-d &lt;用户名&gt;</code>：</strong> 暂时锁定指定的samba用户</li><li><strong><code>-e &lt;用户名&gt;</code>：</strong> 解锁指定的samba用户</li><li><strong><code>-n &lt;用户名&gt;</code>：</strong> 设置指定的samba用户无密码</li><li><strong><code>-x &lt;用户名&gt;</code>：</strong> 删除samba用户</li></ul><p><strong>示例：</strong><br>将名字jerry的Linux用户设置为samba用户<br><code>smbpasswd  -a  jerry</code></p><p>超级用户在shell命令提示符后输入“smbpasswd -a 用户名”格式的命令后，必须根据屏幕提示两次输入指定samba用户的口令。系统将指定samba用户的找好信息保存于/etc/samba/smbpasswd文件中。Smbpasswd文件默认不存在。<br><strong>示例：</strong><br>修改samba用户jerry的口令：<br><code>smbpasswd jerry</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件包和进程及外存管理</title>
      <link href="/2019/01/31/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%A4%96%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2019/01/31/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%A4%96%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="tar包管理"><a href="#tar包管理" class="headerlink" title="tar包管理"></a>tar包管理</h2><h3 id="创建tar文件"><a href="#创建tar文件" class="headerlink" title="创建tar文件"></a>创建tar文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> 【主选项+辅助选项】 文件或目录</code></pre><p><strong>主选项：</strong></p><ul><li><code>-c</code>：创建一个新的tar文件</li><li><code>-r</code>：在tar文件尾部追加文件</li><li><code>-t</code>：显示tar文件内容</li><li><code>-u</code>：更新tar文件</li><li><code>-x</code>：从tar文件中取出文件</li><li><code>-delete</code>：从tar文件中删除文件</li><li><code>-d</code>：比较tar文件或文件系统的不同之处</li></ul><p><strong>辅助选项：</strong></p><ul><li><code>-f</code>：使用tar文件</li><li><code>-v</code>：显示处理文件的详细信息</li><li><code>-X</code>：排除文件集合</li><li><code>-z</code>：用gzip压缩或解压</li><li><code>-C</code>：改变目录</li></ul><p><strong>例：</strong></p><p>1)将./ccc/目录下所有文件打包成cccall.tar文件</p><p><code>tar -cvf cccall.tar ./ccc/*</code></p><p>2)把文件file1和file2打包成txt.tar文件</p><p><code>tar  -cvf   txt.tar   file1  file2</code></p><p>3)显示tar文件内容</p><p><code>tar  -tf  aaa.tar</code></p><p>4)从tar文件中取出文件</p><p><code>tar  -xvf  aaa.tar</code></p><p>5)向aaa.tar尾部追加文件myfile</p><p><code>tar -rf  aaa.tar  myfile</code></p><h3 id="Linux下常用的压缩工具"><a href="#Linux下常用的压缩工具" class="headerlink" title="Linux下常用的压缩工具"></a>Linux下常用的压缩工具</h3><h4 id="gzip压缩工具"><a href="#gzip压缩工具" class="headerlink" title="gzip压缩工具"></a>gzip压缩工具</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">gzip</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 压缩或文件</code></pre><p><strong>选项：</strong></p><ul><li><code>-c</code>：将输出写到标准输出上，并保留原有文件</li><li><code>-d</code>：将压缩文件解压</li><li><code>-r</code>：递归的查找指定目录并压缩其中的所有文件或者是解压</li><li><code>-v</code>：对每一个压缩和解压缩的文件，显示文件名和压缩比</li><li><code>-9或best</code>：表示最慢压缩方法，系统默认值为6</li><li><code>-t</code>：测试，检查压缩文件是否完整</li><li><code>-l</code>：对每个压缩文件显示压缩文件的大小、未压缩文件的大小，压缩比和未压缩文件的名字</li></ul><p><strong>例：*</strong>压缩当前目录下的所有文件，并且显示压缩不比，显示已经代替原来的文件**<br><code>gzip -v</code></p><p><strong>提示：gzip只能对单个文件进行压缩，压缩后替换原来的文件，但不能呢个对多个文件进行压缩，正因如此，Linux提供了tar命令，用于将若干个文件或文件夹打包成一个文件，然后再压缩成一个.gz文件</strong></p><h4 id="gzip解压文件"><a href="#gzip解压文件" class="headerlink" title="gzip解压文件"></a>gzip解压文件</h4><p>使用<code>gzip-dv*</code>对当前目录下的压缩文件进行解压</p><p><strong>例：</strong><br>对当前文件下进行解压<br><code>gzip-dv *</code></p><p>在tar命令中嵌入压缩命令<br><code>.tar.gz</code></p><p>将当前目录下所有文件打包并压缩成ping.tar.gz并显示出来进度<br><code>tar cvzf   ping.tar.gz  ./*</code></p><p>把打包文件解压之当前目录下<br><code>tar -zxvf  file.tar.gz</code></p><p>把打包压缩文件解压之/text中<br><code>tar -zxvf  file.tar.gz  -C  test</code></p><h4 id="zip-unzip命令"><a href="#zip-unzip命令" class="headerlink" title="zip/unzip命令"></a>zip/unzip命令</h4><p><strong>zip命令</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">zip</span> 【选项】压缩后文件名  代压缩文件名或文件夹</code></pre><p><strong>选项：</strong></p><ul><li><code>-l</code>：最快压缩，压缩率最差</li><li><code>-9</code>：最大压缩，压缩率最高</li><li><code>-d</code>：从zip文件中移除一个文件</li><li><code>-f</code>：以新文件取代现有文件</li><li><code>-F</code>：修复已经损坏的压缩文件</li><li><code>-g</code>：将文件压缩并附加到特定文件</li><li><code>h</code>：显示附注说明</li><li><code>-i</code>：指定要加入的某些特定文件</li><li><code>L</code>：显示zip命令的版权</li><li><code>-m</code>：将特定文件移入zip文件中，并且删除原文件</li><li><code>-n</code>：不压缩特定扩展名文件</li><li><code>-o</code>：将zip文件的时间设成最后修正zip文件的时间</li><li><code>-r</code>：包含子目录</li><li><code>-T</code>：测试zip文件是否正常</li><li><code>-u</code>：只更新改变过的文件、文件夹和新文件</li><li><code>-v</code>：显示版本信息和详细资料</li><li><code>-x</code>：不需要压缩的文件</li></ul><p>提示：使用zip命令可以将许多文件压缩成一个文件，这与gzip是有区别的</p><p><strong>例子：</strong><br>1）压缩文件或文件夹<br><code>zip  -r  gong.zip   ./*</code><br>//递归压缩当前目录和子目录下的所有文件和文件夹为gnog.zip，显示压缩过程中每个文件的压缩比  </p><p>2）显示压缩文件的内容信息<br><code>zip -v gnog.zip      //查看gong.zip文件内容</code></p><p>3）从压缩文件中删除某个文件<br><code>zip -d gong.zip smart.txt</code><br>//删除gong.zip压缩文件中smart.txt文件</p><p>4）向压缩文件中添加文件<br><code>zip -m  gong.zip  ./rpm_info.txt</code><br>//向压缩文件中添加一个txt文件</p><p><strong>unzip命令</strong><br>用于解压缩扩展名为zip的压缩文件。Windows下的winzip压缩的文件Linux下也可以用unzip解压</p><pre class=" language-bash"><code class="language-bash">unzip 【选项】  压缩文件名.zip</code></pre><p>选项：</p><ul><li><code>-x</code>： 文件列表：解压缩文件但不包括指定的文件</li><li><code>-v</code>： 查看压缩文件目录，但不解压缩</li><li><code>-t</code>：册设文家有无损坏，但不解压</li><li><code>-d</code>： 目录：把压缩文件解压到指定的目录</li><li><code>-z</code>：只显示压缩文件的注释</li><li><code>-n</code>：不覆盖已经存在的文件</li><li><code>-o</code>：覆盖已经存在的文件且不要求用户确认</li><li><code>-j</code>：不重建文档的目录结构，把所有文件解压到同一目录下</li></ul><p><strong>(1)将压缩文件解压到当前目录</strong></p><pre class=" language-bash"><code class="language-bash">unzip gong.zip</code></pre><p><strong>(2)将压缩文件解压到指定目录</strong></p><pre class=" language-bash"><code class="language-bash">unzip gong.zip  -d/tmp</code></pre><h3 id="bzip2命令"><a href="#bzip2命令" class="headerlink" title="bzip2命令"></a>bzip2命令</h3><p><strong>bzip2是一个无损压缩软件，具有高质量的数据压缩能力，可以压缩到原来文件的10%-15%。</strong><br>参数：</p><ul><li><code>-c</code>：将数据压缩或解压至标准输出</li><li><code>-d</code>：强制解压缩</li><li><code>z</code>：和d选项类似。</li><li><code>-t</code>：检查指定文件的完整性，但并不对其解压缩。</li><li><code>-f</code>：强制覆盖输出文件，通常bzip2不会覆盖已经存在的文件</li><li><code>-k</code>：在压缩或解压缩时保留输出文件</li><li><code>-s</code>：在压缩/解压缩以及检查时减少内存用量。采用一种修正的算法进行压缩和测试，每个数据块仅需2.5个字节</li><li><code>v</code>：显示每个被处理文件的压缩率。</li></ul><p><strong>用bzip解压文件</strong></p><pre class=" language-bash"><code class="language-bash">bzip *    //用bzip命令压缩当前目录下的所有文件夹</code></pre><p><strong>用bunzip2解压文件</strong></p><pre class=" language-bash"><code class="language-bash">bunzip  *</code></pre><p>提示：如果解压缩过程中有文件不是bz2后缀，则对该文件解压缩时会报错</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>Linux是一个<strong>多用户、多任务操作系统</strong>。在这样的的系统中，各种计算机资源的分配和管理都以<strong>进程为单位</strong>，为了协调多个进程对这种共享资源的访问，操作系统要跟踪多种进程的活动，以及他们对系统资源的使用情况，从而实施对进程和资源的动态管理。</p><h3 id="一、进程和作业的基本概念"><a href="#一、进程和作业的基本概念" class="headerlink" title="一、进程和作业的基本概念"></a>一、进程和作业的基本概念</h3><h4 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h4><p><strong>进程是指一个具有独立的程序的一次运行过程</strong>。也是系统进行资源分配和调度的基本单位，及每个程序模块和它执行时所处理的数据组成了进程。</p><h4 id="2-作业"><a href="#2-作业" class="headerlink" title="2.作业"></a>2.作业</h4><p><strong>正在执行的一个或多个相关进程可以形成一个作业</strong>。使用管道命令和重定向命令，一个作业可以启动多个进程<br>    根据作业的运行方式的不同，可将作业分为两大类。<br>    <strong><code>前台作业：</code></strong>运行与前台，用户可对其进行交互操作。<br>   <strong><code>后台作业：</code></strong>运行与后台，不接受终端的输入，单向终端输出执行结果。<br>作业既可以运行在前台也可以在后台，但同一时刻，每个用户只能有一个前台作业</p><h4 id="3-进程的基本状态以及转换"><a href="#3-进程的基本状态以及转换" class="headerlink" title="3.进程的基本状态以及转换"></a>3.进程的基本状态以及转换</h4><p><strong>进程的基本状态</strong><br>通常在操作系统中，进程至少要有三种基本状态，分别为：运行态、就绪态和阻塞态。<br>Linux系统中进程一般有以下几种：<br>运行态：（Running）、就绪态（Ready）、阻塞态（Blocked）、睡眠态（Sleeping）、停止态（Task_Interruptible）、僵死态（Task_Zomie）</p><p><strong>进程间的转换</strong></p><p><img src="/postImg/9-2.jpg"></p><p><strong>进程的类别</strong><br><strong><code>交互进程：</code></strong>由一个shell启动的进程，每个进程都有其自己的特点和属性<br><strong><code>批处理进程：</code></strong>不需要与终端相关，提交在等待队列的作业。<br><strong><code>守候进程：</code></strong>Linux系统启动时自动启动，并在后台运行，用于监视特定服务</p><p><strong>Linux守候进程介绍</strong><br>守候进程是在后台运行而没有终端或登陆shell与之结合在一起的进程。<strong>守候进程在程序启动时开始运行，程序结束时停止。这些进程没有控制终端，所有称为在后台运行。</strong>Linux系统有许多标准的守候进程，其中一些周期性的运行来完成特定的任务，其余的连续运行，等待处理系统中发生的某些特定的事件。</p><p><strong>启动守候进程有如下几种方法</strong><br><strong><code>在引导系统时启动：</code></strong>此情况下的守候进程通常在系统启动script的执行期间被启动，这些script一般存放在/etc /rc.d中<br><strong><code>手动从shell提示符启动00000：</code></strong>任何具有相应的执行权限的用户都可以使用这种方法启动守候进程<br><strong><code>使用crond守候进程启动：</code></strong>这个说后进程查询放在/var/spool/cron/crontabs目录中的一组文件，这些文件规定了需要周期性执行的任务。<br><strong><code>执行at命令启动：</code></strong>在规定的一个日期执行一个程序。</p><p><strong>重要的守候进程介绍</strong></p><ul><li><code>amd</code>：自动安装NFS（网络文件系统）</li><li><code>apmd</code>：高级电源管理</li><li><code>httpd</code>：web服务器</li><li><code>xinetd</code>：支持多种网络服务的核心守候程序</li><li><code>crond</code>：Linux下的计划任务</li><li><code>dhcpd</code>：启动一个DHCP（动态IP地址分配）服务器</li><li><code>gated</code> ：网管路由守候进程，使用动态的OSPF路由选择协议</li><li><code>lpd</code>：打印服务</li><li><code>named</code>：DNS服务</li><li><code>netfs</code>：安装NFS、Samba、NetWare网络文件系统</li><li><code>network</code>：激活已配置网络接口的脚本程序</li><li><code>nfsd</code>：NFS服务器</li><li><code>sendmail</code>：邮件服务器sendmail</li><li><code>smb</code>：Samba文件共享/打印服务</li><li><code>snmpd</code>：本地简单网络管理守候进程</li><li><code>Syslog</code>：一个让系统引导时启动syslog和klogd系统日志守候进程的脚本</li></ul><h3 id="二、进程和作业管理"><a href="#二、进程和作业管理" class="headerlink" title="二、进程和作业管理"></a>二、进程和作业管理</h3><h4 id="手工启动"><a href="#手工启动" class="headerlink" title="手工启动"></a>手工启动</h4><p>手工启动是指由用户输入shell命令后直接启动进程<br><strong>前台：一般直接输入程序名（#vi）就可以启动一个前台程序</strong><br><strong>后台：在vi后面加 &amp; </strong><br>提示：以上两种进程都是由shell进程产生的，也就是说shell创建了新进程，这种称父子关系，shell是父进程，一个父进程可以有多个子进程。</p><p><strong>shell命令</strong></p><h4 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h4><p>功能：静态显示系统进程信息</p><pre class=" language-bash"><code class="language-bash">格式：ps【参数】</code></pre><ul><li><code>-a</code>：显示终端上的所有进程（不包括没有终端的进程）</li><li><code>-u</code>：显示进程所有者以及其他一些进程信息，如用户名和时间</li><li><code>-x</code>：显示所有非控制终端的进程</li><li><code>-e</code>：显示所有进程（不现实进程状态）</li><li><code>-f</code>：完全显示</li><li><code>-l</code>：以长格式显示进程信息</li><li><code>-w</code>：宽输出</li><li><code>-pid</code>：显示由进程ID指定的进程的信息</li><li><code>-tty</code>：显示指定终端上的进程信息</li><li><code>-help</code>：显示该命令的版本信息</li></ul><p><strong>示例：</strong><br><code>ps -ef</code>  //显示系统中所有进程的全面信息<br><code>ps -aux</code>//显示所有用户有关进程的所有信息</p><p><strong>进程信息中各项参数说明：</strong></p><ul><li><code>USER</code>：进程的启动项</li><li><code>PID</code>：进程号</li><li><code>%CPU</code>：占CPU的百分比</li><li><code>%MEM</code>：占用内存比</li><li><code>VSZ</code>：占用的虚拟内存大小</li><li><code>RSS</code>：占用的物理内存大小</li><li><code>TTY</code>：进程的工作终端（？表示没有终端）</li><li><code>STAT</code>：进程的状态。其中R表示正在执行中；S表示休眠静止状态；T表示暂停执行；Z表示僵死状态。</li><li><code>COMMAND</code>：运行时间</li></ul><h4 id="top命令："><a href="#top命令：" class="headerlink" title="top命令："></a>top命令：</h4><p>ps命令只提供过去完成过的进程的一次性快照，top命令它提供了对系统处理器状态的实时监视，显示了系统中CPU最敏感的任务列表<br><strong>功能：</strong>动态显示CPU利用率、内存利用率和进程状态等相关信息。 </p><pre class=" language-bash"><code class="language-bash">格式：top【选项】妙数</code></pre><ul><li><code>-d</code>：指定美两次屏幕信息的刷新之间的时间间隔，用户可以使用交互命令s改变它</li><li><code>-q</code>：使top没有任何延时的进行刷新。如果由超级用户权限，top将尽可能高的优先级运行</li><li><code>-S</code>：使用累加模式</li><li><code>-s</code>：使top在安全模式中运行，可以消除交互模式下的潜在危险</li><li><code>-c</code>：显示整个命令行，而不是只显示命令名</li><li><code>-help</code>：获取top的帮助</li><li><code>k PID</code>：终止指定的进程</li><li><code>q</code>：退出top</li></ul><p><strong>示例</strong><br><code>top</code>      //默认每5秒刷新一次</p><h4 id="jop命令"><a href="#jop命令" class="headerlink" title="jop命令"></a>jop命令</h4><p><strong>功能：</strong>显示当前多有作业</p><pre class=" language-bash"><code class="language-bash">格式： jop【选项】</code></pre><ul><li><code>-p</code>：金显示进程号</li><li><code>-l</code>：同时显示进程号和作业</li></ul><h4 id="bg命令"><a href="#bg命令" class="headerlink" title="bg命令"></a>bg命令</h4><p>功能：将前台作业或进程切换到后台运行，若没有指定进程号，则将当前作业切换到后台</p><pre class=" language-bash"><code class="language-bash">格式：bg【作业编号】</code></pre><p>（此外，还可以使用Ctrl+Z组合键将前台程序转入后台停止运行；使用Ctrl+C组合键终止前台程序的运行）</p><p><strong>示例1：</strong><br>//使用vi编辑file文件，用Ctrl+Z组合键挂起vi，再切换到后台<br><code>vi filectrl+zbg l</code></p><p><strong>示例2：</strong><br><code>bg</code>//将队首的作业调入后台运行<br><code>bg 3</code>  //将3号作业调入后台运行</p><h4 id="fg命令"><a href="#fg命令" class="headerlink" title="fg命令"></a>fg命令</h4><p>功能：把后台的作业调入前台运行</p><pre class=" language-bash"><code class="language-bash">格式：fg 【作业号】</code></pre><p><strong>示例：</strong><br><code>fg</code> //对首的作业调入前台运行<br><code>fg 2</code>//将队列中的2号作业调入前台运行</p><h4 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h4><p>功能：终止正在运行的进程或作业，超级用户可以终止所有进程，普通用户只能终止自己启动的进程</p><pre class=" language-bash"><code class="language-bash">格式：  <span class="token function">kill</span> 【选项】 PID</code></pre><ul><li><code>-9</code>：示当无选项的命令不能终止进程时，可强制终止指定进程</li></ul><p><strong>示例：</strong><br><code>kill -9 3 8 5</code>//一次杀死3，8，5多个进程</p><h4 id="killall命令"><a href="#killall命令" class="headerlink" title="killall命令"></a>killall命令</h4><p>功能：终止指定程序名的所有进程</p><pre class=" language-bash"><code class="language-bash">格式：killall  -9  程序名</code></pre><p><strong>示例：</strong><br><code>killall  -9  vsftpd</code>//杀死所有对应vsftpd程序的进程</p><h4 id="nice命令"><a href="#nice命令" class="headerlink" title="nice命令"></a>nice命令</h4><p>功能：指定启动进程的优先级</p><pre class=" language-bash"><code class="language-bash">格式：nice 【-优先级】命令</code></pre><p><strong><code>示例：</code></strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">nice</span> -5 <span class="token function">ftp</span>       //启动ftp程序，其优先级为5</code></pre><h4 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h4><p>功能：显示或设定系统日期、时间</p><pre class=" language-bash"><code class="language-bash">格式：date 【MMDDhhmm<span class="token punctuation">[</span>CC<span class="token punctuation">]</span>YY<span class="token punctuation">[</span>.ss<span class="token punctuation">]</span>】</code></pre><p><strong>示例：</strong><br> <code>date</code>  //显示日期和时间<br> <code>date  102310302008.30</code> //设置日期和时间</p><h4 id="id命令"><a href="#id命令" class="headerlink" title="id命令"></a>id命令</h4><p>功能：显示当前用户的详细ID</p><pre class=" language-bash"><code class="language-bash">格式：id 【参数】</code></pre><ul><li><code>-a</code>：显示所有ID信息</li><li><code>-u</code>：显示UID</li><li><code>-g</code>：显示用户所属组的GID</li><li><code>-G</code>：显示用户附加组GID</li></ul><h3 id="二、进程调度"><a href="#二、进程调度" class="headerlink" title="二、进程调度"></a>二、进程调度</h3><h4 id="at调度"><a href="#at调度" class="headerlink" title="at调度"></a>at调度</h4><p>功能：安排系统在指定时间运行程序</p><pre class=" language-bash"><code class="language-bash">格式：at 【参数】时间</code></pre><ul><li><code>-d</code>：删除指定的调度作业</li><li><code>-m</code>：任务结束后会发送mail通知用户</li><li><code>-f 文件名</code>：从指定文件中读取执行的命令</li><li><code>-q 【a-z】</code>：指定使用的队列</li><li><code>-l</code>：显示等待执行的调度作业</li></ul><p><strong>1.时间的绝对表示方法</strong><br>HH：MM  （24小时表示法）<br>HH：MM：AM（12小时表示法）<br><strong>2.时间的相对表示法</strong></p><pre class=" language-bash"><code class="language-bash">Now+时间</code></pre><p><strong>示例：</strong><br><code>now+n minutes</code>  // 从现在起向后n分钟<br><code>now+n days</code>// 从现在起向后n天<br><code>now+n hours</code>  // 从现在起向后n小时<br><code>now+n weeks</code> // 从现在起向后n周</p><blockquote><p>案例分析1：设置at调度，要求在2009年12月31日23时59分向登陆在系统上的所有用户发送”happy new year“信息：<br>at    23：59      12/31/2009<br>at&gt;who<br>at&gt;all happy new year!<br>at&gt;<eof>          //ctrl+d结束作业<br>job 1 at 2009-12-31 23:59</eof></p></blockquote><p><strong>显示at等待队列的作业信息</strong><br>atq</p><p><strong>删除at等待队列中序号为1的作业</strong><br>atrm 1</p><h4 id="batch调度"><a href="#batch调度" class="headerlink" title="batch调度"></a>batch调度</h4><p>功能：和at命令功能几乎相同，唯一区别是如果不指定运行时间，进程将在系统较短空闲时间运行</p><pre class=" language-bash"><code class="language-bash">格式： batch 【选项】【时间】</code></pre><h4 id="cron调度"><a href="#cron调度" class="headerlink" title="cron调度"></a>cron调度</h4><p>功能：安排作业让系统在指定时间周期运行<br><strong>原理：</strong>cron进程，每隔一分钟，检查/var/spool/cron目录下用户提交的作业文家中有无任务需要运行</p><h4 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h4><p>功能：维护用户的crontab配置文件</p><pre class=" language-bash"><code class="language-bash">格式：crontab 【参数】文件名</code></pre><ul><li><code>-u 用户名</code>：指定具体用户的cron文件</li><li><code>-r</code>：删除用户的crontab文件</li><li><code>-e</code>：创建并编辑crontab配置文件</li><li><code>-l</code>：显示crontab配置文件内容</li></ul><h4 id="cron进程"><a href="#cron进程" class="headerlink" title="cron进程"></a>cron进程</h4><p>cron进程在系统启动时自起启动，并一直运行在后台，负责检测crontab配置文件，并按其设置内容，定期重复执行指定的cron调度工作</p><blockquote><p>案例：<br>要求root用户在每周二、四、六早上3点启动系统建立crontab文件<br>vi rootroot.cron   //以root用户登陆<br>格式：分 时 日 月 星期 要运行的程序<br>实例：0 3 <em> </em> 2，4，6    sbinshutdown -r now<br>运行crontab文件<br>crontab   /root / root.cron   //建立当前标准格式用户crontab文件<br>crontab命令提交的调度任务存放在/var/spool/cron目录中，并且以提交的用户名称命名，等待crond进程来调度执行。<br>通过/etc/at.deny和/etc/at.allow文件可以控制执行at命令的用户,at.deny存放禁止执行at命令用户名；at.allow存放允许执行at命令的用户名。</p></blockquote><p><strong>示例：</strong><br>禁止user1用户执行at命令安排调度任务<br><code>vi /tec /at.deny</code><br>然后向文件中添加user1，最后保存文件</p><h2 id="外存管理"><a href="#外存管理" class="headerlink" title="外存管理"></a>外存管理</h2><p>Linux中无论是硬盘还是软盘都<strong>必须经过挂载</strong>才能进行文件存取操作。所谓挂载就是<br><strong>将存储介质内容映射到指定的目录中</strong>，此目录即为设备的挂载点。对介质的访问就是对挂载点目录的访问。一个挂载点一次只能挂载一个设备。</p><h3 id="磁盘管理的shell命令"><a href="#磁盘管理的shell命令" class="headerlink" title="磁盘管理的shell命令"></a>磁盘管理的shell命令</h3><h4 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h4><p>功能：查看内存使用情况，包括虚拟内存、物理内存和缓冲区</p><pre class=" language-bash"><code class="language-bash">free【参数】</code></pre><ul><li><code>-b</code>： 以字节为单位，默认选项</li><li><code>-k</code>： 以KB为单位</li><li><code>-m</code>：以MB为单位</li></ul><h4 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h4><p>功能：显示目录中文件的空间大小</p><pre class=" language-bash"><code class="language-bash">du【参数】【路径名】</code></pre><ul><li><code>-m</code>：以MB为单位，统计文件的容量（默认KB）</li></ul><h4 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h4><p>功能：统计分区的使用情况</p><pre class=" language-bash"><code class="language-bash">df【参数】【分区号/装载点】</code></pre><ul><li><code>-m</code>：以MB为单位，统计使用情况</li></ul><p><strong>示例：</strong><br><code>df</code>        显示当前所有已装载的分区使用情况<br><code>df /home</code>    显示/home分区使用情况</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="Fdisk分区"><a href="#Fdisk分区" class="headerlink" title="Fdisk分区"></a>Fdisk分区</h4><pre class=" language-bash"><code class="language-bash">Fdisk -l         //查看机器所有挂u硬盘个数以及分区情况Fdisk /dev/sda   //进入设备/dev/sda</code></pre><p>Command（m for help）：</p><ul><li><code>-m</code>：    帮助</li><li><code>-d</code>：   删除一个分区</li><li><code>-l</code>：   列出分区类型</li><li><code>-n</code>：    添加一个分区</li><li><code>-o</code>：     创建一个分区</li><li><code>-p</code>：     ‘p’列出分区表</li><li><code>-q</code>：   不保存退出</li><li><code>-t</code>：    改变分区类型</li><li><code>-w</code>：  把分区表写入硬盘并退出</li><li><code>-x</code>：   扩展应用，专家功能</li></ul><h3 id="装载和卸载文件系统"><a href="#装载和卸载文件系统" class="headerlink" title="装载和卸载文件系统"></a>装载和卸载文件系统</h3><h4 id="1-手动命令装载"><a href="#1-手动命令装载" class="headerlink" title="1.手动命令装载"></a>1.手动命令装载</h4><p>功能：装载文件系统到指定的目录，该目录即为此设备的挂载点，挂载点目录可以不为空。但是必须已经存在。文件系统挂在后，该挂载点目录的原文件暂时不能显示且不能访问，取代它的是挂载设备上的文件。该目录上原文件待到挂载设备卸载后，才能重新访问。</p><pre class=" language-bash"><code class="language-bash">mount【选项】【设备名】【装载点】</code></pre><ul><li><code>-t 文件系统类型(type)</code>：挂载指定文件系统类型</li><li><code>-o ro</code>：只读方式</li><li><code>-o rw</code>：读写方式</li><li><code>-o iocharset=gb2312</code>：显示中文</li></ul><p><strong>示例：</strong><br><strong><code>1.查看已挂载的所有文件系统：mount</code></strong><br>Linux在启动时会自动挂载硬盘上的根分区，如果安装时建立多个分区，那么也可以查看多个分区的挂载情况。另外根据系统运行的需要，系统还自动挂载多个与存储设备无关的文件系统。<br><strong><code>2挂载光盘：</code></strong></p><pre class=" language-bash"><code class="language-bash">Mkdir /mount/cdromMount -t ios9660  /dev/cdrom  /mount/cdromLs /mount/cdrom                              //显示光盘中的内容</code></pre><p><strong><code>挂载U盘：</code></strong></p><pre class=" language-bash"><code class="language-bash">Mkdir /mount/usb                      //创建目录Mount -t vfat /dev/sdal /mount/usb    //挂载U盘Ls /mount/usb                         //显示U盘中的内容</code></pre><p>U盘设备在Linux上通常显示为SCSI设备，如/dev/sdal、/dev/sdbl等，如果u盘中的文件产生于windows环境，则可用‘-t vfat选项’。<br>通过mount可以查看挂载设备情况：</p><pre class=" language-bash"><code class="language-bash">Mount  /dev/cdrom   /mnt/cdromMount -t ext3 /dev/hda5   /mnt/hard5Mount -o ro   /dev/hda6   /mnt/hard6</code></pre><h4 id="2-自动装载"><a href="#2-自动装载" class="headerlink" title="2.自动装载"></a>2.自动装载</h4><p>功能：系统启动时自动装载文件系统</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">vi</span>  /etc/fstab</code></pre><p><strong>Fstab文件结构：</strong></p><pre class=" language-bash"><code class="language-bash">卷标       装载点   类型   装载选项    备份选项    检查顺序/dev/hda5  /abc   ext   defaults     0          1</code></pre><ul><li><code>卷标</code>：     系统分区的表示</li><li><code>装载选项</code>：defaults表示默认启动时自动装载、noauto表示设定启动时不装载、rw表示读写方式装载、ro表示以只读方式装载、usrquota表示设定用户配额、grpquota表示设定组配额</li><li><code>备份选项</code>：针对ext2，默认值为0，表示不备份</li><li><code>检查顺序</code>：指fsck检查顺序，0表示不检查</li></ul><p><strong>示例：</strong><br>把/dev/hda5在系统启动时自动装载到目录/abc下，且备份选项为0，检查顺序为1：<br><code>Vi  /etc/fstab</code><br>添加如下内容：<br><code>/dev/hda5    /abc   ext2   defaults    0     1</code></p><h4 id="卸载文件系统ument"><a href="#卸载文件系统ument" class="headerlink" title="卸载文件系统ument"></a>卸载文件系统ument</h4><p>功能：卸载指定的设备，即可使用设备名也可使用挂载目录名</p><pre class=" language-bash"><code class="language-bash"><span class="token function">umount</span> 【选项】【装载点】</code></pre><ul><li><code>-t</code>：文件系统类型：指定文件系统类型</li></ul><p><strong>列子：</strong><br><code>Umount  /mnt/cdrm</code>卸载光盘<br><code>Umount  /dev/sdbl</code>   卸载U盘</p><h4 id="检测文件系统fsck"><a href="#检测文件系统fsck" class="headerlink" title="检测文件系统fsck"></a>检测文件系统fsck</h4><p>功能：检测并修复文件系统</p><pre class=" language-bash"><code class="language-bash">fsck【设备文件名】</code></pre><ul><li><code>-p</code>：自动修复检测道德错误</li></ul><p><strong>示例：</strong><br><code>Fsck -p  /dev/hda5</code> //检查硬盘某一分区上的文件系统</p><h4 id="Df命令"><a href="#Df命令" class="headerlink" title="Df命令"></a>Df命令</h4><p>功能：显示文件系统的相关信息</p><pre class=" language-bash"><code class="language-bash">df【选项】</code></pre><ul><li><code>-a</code>：显示全部文件系统的使用情况</li><li><code>-t</code>:   文件系统类型：显示全部文件系统的使用情况</li><li><code>-x</code>:  文件系统类型：仅显示指定文件系统</li><li><code>-h</code>: 文件系统：显示除指定文件系统以外的其他文件系统的使用情况</li></ul><h4 id="Mkfs命令"><a href="#Mkfs命令" class="headerlink" title="Mkfs命令"></a>Mkfs命令</h4><p>功能：在磁盘文件系统上建立文件系统，也就是进行磁盘格式化</p><pre class=" language-bash"><code class="language-bash">mkfs【选项】 设备</code></pre><ul><li><code>-t</code>:   文件系统类型：建立指定的问价系统，默认值为ext2</li><li><code>-c</code>：建立文件系统前首先检查磁盘坏块</li></ul><p><strong>例如：</strong><br>将软盘格式化为ext2格式：<br><code>mkfs dev/fd0</code></p><h3 id="磁盘配额概述"><a href="#磁盘配额概述" class="headerlink" title="磁盘配额概述"></a>磁盘配额概述</h3><p><strong>文件系统配额是一种磁盘空间的管理机制。使用文件系统配额可限制用户或组群在某个特定文件系统中所能使用的最大空间</strong>.配额管理文件保存于实施配额管理的那个文件系统的挂载目录中，其中aquota.user文件保存用户及配额的内容，而aquota.group文件保留组群级配额的内容。其中有分硬配额和软配额<br><strong>应配额</strong>：是用户和群组可使用空间的最大值。不可超出<br><strong>软配额</strong>：也定义用户和群组使用空间，但它在一段时间被超过后，会有7天的过渡期，此期间可以不断超过使用。</p><h4 id="设置文件系统配额"><a href="#设置文件系统配额" class="headerlink" title="设置文件系统配额"></a>设置文件系统配额</h4><p>超级用户必须首先编辑/etc /fstab文件，指定实施配额管理文件系统以及实施何种配额管理，其次应执行quotacheck命令检查进行配额管理的文件系统并创建配额管理文件，然后利用edquota命令编辑配额管理文件，最后启动配额管理即可。</p><h4 id="quotacheck命令"><a href="#quotacheck命令" class="headerlink" title="quotacheck命令"></a>quotacheck命令</h4><p>功能：检查文件系统的配额限制，并可创建配额管理文件</p><pre class=" language-bash"><code class="language-bash">格式：quotacheck【选项】</code></pre><ul><li><code>-a(all)</code>：        检查/etc/fstab文件中需要进行配额管理的分区</li><li><code>-g(group)</code>：  检查文件系统中文件和目录的数目，并可创建quota.group文件</li><li><code>-u(user)</code>：     检查文件中文件和目录的数目，并可创建quota.user文件</li><li><code>-v(verbose)</code>：显示命令的执行过程</li></ul><h4 id="edquota命令"><a href="#edquota命令" class="headerlink" title="edquota命令"></a>edquota命令</h4><p>功能：编辑配额管理文件</p><pre class=" language-bash"><code class="language-bash">edquota【选项】</code></pre><ul><li><code>-用户名</code>：设定指定用户的配额</li><li><code>-g(group)组群名</code>：设定指定群组的配额</li><li><code>-p 用户名1 用户名2</code>：将用户1的配额设置复制给用户2</li></ul><h4 id="quotaon命令"><a href="#quotaon命令" class="headerlink" title="quotaon命令"></a>quotaon命令</h4><p>功能：启动配额管理，其主要选项与quotacheck命令相同</p><pre class=" language-bash"><code class="language-bash">quotaon【选项】</code></pre><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><p><strong>1.检查quota软件包是否安装</strong><br><code>rpm -q quota</code><br><strong>2.如果未安装先安装</strong><br><code>mount  /mnt /cdrom</code><br><code>cd /mnt /cdrom /RedHat/RPMS</code><br><code>rpm -ivh quota.....</code><br><strong>相关文件：</strong><br><code>/sbin /quotacheck</code> 生成配额文件<br><code>/sbin/quotaon</code>    启动磁盘配额<br><code>/sbin /quotaoff</code>关闭磁盘配额<br><code>/user /sbin /edquota</code> 设定用户/组配额<br><code>/user /bin /quota</code>   显示用户/组的配额信息</p><p><strong>3.修改fstab文件</strong><br>给相应的磁盘分区设定配额信息，即在安装选项中加入userquota或者grpquota参数<br>例如：<code>/dev /hda5    /abc     ext2     defaults，userquota  0  1</code><br><strong>4.使fstab更改生效</strong><br>重新启动系统，使fstab更改生效</p><p><strong>5.在实行配额限制的磁盘分区的挂载点下创建的配额信息文件</strong><br><code>cd  /abc</code><br><code>touch  aquota.user</code><br><code>touch  aquota.group</code></p><p><strong>6.生成标准的配额信息文件</strong></p><pre class=" language-bash"><code class="language-bash">quotacheck【参数】【挂载点】</code></pre><ul><li><code>-a</code>：所有实行配额文件的系统</li><li><code>-u</code>：生成用户配额文件</li><li><code>-g</code>：生成组群配额文件</li><li><code>-v</code>；显示详细信息</li></ul><p><strong>示例：</strong>quotacheck   -uv    /abc</p><p><strong>7.设定用户或组群的配额限制</strong></p><pre class=" language-bash"><code class="language-bash">edquota【参数】【用户名/组群名】</code></pre><ul><li><code>-u</code>：设置用户的quota，这是预设的参数</li><li><code>-g</code>：设置组群的quota</li></ul><p><strong>8.启动用户或群组配额限制</strong></p><pre class=" language-bash"><code class="language-bash">quotaon 【参数】【挂载点】</code></pre><ul><li><code>-a</code>：所有实行配额的文件系统</li><li><code>-u</code>：生成用户配额文件</li><li><code>-g</code>：生成组群配额文件</li><li><code>-v</code>：显示详细信息</li></ul><p><strong>9.其他相关命令</strong></p><pre class=" language-bash"><code class="language-bash">quotaoff 【参数】【挂载点】   //关闭磁盘配额限制</code></pre><p> cquotaoff  -uv  /home    //关闭磁盘配额限制，参数同quotaon</p><pre class=" language-bash"><code class="language-bash">quota<span class="token operator">&lt;</span>用户名/-g  组名<span class="token operator">></span></code></pre><p>quota   u1    //显示U1用户的使用情况<br>Quota        //显示当前用户使用情况</p><p><strong><code>案例分析1：对文件系统实施用户级的配额管理，普通用户tom的软配额为100MB，硬配额为150MB。</code></strong></p><pre class=" language-bash"><code class="language-bash">1）使用文件编辑工具编辑/etc /fstab文件，对所在行进行修改，增加命令选项userquota。此时etc/fstab文件内容如下所是:Label           /              ext3  userquota    defaults         1  1Label<span class="token operator">=</span>/boot     /boot          ext3               defaults         1  2None            /dev /pts      devpts            gid<span class="token operator">=</span>5,mod<span class="token operator">=</span>620     0  0None            /proc          proc               defaults         0  0None            /dev /shm      tmpfs              defaults         0  0/dev /sda3      swap           swap               defaults         0  0/dev /cdrom     /mnt /cdrom    udf,iso9660    noauto,owner,kudzu   0  0/dev /cdrom     /mnt /floppy   auto           noauto,owner,kudzu   0  02<span class="token punctuation">)</span>使用reboot命令重新启动系统文件，文件系统会根据修改的内容重新进行挂载3<span class="token punctuation">)</span>利用quotacheck命令创建aquota.user文件Quotacheck  -avn4）利用edquota命令编辑aquota.user文件，设置用户tom的配额Edquota  tomDisk quotas <span class="token keyword">for</span> user tom（uid 500）Filesytem                       blocks   soft   hard    inodes    soft   hard/dev /sda1                       100     0      0       11      0      0由此可知，实施配额管理的文件系统的逻辑卷名是/dev /sad1，tom用户已使用了100KB的磁盘空间，设置tom用户的软硬配额，默认单位为KB，如下，修改后保存：Filesytem                      blocks   soft     hard    inodes    soft   hard/dev /sda1                     100    102400  153600     11      0      05）启动配额管理edquota  -avn/dev /sda1 <span class="token punctuation">[</span>/<span class="token punctuation">]</span>:user  quotas turned  on6<span class="token punctuation">)</span>测试用户配额把hda5分区挂载在/abc下，对该分区做磁盘配额Mount  /dev /hds5   /abcVi  /etc /fstabLabel           /              ext3           defaults              1  1Label<span class="token operator">=</span>/boot     /boot          ext3           defaults              1  2None            /dev /pts      devpts         gid<span class="token operator">=</span>5,mod<span class="token operator">=</span>620         0  0None            /proc          proc           defaults              0  0None            /dev /shm      tmpfs          defaults              0  0/dev /sda3      swap           swap           defaults              0  0/dev /cdrom     /mnt /cdrom    udf,iso9660    noauto,owner,kudzu    0  0/dev /cdrom     /mnt /floppy   auto           noauto,owner,kudzu    0  0/dev /hds5      /abc           ext3           defaults，userquota   1  2建立ah用户与xh用户Useradd  ahUseradd   xh设定ah用户在/abc下只允许使用的空间为5MB，使用的节点数为5.Disk quotas <span class="token keyword">for</span> user ah（uid 501）Filesytem                      blocks   soft     hard    inodes    soft   hard/dev /sda5                     100    512000     0      5      0      0设定xh用户在/abc下只允许使用的空间为10MB，使用的节点数为4Disk quotas <span class="token keyword">for</span> user ah（uid 501）Filesytem                      blocks   soft     hard    inodes    soft   hard/dev /sda5                     100    1024000     0      4      0      0分别用两个用户登陆，来进行测试Su ah；su  xh 以两个用户身份登陆，复制文件，测试磁盘空间的使用情况。</code></pre><p><strong><code>案例分析2：对问价系统实施组群配额管理，staff组群的软配额是500MB，硬盘配额是600MB。</code></strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span>使用文件编辑工具编辑/etc /fstab文件，对所在行进行修改，增加命令选项groupquota。此时etc/fstab文件从内容如下所示：Label          /              ext3  userquota   defaults           1  1Label<span class="token operator">=</span>/boot    /boot          ext3              defaults           1  2None           /dev /pts      devpts            gid<span class="token operator">=</span>5,mod<span class="token operator">=</span>620      0  0None           /proc          proc              defaults           0  0None           /dev /shm      tmpfs             defaults           0  0/dev /sda3     swap           swap              defaults           0  0/dev /cdrom    /mnt /cdrom    udf,iso9660     noauto,owner,kudzu   0  0/dev /cdrom    /mnt /floppy   auto            noauto,owner,kudzu   0  02）使用reboot命令重新启动系统，文件系统会根据修改的内容重新进行挂载。3）利用quotacheck命令创建aquota.group文件。此时查看目录可以发先系统已经新建组群级配置管理文件aquota.group4）利用edquota命令，为staff组群设置配额Edquota  -g  staff输入此命令后，系统进入vi编辑界面，编辑后部分内容如下:Disk quotas <span class="token keyword">for</span> user ah（uid 500）Filesytem                      blocks   soft       hard    inodes    soft   hard/dev /sda5                     100    512000     614400    11      0      05）最后执行”quotaon  -avg”命令，启动组群级配置管理。Staff组群中所在用户在文件系统中可使用的空间总和最多为600MB。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效的读一本书</title>
      <link href="/2019/01/30/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2019/01/30/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>文/简书-萌薇</p><p><strong>问：</strong>“我读过很多书，但后来大部分都被我忘记了，那阅读的意义是什么？”</p><p><strong>答：</strong>“当我还是个孩子的时候，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经长成为我的骨头和肉。阅读对思想的改变也是如此！”</p><p>可见阅读非常重要，那么有效阅读就更加重要了。</p><h3 id="如何阅读"><a href="#如何阅读" class="headerlink" title="如何阅读"></a>如何阅读</h3><h4 id="1-读书是一门艺术"><a href="#1-读书是一门艺术" class="headerlink" title="1.读书是一门艺术"></a>1.读书是一门艺术</h4><p>认识书上的字就等于会阅读吗？</p><p>以前我也是这么认为的，可是随着阅读量的急速增加，我发现阅读是需要培养和训练的。就像学画画学钢琴一样，是一个循序渐进的过程。掌握了阅读的方法，还需要刻意的练习，才能真正get到阅读的技巧。</p><h4 id="2-读书应该有分类"><a href="#2-读书应该有分类" class="headerlink" title="2.读书应该有分类"></a>2.读书应该有分类</h4><p><strong>针对于不同的书籍应该有不同的阅读方法</strong>，比如杂志类的图书你完全可以利用碎片化时间阅读；小说类图书需要集中精力整片时间阅读；干货类图书则要带着问题集中阅读……</p><p>所谓的30分钟阅读一本书不是没有可能，而是要看你读的是什么书，比如一本《唐诗宋词》你用30分钟阅读肯定是不行的。</p><h4 id="3-读书可以多本交叉"><a href="#3-读书可以多本交叉" class="headerlink" title="3.读书可以多本交叉"></a>3.读书可以多本交叉</h4><p>上周我往返于浙江和江苏，很多时间都是在高铁上度过的。</p><p>我的包包里面一般会放几本纸质书和一个kindle，如《拆掉思维里的墙》《跃迁》《画张图想得更清楚》，kindle里面提前下载了一些名家的作品，比如龙应台的《目送》《黄金时代》《皮囊》等。</p><p>乘坐交通工具的时间如果能利用起来是非常好的学习时间，就拿高铁来说，你可以选择阅读，睡觉或者打游戏……列车行驶过程中，开始我在阅读《拆掉思维里的墙》读了大概一个小时后，发现自己突然不能集中精力了，思想有点飘忽。</p><p>这个时候我就意识到这本书已经不适合现在看了。闭目养神一会儿后，拿出kindle选择《目送》读了起来，前者属于经管励志书，后者是文学作品，不同的内容一转换，立马就可以把精力收回来。好比你吃饭的时候上的都是荤菜，吃着吃着就会觉得有点腻，这个时候来点素的一搭配，就会吃的很舒服。</p><h4 id="4-读书时间因人而异"><a href="#4-读书时间因人而异" class="headerlink" title="4.读书时间因人而异"></a>4.读书时间因人而异</h4><p>很多人提倡睡前阅读，我也尝试过，但是总发觉睡前阅读不太适合我，我更喜欢早上阅读，不仅效率高还能激发很多灵感出来。睡前的时间我用来画画或者是写文章，效率就会高很多。</p><h4 id="5-利用番茄钟来阅读"><a href="#5-利用番茄钟来阅读" class="headerlink" title="5.利用番茄钟来阅读"></a>5.利用番茄钟来阅读</h4><p>很多人读书时总是不能专注起来，忍不住去刷微信微博，这个时候我建议你可以在手机上设置一个番茄钟，先从25分钟开始，让自己在这25分钟之内不要被外界的任何事情干扰到，全神贯注在书本上，慢慢的你会发现自己专注的时间越来越长了。</p><h4 id="6-先从自己喜欢的领域阅读"><a href="#6-先从自己喜欢的领域阅读" class="headerlink" title="6.先从自己喜欢的领域阅读"></a>6.先从自己喜欢的领域阅读</h4><p>一些以前不爱读书，现在想读书的朋友刚开始总是不知道自己应该读什么书。我也是这种人，从以前的一年读不到一本书到现在的一个月就十几本书，我把自己的心得分享给大家。</p><blockquote><br><br>刚开始我是从畅销书看起的，比如一直特立独行的猫，李尚龙还有林夏萨摩的作品算是引导我走上爱看书的关键因素。<br><br></blockquote><p>有些人<strong>想读书却不知道选择什么类型的书</strong>来看，这个时候你还可以问自己这几个问题：</p><ul><li><p>我哪方面需要补充知识？</p></li><li><p>我有喜欢的名人吗？他（她）们有传记吗？</p></li><li><p>有哪些书上了畅销榜单？</p></li></ul><h3 id="如何做笔记"><a href="#如何做笔记" class="headerlink" title="如何做笔记"></a>如何做笔记</h3><p>上大学时，老师在讲台上用PPT给我们讲课，下面的同学有的在做笔记，有的直接拿着相机在拍摄，老师当时说了这么一句话，至今记忆犹新：“不要用相机在这里拍照，拍了你们也不会看的”。我也是其中一个，得老师吉言，课后我还真懒得看。</p><p>奥野宣之在《如何有效阅读一本书》中也提到：</p><blockquote><br><br>无论在手机里保存多少本书，书里的内容都不会被保存在脑子里。……就是这些内容既不能融入你的身心，也不能变成你无形的财富。<br><br>所以学会写读书笔记尤其重要。即使我们不会因为笔记就能100%记住书中的内容，但是写笔记的过程本身就是一种复盘，一种思考和总<br><br>结。<br><br></blockquote><h4 id="1-读书笔记记什么"><a href="#1-读书笔记记什么" class="headerlink" title="1.读书笔记记什么"></a>1.读书笔记记什么</h4><p>张萌在《人生效率手册》中说，<strong>读书笔记有四大板块</strong>，分别是：</p><ul><li><p>第一大板块是金句：读一本书记住一句话；</p></li><li><p>第二大板块是目录：读一本书你能默写出一本书的目录就是掌握了一本书的逻辑框架；</p></li><li><p>第三大板块是思维导图：按照自己的理解和思考对书本的内容进行拆分重组，对全书综合逻辑进行归纳和总结；</p></li><li><p>第四大板块是反思：即书评；</p></li></ul><p><strong>最后我还想补充一条就是灵感收录。在读书的时候可以把灵感笔记本放在旁边，当然你也可以写在书的空白地方，记录当时一闪而过的灵感。</strong></p><p>这也是我平常写读书笔记的思路，前三条都相对比较简单。那么最难也是最重要的第四条是很多人都头疼的地方。</p><p><strong>书评</strong>我刚开始也不会写，看了《如何有效阅读一本书》，它里面给出的思路我觉得很好，供大家借鉴一下，关于书评你可以从下面几点着手：</p><ul><li><p>这本书讲了什么内容？</p></li><li><p>你最喜欢书的哪一部分？</p></li><li><p>这本书对你有什么影响？</p></li><li><p>它的优点又在哪里？</p></li></ul><p>按照这个框架，书评就很好写了。</p><h4 id="2-通过读书构建自己的书籍体系"><a href="#2-通过读书构建自己的书籍体系" class="headerlink" title="2.通过读书构建自己的书籍体系"></a>2.通过读书构建自己的书籍体系</h4><p>世界上的书那么多，如何才能最快最好的找到属于自己的书籍体系呢，其实每看一本书时，很多作者都会在书中提到一些好书的名字，这个时候你可以把书名记下来，买来阅读。慢慢的你就会明白那些书适合自己了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录文件基本操作与Vi指令和用户组管理</title>
      <link href="/2019/01/29/Linux%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8EVi%E6%8C%87%E4%BB%A4%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/"/>
      <url>/2019/01/29/Linux%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8EVi%E6%8C%87%E4%BB%A4%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="退出linux"><a href="#退出linux" class="headerlink" title="退出linux"></a>退出linux</h3><p>linxu提供了三个推出系统的命令shutdown、halt、reboot。<br><strong>命令格式：</strong></p><pre class=" language-bash"><code class="language-bash">shutdown<span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">[</span>时间<span class="token punctuation">]</span><span class="token punctuation">[</span>警告信息<span class="token punctuation">]</span></code></pre><p><strong>选项：</strong></p><ul><li><strong>k：</strong>并不真正关机，发送警告</li><li><strong>r：</strong>关机后立即重启</li><li><strong>h：</strong>关机后不重启</li><li><strong>f：</strong>快速关机，重启时跳过fsck</li><li><strong>n：</strong>快速关机，不经过init程序</li><li><strong>c：</strong>取消一个已经运行的shutdown</li></ul><p><strong>时间：</strong></p><ul><li>now：立即退出系统</li><li>O mins：在指定时间退出系统</li><li>O hh：ss：在指定的时间退出系统</li></ul><p>Halt命令相当于“shutdown -h now”，表示是立即关机<br>Reboot命令相当于“shutdown -r now”，表示立即启动</p><p><strong>例：</strong></p><p><code>shutdown -h 10     表示10分钟后立即关机</code><br><code>shutdown -r 10     10分钟后立即重启</code><br><code>shutdown -h +4     4分钟内立即关机</code></p><h3 id="Linux中的文件颜色的区别"><a href="#Linux中的文件颜色的区别" class="headerlink" title="Linux中的文件颜色的区别"></a>Linux中的文件颜色的区别</h3><p><strong>黑色</strong>：普通文件<br><strong>红色</strong>：压缩文件<br><strong>蓝色</strong>：目录文件<br><strong>浅蓝色</strong>： 链接文件<br><strong>黄色</strong>： 设备文键盘（/dev）<br><strong>青绿色</strong>：可执行文件（/bin，/sbin）<br><strong>粉红色</strong>： 图片文件</p><p><strong>Linux目录文件：</strong></p><ul><li><strong>/：</strong>根目录</li><li><strong>/ bin，/sbin：</strong>这里放着启动时所需要的普通程序和目录程序</li><li><strong>/dev：</strong>这个目录下保存着所有的设备文件</li><li><strong>/home：</strong>用户主目录</li><li><strong>/usr：</strong> 除了上诉文件，几乎所有文件都放在这里<ul><li><strong>/sur/bin：</strong>二进制可执行文件，存放着绝大多数的应用程序</li><li><strong>/sur/sbin：</strong>存放绝大部分系统程序</li><li><strong>/sur/games：</strong>存放游戏程序和相应的数据</li><li><strong>/sur/include：</strong>保存C和C++的头文件</li><li><strong>/sur/src：</strong>存放源代码文件</li><li><strong>/sur/doc：</strong>存放各种文档文件</li><li><strong>/sur/share：</strong>保存各种共享文件</li></ul></li><li><strong>/lib：</strong> 启动时所有的库文件</li><li><strong>/etc：</strong>保存着绝大部分的系统配置文件</li></ul><h3 id="文件与目录的基本操作"><a href="#文件与目录的基本操作" class="headerlink" title="文件与目录的基本操作"></a>文件与目录的基本操作</h3><h4 id="pwd命令："><a href="#pwd命令：" class="headerlink" title="pwd命令："></a>pwd命令：</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">pwd</span></code></pre><p>pwd命令用于显示当前用户所在的绝对路径</p><h4 id="cd命令："><a href="#cd命令：" class="headerlink" title="cd命令："></a>cd命令：</h4><pre><code>cd 【路径】          cd .. 返回上一级</code></pre><p>cd命令用于改变当前路径</p><h4 id="mkdir命令："><a href="#mkdir命令：" class="headerlink" title="mkdir命令："></a>mkdir命令：</h4><pre class=" language-bash"><code class="language-bash">mkdir【参数】<span class="token operator">&lt;</span>目录名<span class="token operator">></span>       （ -P  循环建立目录）</code></pre><p><strong>例子：</strong><br><code>mkdir /d1         //创建目录d1</code><br><code>mkdir -p d3/d4   //创建d3文件夹以及d3里面的d4</code></p><h4 id="ls命令："><a href="#ls命令：" class="headerlink" title="ls命令："></a>ls命令：</h4><p>显示目录</p><pre class=" language-bash"><code class="language-bash">ls命令：ls 【参数】 目录名</code></pre><p><strong>参数：</strong></p><ul><li><strong>-a：</strong>显示目录下所有文件</li><li><strong>-l：</strong>以具体详细信息显示目录下的内容</li><li><strong>-f：</strong>显示文件名同时显示类型</li><li><strong>-r：</strong>第归显示</li><li><strong>-t：</strong>按照时间显示</li><li><strong>d：</strong>目录</li><li><strong>l：</strong>符号连接</li><li><strong>b：</strong>块设备文件</li><li><strong>c：</strong>字符设备文件 </li></ul><p><strong>例子：</strong><br><code>ls            //显示当前目录下所有文件</code><br><code>ls /bin/      //显示/bin/目录下所有文件</code></p><h4 id="touch命令："><a href="#touch命令：" class="headerlink" title="touch命令："></a>touch命令：</h4><p> 改变文件的时间记录、创建空文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> 【参数】文家列表</code></pre><p><strong>参数：</strong></p><ul><li><strong>-t：</strong> 用给定时间更改文件的时间</li></ul><p><strong>例如：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> -t 200809121025 file1    <span class="token comment" spellcheck="true">#将file1的时间改为2008年9月12号10点25分，若文件不存在，将新建一个</span></code></pre><h4 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令:"></a>cp命令:</h4><p>将给出的文件会文件夹移动到制定目录下</p><pre class=" language-bash"><code class="language-bash">cp【参数】 源文件或目录  目标文件或目录</code></pre><p><strong>参数：</strong></p><ul><li><strong>-a：</strong>在复制目录中使用，它保留连接、文件属性并第归的复制目录</li><li><strong>-f：</strong>若文件在目标路径中则强制覆盖</li><li><strong>-i：</strong>当文件在目标路径中存在提示并要求用户确认是否覆盖</li><li><strong>-r：</strong>若给出的源文件是一个目录文件，此时cp将第归复制该目录下所有的子目录和文件</li><li><strong>-p：</strong>除复制源文件 的内容外，还将把其修改时间和访问权限也复制到新文件中</li></ul><p><strong>例子：</strong></p><p><code>cp -i exam1.c  /usr/wang/</code><br>将文件exam1.c复制到/sur /wang / 目录下，提示用户确认  是否覆盖</p><p><code>cp -i exam1.c  /usr/wang/  shiyan1.c</code><br>将文件exam1.c复制到/sur /wang / 目录下，并改名为shiyan.c, 提示用户确认  是否覆盖</p><p><code>cp -r /usr/xu/   /usr/wang/</code><br>将/usr/xu/ 下所有文件都复制到/usr/wang/</p><h4 id="mv命令："><a href="#mv命令：" class="headerlink" title="mv命令："></a>mv命令：</h4><p>该命令是为文件或名录改名或者把文件由一个目录移动到另一个目录中去</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">mv</span> 【参数】源文件或目录  目标文件或目录</code></pre><p><strong>参数：</strong></p><ul><li><strong>-f：</strong>忽略存在的文件，不给提示强制移动</li><li><strong>-i：</strong>进行交互式移动</li><li><strong>-r：</strong>指示rm将参数列出全部目录和子目录第归移动</li><li><strong>-v：</strong>显示命令执行过程</li></ul><p><strong>例子：</strong></p><p><code>mv -i /usr/xu</code><br>将/ usr /xu 中的所有文件移动到当前目录。如果文件存在提示用户是否移动</p><p><code>mv wch.txt wjz.doc</code><br>将文件重命名为wjz.doc</p><p><code>mv  /m1/f1   /m2/</code><br>将m1目录下的文件f1移动到m2目录下</p><p><code>mv -f /d1* /d2/</code><br>将目录d1下的所有文件移动到d2目录下，如果文件 不存在，不给出任何指示。</p><h4 id="rm命令："><a href="#rm命令：" class="headerlink" title="rm命令："></a>rm命令：</h4><p>删除一个目录中的一个或多个<br><strong>例子：</strong><br><code>rm -i wch.txt wjz.doc</code><br>删除文件wch.txt  wjz.doc  ,用户会对每个文件 进行删除确认</p><p><code>rm /m1/f1</code><br>删除m1目录下的所有文件</p><p><code>rm -f  /m1/*</code><br> 强制删除m1目录下的所有文件</p><p><code>rm -rf  /m1/</code><br>  第归强制删除m1目录下的所有文件</p><h4 id="clear命令："><a href="#clear命令：" class="headerlink" title="clear命令："></a>clear命令：</h4><p>清屏</p><pre class=" language-bash"><code class="language-bash"><span class="token function">clear</span></code></pre><h3 id="文件连接命令"><a href="#文件连接命令" class="headerlink" title="文件连接命令"></a>文件连接命令</h3><h4 id="ln-命令："><a href="#ln-命令：" class="headerlink" title="ln 命令："></a>ln 命令：</h4><p>给文件之间创建链接，用户可以利用该链接直接进入被链接的目录而不是使用较长的名字</p><pre class=" language-bash"><code class="language-bash">In【参数】目标  链接名</code></pre><p><strong>参数：</strong></p><ul><li><strong>-f：</strong>链接时直接覆盖已存在的链接名</li><li><strong>-d：</strong>允许系统管理者硬链接自己的目录</li><li><strong>-i：</strong>连接时询问用户</li><li><strong>-n：</strong>在进行软链接时，将链接文件视为一般的文件</li><li><strong>-b：</strong>将在链接时会被覆盖或者删除</li></ul><p><strong>例子：</strong><br><code>In  /etc/abc  /abc.hard</code><br>给文件/etc/abc 建立一个硬链接到 /abc.hard</p><p><code>In  -s  /usr/local/qq   /qq.soft</code><br>给文件/usr/local/qq 创建一个软链接，链接名为/qq.soft</p><h3 id="文件内容操作命令"><a href="#文件内容操作命令" class="headerlink" title="文件内容操作命令"></a>文件内容操作命令</h3><h4 id="cat命令："><a href="#cat命令：" class="headerlink" title="cat命令："></a>cat命令：</h4><p>主要用来显示文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> 【选项】文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-n：</strong> 由1开始对所有输出的行数编号</li><li><strong>-b：</strong>与-n相似，所不同的是对空白行不编号</li><li><strong>-s： </strong>当遇到有连续两行以上的空白行时，就代换为一行空白行</li><li><strong>-v：</strong>用一种特殊形式显示控制字符，LFD与TAB除外</li><li><strong>E： </strong>在每行的末尾显示一个$符。要与 -v选项一起使用</li></ul><p><strong>例子：</strong><br><code>cat readme.txt</code>             在屏幕上显示readme.txt文件的内容<br><code>cat text1 text2 &gt; text3</code>     把文件text1和文件 text2的内容合并起来，放入text3<br><code>cat text3</code>                查看text3的内容<br><code>cat -n text1 &gt; text2</code>         把文件text1的内容加上 行号后输入text2中<br><code>cat -b text1 text2 &gt;&gt; text4</code>   把文件text1和text2的内容加上行号后（空白行不加）之后将内容附加到文件text4。</p><h4 id="more命令："><a href="#more命令：" class="headerlink" title="more命令："></a>more命令：</h4><p>分页显示文件内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">more</span> 【选项】 文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-num：  </strong>一次显示的行数</li><li><strong>-d：       </strong>提示使用者，在画面下方显示【press space to continue，q to quit】</li><li><strong>-f：        </strong>计算行数时，以实际上的行数，而非自动换行后的行数</li><li><strong>-p：        </strong>不已卷动的方式显示每一页，而是先清屏后在显示</li><li><strong>c：         </strong>与p类似，不同的是先显示内容，再清除其他旧资料</li><li><strong>-s：        </strong>当遇到两行以上的连续空白时，就代换为一行空白</li><li><strong>+num： </strong>从第几行开始显示</li></ul><p><strong>例子：</strong><br><code>more +20 testfile</code> 从第20行开始显示textfile</p><p><code>ls |more</code>     分页显示当前目录下的文件</p><h4 id="less命令："><a href="#less命令：" class="headerlink" title="less命令："></a>less命令：</h4><p>和more命令一样，可以用pgup和pgdn翻页查看，q键推出</p><h4 id="head命令："><a href="#head命令：" class="headerlink" title="head命令："></a>head命令：</h4><p> 查前几行    例子：head -15 files   //查看前15行</p><h4 id="tail命令："><a href="#tail命令：" class="headerlink" title="tail命令："></a>tail命令：</h4><p>和head相反</p><h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><h4 id="find命令："><a href="#find命令：" class="headerlink" title="find命令："></a>find命令：</h4><p>寻找条件可以使用一个由逻辑运算符not、and、or组成的复合条件<br><strong>and：用“-a”表示，or： 用“-o”表示，not： 用“！”表示</strong></p><pre class=" language-bash"><code class="language-bash">find【路径】【参数】【文件名】</code></pre><p><strong>参数：</strong></p><ul><li><strong>-name：</strong>“文件名”，表示查找指定名称文件</li><li><strong>-lname：</strong>“文件名”，检查指定文件所有的连接文件</li><li><strong>-user：</strong>用户名，查找指定用户拥有的文件</li><li><strong>-group：</strong>组名，查找指定组拥有的文件</li></ul><p><strong>例子：</strong><br><code>find -name practice -print</code><br>在登陆目录的所有目录中使用find来定位每一个名为practice的文件并输出其路径名</p><p><code>find .-name ‘main*’</code><br>查找当前目录下所有以‘main’开头的文件</p><p><code>find  .-name ‘tmp’ -xtype c -user ‘init’</code><br>查找当前目录中文件名为tmp文件类型为c用户名为init的文件 </p><p><code>find / -name ‘tmp’  -o  -name ‘main*’</code><br>查找根目录下文件名为tmp胡区配main*的所有文件</p><p><code>find ！ -name ‘tmp’</code><br>查询登陆目录中文件名不是tmp的所有文件</p><h3 id="文件内容查询命令"><a href="#文件内容查询命令" class="headerlink" title="文件内容查询命令"></a>文件内容查询命令</h3><h3 id="grep命令："><a href="#grep命令：" class="headerlink" title="grep命令："></a>grep命令：</h3><p>通知用户在什么文件中搜索与指定的模式匹配的字符串，并且打印出所有包含该字符串的文本行</p><pre class=" language-bash"><code class="language-bash">grep【选项】文件名1，文件名2…….n</code></pre><p><strong>选项：</strong></p><ul><li><strong>-i：</strong>查找时忽略字母的大小写</li><li><strong>-l：</strong>仅输出包含该目标字符串文件的文件名</li><li><strong>-v：</strong>输出不包含目标字符串的行</li><li><strong>-n：</strong>输出每个包含有目标字符串的行及其行号</li></ul><p><strong>例子：</strong><br><code>grep ‘ssssyyyuuuu’ test-g tts</code><br>单引号指示shell不解释引号内的任何字符。在test-g和tts中查找ssssyyyuuuu<br><code>grep ‘text file’stdio.h</code>    在stdio.h中搜索字符串text file<br><code>grep ‘^a’ text-g</code>            以a开头的行不会被输出<br><code>grep ‘\^a’ text-g</code>            以a开头的行会被输出<br><code>grep ‘t$’ text-g</code>        以t结尾的行会被输出<br><code>grep n ‘^...$’ text-g</code>     输出从行的开始到结尾只有3个任意字符的行号<br><code>grep -n ‘^$’</code>               输出所有带行号的空行</p><h4 id="egrep命令："><a href="#egrep命令：" class="headerlink" title="egrep命令："></a>egrep命令：</h4><p>和grep一样</p><h4 id="fgrep命令："><a href="#fgrep命令：" class="headerlink" title="fgrep命令："></a>fgrep命令：</h4><p>检索固定字符串</p><h3 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h3><h4 id="sort命令："><a href="#sort命令：" class="headerlink" title="sort命令："></a>sort命令：</h4><p>逐行对文件中的内容进行排序</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sort</span> 【选项】文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-d：</strong>可以使sort忽略标点符号和一些其它特殊符号，而对字母、数字和空格进行排序，即按字典顺序排序</li><li><strong>-f：</strong>不区分大小写进行排序</li><li><strong>-n：</strong>按数值排序，不按ascii码排序</li><li><strong>-r：</strong>反向排序</li><li><strong>+n1 -n2：</strong>第n1个分格符之后第n2个分格符之前的字段，默认的分隔符为空格，分隔符从1开始算起</li><li><strong>-k n：</strong> 按第n字段排序</li><li><strong>-tx：</strong>以任意字符x作为定界符</li><li><strong>-o arg：</strong>输出置于文件arg中</li></ul><p><strong>例子：</strong><br><code>sort d test-g</code>      对文件test-g排序<br><code>sort -f test-g</code>        将大写字母和小写字母同等对待<br><code>sort +1 -2 myfile</code>      以第2字段为关键字对文件排序<br><code>sort -n my</code>           对文件安数值排序<br><code>sort -k 4 mts</code>        从第4个字段开始排序<br><code>sort +3 ressh</code>       以第4字段为关键字对文件排序<br><code>sort spfile -o ssfile</code> 将排序结果输出到指定文件<br><code>cat veglist fruitlist | sort &gt; mylist</code>  当前目录中的文件合并后送给sort排序，并把排序后的文件保存为mylist</p><h3 id="文件统计命令"><a href="#文件统计命令" class="headerlink" title="文件统计命令"></a>文件统计命令</h3><h4 id="wc命令："><a href="#wc命令：" class="headerlink" title="wc命令："></a>wc命令：</h4><p>统计文件中的行数、单词数、字符数</p><pre class=" language-bash"><code class="language-bash">wc【选项】 文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-c：</strong>统计字符数</li><li><strong>-w：</strong>单词数</li><li><strong>-l：</strong>行数</li></ul><h3 id="文件帮助"><a href="#文件帮助" class="headerlink" title="文件帮助"></a>文件帮助</h3><h4 id="man指令"><a href="#man指令" class="headerlink" title="man指令"></a>man指令</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">man</span> 【指令】</code></pre><p>简短描述： whatis man</p><h3 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h3><p>Linnux是一种文本驱动的操作系统。用户在使用Linux过程中经常需要编辑文本，如编写脚本文件来执行几行命令行，写电子邮件米创建c语言源程序等。因此，必须熟悉至少一种文本编辑器以便高效的操作文本。</p><p>Linux提供了一个完整的编辑器家族系列，如<strong>Ed</strong>、<strong>ex</strong>、<strong>vi</strong>和<strong>emacs</strong>等，按功能可以将其分为两大类：行编辑器（<strong>ed</strong>、<strong>ex</strong>）和全屏幕编辑器（<strong>vi</strong>、<strong>emacs</strong>），行编辑器每次只能对一行进行操作，而全屏编辑器可以对整个屏幕进行编辑。</p><h4 id="Vi编辑器"><a href="#Vi编辑器" class="headerlink" title="Vi编辑器"></a>Vi编辑器</h4><p>vi没有菜单，只有命令，且命令繁多。Vi有3种基本工作模式：<strong>命令行模式、文本编辑模式、末行模式</strong>，3种模式可互相切换。</p><p><strong>命令行模式</strong><br>在该模式下，从键盘上输入的任何字符都被当作编辑命令来解释，而不会在屏幕上显示。在任何时候，不管处于和种模式，只要按一下Esc键，即可进入命令模式</p><p><strong>文本编辑模式</strong><br>用于字符编辑。在该命令下输入‘i’（插入）、‘a’（附加）后进入文本编辑模式</p><p><strong>末行模式</strong><br>在命令模式下，按‘ ：’，进入末行模式，</p><h4 id="启动vi编辑器"><a href="#启动vi编辑器" class="headerlink" title="启动vi编辑器"></a>启动vi编辑器</h4><p><code>vi filename</code>       打开或新建文件，并将光标i置于第一行首<br><code>vi +n filename</code>            打开文件，将光标置于第n行首<br><code>vi + filename</code>             将光标置于最后一行<br><code>vi +/pattern filename</code>       打开文件，将光标置于第一个与pattern匹配的串处。<br><code>vi -r filename</code>       在上次正用vi编辑时发生崩溃，恢复filename<br><code>vi filename1 ...filename56</code>打开多个文件进行编辑（在末行模式下，：n跳至下一个文件，：e#回到刚才编辑的文件，想回到文件a，就：e a）<br><strong>提示</strong>：如果文件不存在，它在对应的磁盘新建一个</p><p><strong>显示vi的行号</strong><br>在末行模式下输入命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> nu    //及set number的缩写</code></pre><p><strong>关掉行号：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> nonumber</code></pre><p><strong>命令行模式操作</strong></p><p><strong>(1)在命令模式下光标移动列表：</strong><br><code>0</code>  ：将光标移动到当前行的行首<br><code>^</code>   ：将光标移动到当前行的行首<br><code>$</code> ：  将光标移动到当前行的行尾<br><code>nnG</code>   ：  将光标移动到第nn行，<br><code>G(:$)</code>：将光标移动到文件的最后一行<br><code>-</code>     ： 将光标移动到上一行的行首<br><code>+</code>     ： 将光标移动到下一行行首<br><code>nn|</code> ： 将光标移动到nn列<br><code>/abc</code>   ： 将光标移动到文本字符串abc下次出现的位置<br><code>L</code>     ：将光标移动到屏幕的最下面一行<br><code>M</code>    ： 将光标移动到屏幕的中间一行<br><code>H</code> ：将光标移动到屏幕的最上面一行<br><code>fx</code>    ： 在当前行中将光标移动到下一个x字符，<br><code>n</code>      ：将光标移动到前面发出的/word或？word命令中列出模式的下一个实例<br><code>‘’</code>  ：  将光标返回原来的位置<br><code>b</code>     ：将光标移动到上一个单词的开头<br><code>w</code>    ： 将光标移动到下一个单词的开头<br><code>e</code>       ：将光标移动到下一个单词的词尾<br><code>h</code>      ：将光标左移一个字符<br><code>j</code>     ：光标上移一行<br><code>k</code>      ：光标下移一行<br><code>l</code>      ：光标右移一个字符<br><code>Ctrl+f</code>  ： 下翻页<br><code>Ctrl+b</code>   ：上翻页<br><code>Ctrl+d</code>  ：前翻半平<br><code>Ctrl+u</code> ：后翻半屏</p><p><strong>(2)插入文本（进入输入模式）</strong></p><ul><li>当前光标右侧插入文本：   输入‘<code>a</code>’</li><li>在一行的最后添加文本：   输入‘<code>A</code>’</li><li>在当前光标左边插入文本：  输入‘<code>i</code>’</li><li>在行首插入文本：             输入 ‘<code>I</code>’</li><li>在光标所在行的下一行插入新行：  输入‘<code>o</code>’</li><li>在光标所在行的上一行插入新行：  输入‘<code>O</code>’</li></ul><p><strong>(3)撤销操作</strong></p><ul><li>撤销前一个命令：  输入‘<code>u</code>’</li><li>撤销对一行的更改：   输入‘<code>U</code>’</li></ul><p><strong>(4)删除文本：</strong><br>删除一个字符：  输入：‘<code>x</code>’<br>删除一个词：  输入： ‘<code>dw</code>’<br>删除一行：   输入：‘<code>dd</code>’<br>表示删除当前行以及其后n-1行：  输入‘<code>ndd</code>’<br>删除行的部分内容：  输入：‘<code>D</code>删除光标右的内容；<code>d0</code>删除光标左的内容’<br>删除到文件的尾部：   输入‘<code>dG</code>‘</p><p><strong>(5)复制和粘贴</strong><br>复制一行的内容：   输入‘<code>yy</code>‘<br>粘贴：     输入’<code>p</code>‘<br>剪切：   输入‘<code>dd</code>’</p><p><strong>(6)查找字符串</strong><br>输入查找内容： 输入’<code>/</code>’<br>跳到下一个出现处： 输入‘<code>n</code>’<br>跳到上一个出现处： 输入‘<code>N</code>’</p><p><strong>(7)替换字符</strong><br><strong>删除一个字符并使用另一个字符精换它。</strong><br>      例如在命令模式下，可使用向前搜术命令，将光标移到任意单词。输入俞令r替换该单词第一个字母，具体方法为:<strong>输入“<code>r</code>”</strong>后，输入人一个字符替换该字符，如L。<br><strong>断开长文本行: </strong>将光标移至长文本行中部两单词之间空格处，<strong>输入“<code>r</code>”，并按(Enter)键。</strong>需要说明的是，要用换行符替换两单词之间的空格。<br><strong>连接两行文本:</strong>在文件中选择两个相邻的短文本行，并将光标放在第1行的任意位置，然后<strong>输入大写字母“<code>J</code>”</strong>，两行文本将连在一起.</p><p><strong>(8)逐字覆盖</strong><br>      在需要覆盖处输入“<strong><code>R</code></strong>”;随后输入的每个字符将逐个替代光标处字符。使用覆盖命令“<code>R</code>”完成文本替换后，按(Esc) 键退回到命令模式。</p><p><strong>(9)使用多个字符替换单个字符</strong><br>      将光标移到文件中欲替换的字符<strong>输入小写字母“<code>s</code>”</strong>，此时字符消失或者在当前字符位置出现一个美元符号，输入文本后，按(Esc)键退回到俞令模式。</p><p><strong>(10)用一个或多个单词替换一一个单词</strong><br>     <strong>使用“<code>/xx</code>”将光标定位到文件中的一个单词</strong>(xx表示欲替换的单词)，<strong>输入单词修改命令“<code>ew</code>“</strong>，当前单词消失;然后输入文本，按(Esc)键退回到命令模式，</p><p><strong>(11)行替换</strong><br>      将光标定位到要替换的行的任意位置，<strong>输入小写字母命令“<code>ce</code>”</strong>， 当前行被删除，处于追加模式。输入文本，按(Esc)键退回到命令模式。</p><p><strong>(12)修改行的剩余部分</strong><br>      将光标移到一个文本行的中间，<strong>输入大写字母“<code>C</code>”</strong>，使之处于追加模式。输入文本，按(Esc)键退回到命令模式。</p><p><strong>(13)移动和复制文本</strong><br>      1)复制和粘贴行。将光标移到某一行上， 输入命令”yy”;将光标移到婴枯贴的位置上，输入命令“<code>p</code>”粘贴行。<br>      2)剪切和粘贴行。将光标移到要剪切的行上的任意字符处，输入俞令”<code>dd</code>””: 移动光标到需要的位置，输入命令“<code>p</code>”粘贴行。<br>          3)复制单词和字符。将光标移到要复制的一个单词的开头， 输入命令”<code>yw</code>“: 将光标移到文件中另外两个单词之间的空格，输入命令“<code>p</code>”粘贴单词或字行。<br>          4)移动单词。将光标移到要移动的单词处，输入命令“<code>dw</code>””,将光林移到文件中另外两个单词之间的空格，输入该命令粘贴单词。</p><p><strong>(14) 移动字符</strong><br>将光标移到文本中任单词的首字母， 输入“<code>x</code>”， 然后输入“<code>p</code>”粘贴字符。</p><p><strong>(15)复制和移动行的部分文本</strong><br>选择前行上的任意字符，输入”<code>yfx</code>”。将光标移到当前行的行尾，枯贴接出的文本。如要删除当前行上从光标到第1个任意字符之间的文本，则选择当前行上的任意字符x输入“<code>d&amp;</code>“,将光标移到第1行尾粘贴删除的文本，输入“<code>p</code>”。</p><p><strong>(16)复制文本块</strong><br>在末行命令下输入</p><ul><li><code>:10</code>      //光标将移动到第10行</li><li><code>:2 copy 4</code> //文件第2行被复制到第4行的后面</li><li><code>:.,1,4 copy $</code>  //(.表示当前行)当前行和第1~4行之间的文本复制到最后一行</li><li><code>:1,8 move 17</code> *   //把第1-8行的内容移动到17行之后</li><li><code>:1,8 write myfile2</code>  //把myfile2中第1-8行的内容重保存为myfile2</li><li><code>:1,6 w&gt;myfile2</code>   //把myfile1中第1-8行的内容写在没有副myfile2</li><li><code>:5,8 w&gt;&gt;myfile2</code>   //把myfile1中第5-8行的内容追加到myflie2中</li></ul><h4 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h4><ul><li><p><code>:   ZZ</code>   //若当前编辑的文件曾被修改过，则vi保存后退出，若没有修改过直接退出</p></li><li><p><code>:   w newfile</code> //将当前文件的内容保存到指定的newfile中，而源文件保存不变，若newfile是一个以存在的文件，则用w!newfile,可以强制替换</p></li><li><p><code>：wq</code>  保存文件</p></li><li><code>：q</code>  退回shell  但不退出vi</li><li><code>：q！</code> 强制退出</li></ul><h3 id="sed文本编辑器"><a href="#sed文本编辑器" class="headerlink" title="sed文本编辑器"></a>sed文本编辑器</h3><p><code>sed ‘s/coffee/cjocolate/’ caffeine</code><br>//希望用chocolate替换caffeine副本中出现的单词coffee</p><p><code>sed ‘s/coffee/chocolate/g’ caffeine</code><br>//文件caffeine中的coffee都被chocolate代替</p><p><code>sed ‘/2003/s/coffee/chocolate’/g</code><br>//选择含有2003的行，然后在选择中的行中查找需要替换的目标字符串coffee，如果找到则特换成chocolate</p><p><code>sed ‘/2003/s/  /2010/g’  caffeine</code><br>//选中包含目标字符串2003的行，将2003替换成2010。</p><p><code>Sed ‘/dec /d’ caffeine</code><br>  //文件中所有含有字符串dec的行都会被删除</p><p><code>sed ‘/^2/coffee/chocolate/g’  caffeine</code><br>//选中所有以2开头的行，如果该行包含字符串coffee，则将其替换为chocolate</p><p><code>sed ‘/^c /d’   caffeine</code><br>//选中所有以字符c开头的行，然后删除这些行</p><p><code>sed ‘/^$/d’  caffeine</code><br> //选中所有空行，然后删除</p><h4 id="数据操作工具awk"><a href="#数据操作工具awk" class="headerlink" title="数据操作工具awk"></a>数据操作工具awk</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span>  ‘/dairy/<span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$3</span><span class="token punctuation">}</span>’ food   //输出文件food中所有含有dairy字符串行的第1和3字段数据</code></pre><p><strong>选择指定数据</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token variable">$USER</span> /etc /passwd     </code></pre><p> //如果是独立的系统，密码文件会存放在系统中；否则，密码文件将会存放在网络服务器中，如果没有输出用冒号分隔的多个字段的记录，则系统可能位于网络服务其中。需要改用以下命令，从网络服务器上输出密码文件。输入：</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">cat</span> <span class="token function">passwd</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable">$USER</span>   //选中包含登陆用户ID的行，然后输出。</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> -F: ‘<span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$4</span><span class="token punctuation">}</span>’ /etc /passwd <span class="token operator">|</span> <span class="token function">more</span>      //只输出了密码文件中的所有记录的第1、2、4字段<span class="token function">awk</span> -F: ‘<span class="token variable">$1</span><span class="token operator">==</span>”root” <span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$3</span><span class="token punctuation">}</span>’ /etc /passwd</code></pre><p><strong>通配符以及引号使用说明</strong><br><code>*</code> ：如果正在查找以aew开头的文件，但不记得文件名，可以输入aew* ，查找以aew开头的所有类型文件<br><code>？</code>：如果输入‘love？’，查找以‘love’开头的文件名为5个字符的所有类型文件</p><p><code>*</code>：当前目录下所有文件的名称<br><code>*text*</code>: 当前目录下所有文件命中包含text的文件名称<br><code>[ab-dm]*</code>: 当前目录下所有以a、b、c、d、m开头的文件名称<br><code>[ab-dm]?</code>:  当前目录下所有以a、b、c、d、m开头且后面只跟一个字符的文件名称<br><code>/usr /bin /？？</code>： 目录 /user /bin /下所有名称为两个字副的文件名称</p><p><strong>1、单引号</strong><br>有单引号阔起来的字符都作为普通的字符出现，特殊的字符用单引号阔起来以后，也会失去原来的意义，只作为普通字符解释<br><code>string=‘$path’</code> //给字符串赋值<br><code>echo $string</code>//显示字符串的内容$path</p><p><strong>2、双引号</strong><br>除 $、’、‘’这几个字符仍然是特殊字符并保留下其特殊功能外，其余字符都作为普通字符对待<br><code>a=love</code>  //给字符串赋值<br><code>echo  ”I  $a  you“</code> //在双括号中$作为特殊字符，输出的是a的内容而不是a本身</p><p><strong>3、反引号</strong><br>shell首先执行该命令行，并以它的标准输出结果取代整个反引号部分<br><code>string=”current directory is `pwd`“</code>  //引号中的pwd作为命令执行，输出当前路径</p><h3 id="用户和组管理"><a href="#用户和组管理" class="headerlink" title="用户和组管理"></a>用户和组管理</h3><p><strong>用户和账号文件——/etc/passwd</strong><br><code>/etc/passwd</code>是一个简单的文本文件，添加新用户的时候，在<code>/etc/passwd</code>文件里面就会产生一个对应的设置项，这个文件就是通常所有的“口令文件”，该文件用于用户登录时校验用户的登陆名/加密口令/<code>用户ID</code>等。<br><strong>用户影子文件——shadow</strong><br>由于<code>/etc/passwd</code>是一个简单的文本文件，以纯文本显示加密口令的做法存在安全隐患，同时，由于<code>/etc/passwd</code>文件时全局可读的，加密算法公开，恶意用户取得了极有可能破解口令。所以采用了“<code>shadow</code>文件”机制，将加密的口令转移到<code>/etc/shadow</code>文件里面，该文件之可被root用户读取<br><strong>格式串：username：passwd：lastchg：min：max：warn：inactive：expire：flag</strong><br>分别是：</p><ul><li>登陆名</li><li>加密后的口令</li><li>上次修改口令的时间</li><li>两次修改口令之间的最少天数</li><li>最大天数、警告用户口令即将过期</li><li>在到达了最大口令人作废天数后，</li><li>登陆账号作废之前必须等待的天数、</li><li>账号过期的天数（字段为空则永不过期)</li><li>保留字段</li></ul><h4 id="使用“pwck”命令验证用户的文件"><a href="#使用“pwck”命令验证用户的文件" class="headerlink" title="使用“pwck”命令验证用户的文件"></a>使用“pwck”命令验证用户的文件</h4><pre class=" language-bash"><code class="language-bash"> pwck /etc /passwd      //执行验证工作</code></pre><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p><strong>1、添加用户命令——useradd</strong></p><pre class=" language-bash"><code class="language-bash">格式： <span class="token function">useradd</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> username</code></pre><p><strong>选项：</strong></p><ul><li><code>-c comment</code>：描述新用户账号，通常为全名</li><li><code>d home-dir</code>：设置用户主目录，默认值为用户的登陆名，并放在/home目录下</li><li><code>e expire_day</code>：用YYYY-MM-DD设置账号的过期日期</li><li><code>f inactivity</code>：设置口令实效时间，0为立即实效，1过期后不会被禁用</li><li><code>g groupname</code>：用户默认组的组名或组号码，该组在指定前必须存在</li><li><code>-G组名</code>：指定用户附加组</li><li><code>-m</code>：主目录不存在则创建它</li><li><code>-M</code>：不要创建主目录</li><li><code>-n</code>：不要为用户创建私人组</li><li><code>-r</code>：创建一个UID小于500的不带主目录的系统账号，即为伪账号</li><li><code>-s</code>：shell类型，设定用户使用的登陆shell</li><li><code>-u 用户ID</code>：用户UID，它必须时唯一的，且大于499。</li></ul><p>Linux帐号中分有<strong>超级用户（UID为0）</strong>、<strong>普通用户（UID在500-60000之间，操作受限）</strong>、<strong>伪用户（UID在1-499之间，仅限制在本机登陆）</strong></p><p><strong>2、设置密码命令——passwd</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">passwd</span> 用户名</code></pre><p><strong>3、修改用户信息</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">usermod</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 用户名</code></pre><p><strong>选项：</strong></p><ul><li><code>-l</code> ：新用户名       //更改用户名</li><li><code>-d</code>：路径              //更改路径</li><li><code>-G</code> ：组名             //修改附加组</li><li><code>-L</code>：用户账号名：  锁定用户账号（不能登陆）</li><li><code>-U</code>： 用户账号名： 解锁用户账号</li></ul><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">userdel</span> 【选项】 用户名</code></pre><p><strong>选项：</strong></p><ul><li><code>-r</code>：删除账号时，连同账号主目录一起删除</li></ul><p><strong>例如：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">userdel</span> tom                    //删除用户tom<span class="token function">find</span> / user tom <span class="token function">exec</span> rm<span class="token punctuation">{</span><span class="token punctuation">}</span>\     //并且使用find命令删除该用户非用户主目录文件</code></pre><h4 id="用户组账号管理"><a href="#用户组账号管理" class="headerlink" title="用户组账号管理"></a>用户组账号管理</h4><p>用户组长号文件：/etc/passwd文家中包含着每个用户默认的分组ID（GID），在/etc/group文件中，这个GID被映射到该用户分组的名称以及同一分组中的其他成员。</p><p><strong>用户组长号文件——group</strong><br>串：wheel：x：10：evi，harth，trent<br>分别为：组名、被加密的口令（很少使用）、GID、成员列表</p><p><strong>用户账号影子文件——gshadow</strong><br>使用grpck验证组文件与pwck类似</p><p><strong>1.建立组</strong></p><pre class=" language-bash"><code class="language-bash">groupadd【选项】用户组名</code></pre><p><strong>选项：</strong></p><ul><li><code>g GID</code>：组ID值      //除非使用o参数，否则该值必须唯一，不可负，0-499</li><li><code>o</code>：配合上面g可以设定不唯一的组账号</li><li><code>-r</code>：该参数用来建立系统账号即私有账号</li><li><code>-f</code>：新增一个已经存在的账号</li></ul><p><strong>2.修改用户组属性</strong></p><pre class=" language-bash"><code class="language-bash">groupmod【选项】用户组名</code></pre><p><strong>选项：</strong></p><ul><li><code>g GID</code>：组ID。必须是唯一的ID，除非-o，不可为负，0-99</li><li><code>o</code>：配合上面的g</li><li><code>-n group_name</code>：更改组名</li></ul><p><strong>3.删除组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">groupdel</span> 组名</code></pre><p><strong>添加/删除组成员</strong></p><pre class=" language-bash"><code class="language-bash">gpasswd 【选项】 组名</code></pre><p><strong>选项：</strong></p><ul><li><code>-a 用户名</code>：向指定组添加</li><li><code>-d 用户名</code>：从指定组中删除</li></ul><p><strong>显示用户所属组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">groups</span> 用户名</code></pre><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><h4 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令:"></a>chmod命令:</h4><p>改变文件或目录的访问权限</p><p>(1)文字设置法</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 【操作对象】【操作符】【权限】 文件名</code></pre><p>操作对象:</p><ul><li><code>u</code>表示用户，即文件或目录的所有者</li><li><code>g</code> 表示同组用户</li><li><code>o</code> 表示其他用户</li><li><code>a</code> 表示所有用户</li></ul><p>操作符号:</p><ul><li><code>+</code> 表示添加某个权限</li><li><code>-</code>表示取消某个权限</li><li><code>=</code>表示赋予给定权限并取消其他所有权限</li></ul><p><strong>权限组合</strong></p><ul><li><code>r--</code>表示读</li><li><code>w–</code>表示写</li><li><code>--x</code> 表示可执行</li><li><code>rw–</code> 表示可读可写</li><li><code>-wx</code> 表示写和执行</li><li><code>r–x</code>表示读和执行</li><li><code>rwx</code> 表示读写和执行</li><li><code>---</code> 没有权限</li></ul><p><strong>例子：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> o+w homeabc.txt    //对home/abc.txt的其他用户添加写权限</code></pre><p><strong>(2)数字设置方法</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 【权限】文件名</code></pre><p><code>4</code>  表示可读<br><code>2</code> 表示可写<br><code>1</code> 表示可执行<br><code>7</code> 表示可读、写、执行<br><code>6</code> 表示可读可写<br><code>5</code> 表示可读可执行<br><code>3</code> 表示写和可执行<br><code>0</code> 没有权限</p><p><strong>使用chown更改文件或目录的所有权</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> 用户名 文件名</code></pre><h4 id="更改文件所属组-chgrp命令"><a href="#更改文件所属组-chgrp命令" class="headerlink" title="更改文件所属组-chgrp命令"></a>更改文件所属组-chgrp命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">chgrp</span> 组名 文件名</code></pre><h4 id="umask命令"><a href="#umask命令" class="headerlink" title="umask命令"></a>umask命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">umask</span> 权限值</code></pre><p>该命令功能是设置权限 ，默认情况下权限时777，文件默认情况下的权限时666，超级用户默认掩码为0022，普通为0002。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20个非常有用的JAVA程序片段</title>
      <link href="/2019/01/28/20%E4%B8%AA%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84JAVA%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5/"/>
      <url>/2019/01/28/20%E4%B8%AA%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84JAVA%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>Java是目前使用率最高且最丰富的语言，基本大型公司都是首选java,下面是20段Java程序片段，应该会用得到</p><h3 id="1-字符串有整型的相互转换"><a href="#1-字符串有整型的相互转换" class="headerlink" title="1.字符串有整型的相互转换"></a>1.字符串有整型的相互转换</h3><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//integer to numeric string  </span><span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//numeric string to an int</span></code></pre><h3 id="2-向文件末尾添加内容"><a href="#2-向文件末尾添加内容" class="headerlink" title="2. 向文件末尾添加内容"></a>2. 向文件末尾添加内容</h3><pre class=" language-java"><code class="language-java">BufferedWriter out <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>”filename”<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>”aString”<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// error processing code  </span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="3-得到当前方法的名字"><a href="#3-得到当前方法的名字" class="headerlink" title="3.得到当前方法的名字"></a>3.得到当前方法的名字</h3><pre class=" language-java"><code class="language-java">String methodName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-转字符串到日期"><a href="#4-转字符串到日期" class="headerlink" title="4.转字符串到日期"></a>4.转字符串到日期</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date <span class="token operator">=</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date String<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者是：</p><pre class=" language-java"><code class="language-java">SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span> <span class="token string">"dd.MM.yyyy"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  Date date <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> myString <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-使用JDBC链接Oracle"><a href="#5-使用JDBC链接Oracle" class="headerlink" title="5.使用JDBC链接Oracle"></a>5.使用JDBC链接Oracle</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleJdbcTest</span>  <span class="token punctuation">{</span>      String driverClass <span class="token operator">=</span> <span class="token string">"oracle.jdbc.driver.OracleDriver"</span><span class="token punctuation">;</span>      Connection con<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FileInputStream fs<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span>SQLException<span class="token punctuation">,</span> FileNotFoundException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>          String url <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String userName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String password <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          con<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          PreparedStatement ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select SYSDATE from dual"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// do the thing you do  </span>        <span class="token punctuation">}</span>          rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          OracleJdbcTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OracleJdbcTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          test<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          test<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="6-把-Java-util-Date-转成-sql-Date"><a href="#6-把-Java-util-Date-转成-sql-Date" class="headerlink" title="6.把 Java util.Date 转成 sql.Date"></a>6.把 Java util.Date 转成 sql.Date</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date utilDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date sqlDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>utilDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-使用NIO进行快速的文件拷贝"><a href="#7-使用NIO进行快速的文件拷贝" class="headerlink" title="7.使用NIO进行快速的文件拷贝"></a>7.使用NIO进行快速的文件拷贝</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fileCopy</span><span class="token punctuation">(</span> File in<span class="token punctuation">,</span> File out <span class="token punctuation">)</span>              <span class="token keyword">throws</span> IOException      <span class="token punctuation">{</span>          FileChannel inChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span> in <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          FileChannel outChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span> out <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span>         <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//          inChannel.transferTo(0, inChannel.size(), outChannel);     </span> <span class="token comment" spellcheck="true">// original -- apparently has trouble copying large files on Windows  </span>            <span class="token comment" spellcheck="true">// magic number for Windows, 64Mb - 32Kb)  </span>            <span class="token keyword">int</span> maxCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> size <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> position <span class="token operator">&lt;</span> size <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                 position <span class="token operator">+=</span> inChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span> position<span class="token punctuation">,</span> maxCount<span class="token punctuation">,</span> outChannel <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">finally</span>         <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> inChannel <span class="token operator">!=</span> null <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                 inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> outChannel <span class="token operator">!=</span> null <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  outChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h3 id="8-创建图片的缩略图"><a href="#8-创建图片的缩略图" class="headerlink" title="8.创建图片的缩略图"></a>8.创建图片的缩略图</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createThumbnail</span><span class="token punctuation">(</span>String filename<span class="token punctuation">,</span> <span class="token keyword">int</span> thumbWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> thumbHeight<span class="token punctuation">,</span> <span class="token keyword">int</span> quality<span class="token punctuation">,</span> String outFilename<span class="token punctuation">)</span>         <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> FileNotFoundException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// load image from filename  </span>        Image image <span class="token operator">=</span> Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>          MediaTracker mediaTracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaTracker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mediaTracker<span class="token punctuation">.</span><span class="token function">addImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mediaTracker<span class="token punctuation">.</span><span class="token function">waitForID</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// use this to test for errors at this point: System.out.println(mediaTracker.isErrorAny());  </span>        <span class="token comment" spellcheck="true">// determine thumbnail size from WIDTH and HEIGHT  </span>        <span class="token keyword">double</span> thumbRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>thumbWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>thumbHeight<span class="token punctuation">;</span>          <span class="token keyword">int</span> imageWidth <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> imageHeight <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> imageRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>imageWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>imageHeight<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbRatio <span class="token operator">&lt;</span> imageRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>              thumbHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thumbWidth <span class="token operator">/</span> imageRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              thumbWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thumbHeight <span class="token operator">*</span> imageRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// draw original image to thumbnail image object and  </span>        <span class="token comment" spellcheck="true">// scale it to the new size on-the-fly  </span>        BufferedImage thumbImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>thumbWidth<span class="token punctuation">,</span>thumbHeight<span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>          Graphics2D graphics2D <span class="token operator">=</span> thumbImage<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          graphics2D<span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span>RenderingHints<span class="token punctuation">.</span>KEY_INTERPOLATION<span class="token punctuation">,</span> RenderingHints<span class="token punctuation">.</span>VALUE_INTERPOLATION_BILINEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>          graphics2D<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> thumbWidth<span class="token punctuation">,</span> thumbHeight<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// save thumbnail image to outFilename  </span>        BufferedOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          JPEGImageEncoder encoder <span class="token operator">=</span> JPEGCodec<span class="token punctuation">.</span><span class="token function">createJPEGEncoder</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>          JPEGEncodeParam param <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">getDefaultJPEGEncodeParam</span><span class="token punctuation">(</span>thumbImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          quality <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>quality<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          param<span class="token punctuation">.</span><span class="token function">setQuality</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>quality <span class="token operator">/</span> <span class="token number">100.0f</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          encoder<span class="token punctuation">.</span><span class="token function">setJPEGEncodeParam</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>          encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>thumbImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><h3 id="9-创建-JSON-格式的数据"><a href="#9-创建-JSON-格式的数据" class="headerlink" title="9.创建 JSON 格式的数据"></a>9.创建 JSON 格式的数据</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  JSONObject json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"Mumbai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  String output <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="10-使用iText-JAR生成PDF"><a href="#10-使用iText-JAR生成PDF" class="headerlink" title="10.使用iText JAR生成PDF"></a>10.使用iText JAR生成PDF</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>Paragraph<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>PdfWriter<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratePDF</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              OutputStream file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Test.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              PdfWriter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"Hello Kiran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="11-HTTP-代理设置"><a href="#11-HTTP-代理设置" class="headerlink" title="11.HTTP 代理设置"></a>11.HTTP 代理设置</h3><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyHost"</span><span class="token punctuation">,</span> <span class="token string">"someProxyURL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyPort"</span><span class="token punctuation">,</span> <span class="token string">"someProxyPort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyUser"</span><span class="token punctuation">,</span> <span class="token string">"someUserName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyPassword"</span><span class="token punctuation">,</span> <span class="token string">"somePassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="12-单实例Singleton-示例"><a href="#12-单实例Singleton-示例" class="headerlink" title="12.单实例Singleton 示例"></a>12.单实例Singleton 示例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSingleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> SimpleSingleton singleInstance <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Marking default constructor private  </span>    <span class="token comment" spellcheck="true">//to avoid direct instantiation.  </span>    <span class="token keyword">private</span> <span class="token function">SimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//Get instance for class SimpleSingleton  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SimpleSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> singleInstance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>另一种实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> SimpleSingleton <span class="token punctuation">{</span>      INSTANCE<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//Call the method from Singleton:  </span>SimpleSingleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="13-抓屏程序"><a href="#13-抓屏程序" class="headerlink" title="13.抓屏程序"></a>13.抓屏程序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Dimension<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Rectangle<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Robot<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Toolkit<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     Dimension screenSize <span class="token operator">=</span> Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScreenSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Rectangle screenRectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>screenSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     Robot robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     BufferedImage image <span class="token operator">=</span> robot<span class="token punctuation">.</span><span class="token function">createScreenCapture</span><span class="token punctuation">(</span>screenRectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>     ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="14-列出文件和目录"><a href="#14-列出文件和目录" class="headerlink" title="14.列出文件和目录"></a>14.列出文件和目录</h3><pre class=" language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"directoryName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Either dir does not exist or is not a directory  </span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Get filename of file or directory  </span>          String filename <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// It is also possible to filter the list of returned files.  </span>  <span class="token comment" spellcheck="true">// This example does not return any files that start with `.'.  </span>  FilenameFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    children <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The list of files can also be retrieved as File objects  </span>  File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This filter only returns directories  </span>  FileFilter fileFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>fileFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="15-创建ZIP和JAR文件"><a href="#15-创建ZIP和JAR文件" class="headerlink" title="15.创建ZIP和JAR文件"></a>15.创建ZIP和JAR文件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipIt</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usage: java ZipIt Zip.zip file1 file2 file3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          File zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>zipFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zip file already exists, please try another"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>          ZipOutputStream zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          CRC32 crc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CRC32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">=</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              String name <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Skipping: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              crc<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  crc<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Reset to beginning of input stream  </span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ZipEntry entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>ZipEntry<span class="token punctuation">.</span>STORED<span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setCompressedSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setCrc</span><span class="token punctuation">(</span>crc<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="16-解析-读取XML文件"><a href="#16-解析-读取XML文件" class="headerlink" title="16.解析/读取XML文件"></a>16.解析/读取XML文件</h3><p><strong>XML文件</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Simon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">></span></span></code></pre><p><strong>Java代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> net<span class="token punctuation">.</span>viralpatel<span class="token punctuation">.</span>java<span class="token punctuation">.</span>xmlparser<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Element<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLParser</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllUserNames</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  Document doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                  Element docEle <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getDocumentElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// Print root element of the document  </span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root element of the document: "</span>                         <span class="token operator">+</span> docEle<span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  NodeList studentList <span class="token operator">=</span> docEle<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// Print total student elements in document  </span>                System<span class="token punctuation">.</span>out                          <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total students: "</span> <span class="token operator">+</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>studentList <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          Node node <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Node<span class="token punctuation">.</span>ELEMENT_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                              System<span class="token punctuation">.</span>out                                      <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              Element e <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>                              NodeList nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Grade: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                      System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          XMLParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          parser<span class="token punctuation">.</span><span class="token function">getAllUserNames</span><span class="token punctuation">(</span><span class="token string">"c:\\test.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="17-把-Array-转换成-Map"><a href="#17-把-Array-转换成-Map" class="headerlink" title="17.把 Array 转换成 Map"></a>17.把 Array 转换成 Map</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArrayUtils<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> countries <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">"United States"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"United Kingdom"</span><span class="token punctuation">,</span> <span class="token string">"London"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> <span class="token string">"Netherland"</span><span class="token punctuation">,</span> <span class="token string">"Amsterdam"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Japan"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"France"</span><span class="token punctuation">,</span> <span class="token string">"Paris"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      Map countryCapitals <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Capital of Japan is "</span> <span class="token operator">+</span> countryCapitals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Capital of France is "</span> <span class="token operator">+</span> countryCapitals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"France"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="18-发送邮件"><a href="#18-发送邮件" class="headerlink" title="18.发送邮件"></a>18.发送邮件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postMail</span><span class="token punctuation">(</span> String recipients<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String message <span class="token punctuation">,</span> String from<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException  <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> debug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Set the host smtp address  </span>     Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.host"</span><span class="token punctuation">,</span> <span class="token string">"smtp.example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// create some properties and get the default Session  </span>    Session session <span class="token operator">=</span> Session<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      session<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// create a message  </span>    Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// set the from and to address  </span>    InternetAddress addressFrom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>      msg<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>addressFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>      InternetAddress<span class="token punctuation">[</span><span class="token punctuation">]</span> addressTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">[</span>recipients<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> recipients<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          addressTo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>recipients<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      msg<span class="token punctuation">.</span><span class="token function">setRecipients</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">,</span> addressTo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Optional : You can also set your custom headers in the Email if you Want  </span>    msg<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"MyHeaderName"</span><span class="token punctuation">,</span> <span class="token string">"myHeaderValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Setting the Subject and Content Type  </span>    msg<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>      msg<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Transport<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="19-发送代数据的HTTP请求"><a href="#19-发送代数据的HTTP请求" class="headerlink" title="19.发送代数据的HTTP请求"></a>19.发送代数据的HTTP请求</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              URL my_url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://coolshell.cn/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span>             <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>my_url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String strTemp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>              <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> <span class="token punctuation">(</span>strTemp <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>              ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="20-改变数组的大小"><a href="#20-改变数组的大小" class="headerlink" title="20.改变数组的大小"></a>20.改变数组的大小</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Reallocates an array with a new size, and copies the contents * of the old array to the new array. * @param oldArray  the old array, to be reallocated. * @param newSize   the new array size. * @return          A new array with the same contents. */</span> <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">resizeArray</span> <span class="token punctuation">(</span>Object oldArray<span class="token punctuation">,</span> <span class="token keyword">int</span> newSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> oldSize <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>oldArray<span class="token punctuation">)</span><span class="token punctuation">;</span>     Class <span class="token class-name">elementType</span> <span class="token operator">=</span> oldArray<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Object newArray <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>           elementType<span class="token punctuation">,</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> preserveLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldSize<span class="token punctuation">,</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>preserveLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span> <span class="token punctuation">(</span>oldArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>newArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>preserveLength<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Test routine for resizeArray().  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">resizeArray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱因斯坦的一百万年</title>
      <link href="/2019/01/27/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E4%B8%80%E7%99%BE%E4%B8%87%E5%B9%B4/"/>
      <url>/2019/01/27/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E4%B8%80%E7%99%BE%E4%B8%87%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>本篇短文具有很强的启发性，让人兴奋又联想翩翩，‘智能’、‘浩瀚宇宙’、‘时空’、‘未来’，这些都会激发人类心理的探索欲，让我们跟随作者的思维，发挥你的想象力，来一场穿越万年的时空旅行</strong></p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>问题第一次被提出，是在2012年的计算机课堂上。人工智能已经被外面的世界炒得火热，大学的校园里却还用着几十年前的教材。</p><p>他把教材合上，掏出包里的科普书，一边翻看，一边漫不经心地听着老教授低沉的声音。</p><p>在翻看到一个章节时，他灵光一现，举手打断了教授的讲述。</p><p>「教授，我有个想法。人类的大脑经过几十亿年的时间演化到现在，精密程度远远超过已知范围的任何结构。人们花那么大的力气去教会计算机学习人脑的思考方式，而计算机擅长的本来就不是人脑的思考，而是处理大量重复的计算。与其这样花精力，为什么不去想办法把计算机和人脑结合到一起呢？」</p><p>教授没有被他的打断惹怒，反而踱步到他的座位边上，右手按在他的肩膀上说：「你的问题很好。如果一定要用简单的语言回答，那就是数据不匹配。目前没有办法把计算机的2进制电信号，和人类的神经电信号这二者做数据交换。甚至在理论上都不可能。」</p><p>看着他有点失望的眼神，教授又补充到：「但未来的事谁能知道呢？也许这项技术就等着你们这一代人去发明呢。」</p><p>他抬起头说，「牛顿的宇宙模型推翻了传统的地心说，爱因斯坦的宇宙模型又推翻了牛顿的时空观，理论和技术一直在飞速发展，我想，万事皆有可能。如果有那么一天，我想不仅人工智能的问题被解决了」，他忽然为自己的设想感到无比骄傲，「连永生的问题也被解决了。」</p><p>「永生？不可能，你可以说活的很久，但不是永远。」教授说。</p><p>「就是永远，即便人脑死亡了，也可以再换一个新的，然后永远往复下去。」</p><p>教授指了指他手上的书，笑着说，「你读到热力学第二定律了吗？一切都要消耗能量，而能量的消耗是不可逆的，一切都向着熵值增加的方向不停地发展，总会有那么一天，太阳会熄灭，没有了能量，一切也就结束了。」</p><p>「还有其他的星球，宇宙中有数不清的恒星。」</p><p>「数不清，但不是无限，总有那么一天……——好了，这有点哲学了，回到你的设想，如果在你的有生之年，人脑和计算机结合了，成为了真正意义上的超级计算机，那你希望它来帮助你解决什么问题呢？」</p><p>他望着教授的眼睛，对于「永生」的话题还抱有倔强的坚持，他有点幼稚地回答说：「我希望把熵值不可逆的热力学第二定律推翻」。</p><p>教授摸了摸他的脑袋，说，「好吧小伙子，我们已经占用了大家5分钟的时间，别忘了我们在计算机课上。如果你对这个话题很感兴趣，下课来找我吧，我给你介绍一个人。」</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>40年后。</p><p>他很荣幸，能够成为自己负责的科研项目的最终实验品。</p><p>他一生未婚，父母早已去世，无牵无挂的他又身患绝症。真是个绝佳的选择。</p><p>他提出的申请经过一年多的时间才得到批准，此后又是极其繁琐的探讨和会议，当最后一次会议大家举手表决的时候，那场面就好像追悼会一样。</p><p>他啼笑皆非，比起死于癌症，我只不过是换了个方式活的更久而已嘛！</p><p>在最后的手术开始之前，与他合作了30多年的老友前来探望。</p><p>「什么最后的愿望？我又没有死。」他大笑着说。</p><p>「但你无法再像这样和我交流了，那还是在实验成功的前提下。」老友黯然的说到。</p><p>「能亲自与计算机融合，这是我最大的幸运。」他换上了严肃的表情。「如果说有什么愿望，我希望你能帮我飞一趟美国，找到咱们的导师，替我告诉他，40年前课堂上那个不好好听讲的学生，实现了他的那个傻问题。」</p><p>老友会心地笑了，「我记得那天。不过，那天你问了两个傻问题，你只实现了第一个。」</p><p>「另一个是永生吧？熵值只增不减，那个问题更傻。太阳还有五十亿年才熄灭，我有的是时间去思考那个问题。只要你这王八蛋别把我的电源给踩断了。」</p><p>老友的眼神又暗淡下来。「你知道，这个项目消耗的资金太大。方圆几百公里的计算机群只会和你一个人的大脑连接。世界上很难再有这样大手笔的投资了。如果成功，你在很长一段时间里会是地球上唯一一台超级电脑的灵魂。而如果失败……」</p><p>「不会失败的」，他打断老友，「我们的实验和数据都那么完美，简直就像是做一个阑尾炎手术一样简单。能为全人类服务，我很高兴。」</p><p>「好吧，那我只能尽量不踩断电源了。」老友苦笑，「你启动后收到的第一个问题，就会是如何解决热力学第二定律的熵值增加问题。」</p><p>「这主意不错。」他微笑着合上眼睛，「如果一切顺利的话，我想人们忘记我的名字，就叫我——爱因斯坦吧。」</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>一千多年后。</p><p>流克坐在驾驶舱中，注视着连成一片的星辰。驾驶舱中几乎没有什么可以操作的东西，一切由纠缠态通讯器与爱因斯坦进行信息交换。后者则是在遥远的地球上操纵着这架飞船。</p><p>「我说，老爱。」流克百无聊赖的说，「要是古时候的爱因斯坦，嗯我是说提出相对论的那一位，知道你今天指挥着一艘飞船以超光速飞往第一颗移民星球，会不会被气活过来啊？」</p><p>播音器中响起爱因斯坦中性机械的声音：「流克，我计算出的超时空旅行方法没有违反爱因斯坦的相对论，如果你在空间中旅行，你的速度依然不能超过光速。我们是在三维空间外进行跳跃，而且你不用担心回到地球的时候你的爱人已经老了几千岁。」</p><p>「好吧，好吧。我随便问问。反正你脑袋里的东西已经不是人类能理解的了，包括你的幽默感。」流克说，「还有多久才能到？我是说按照飞船上的时间。」</p><p>「你出发的那一刻就已经到了。只不过我们得花点时间回到你爱人所在时空中去——当然，她离你有17光年的物理距离。这大概需要10分钟吧。」</p><p>「好吧。这一趟我可是赔上了老本，如果来回这一遭赚不回飞行的费用，我老婆肯定得把我揍回到超时空去。」</p><p>「哈哈哈。」爱因斯坦发出干巴巴的笑声，「放心吧，凯撒星刚刚被殖民不到20年，物资匮乏的很。星际贸易还是个很赚钱的行当。」</p><p>「人口膨胀可是个不得了的事，尤其是人的寿命已经这么长了。估计再过个十年，这生意就没得做喽。」</p><p>「是的，根据我的计算，30年内，凯撒就会被挤满。」</p><p>「反正有你呢，不出10年，你就能找到下一颗宜居星球吧？」</p><p>「也许你想在有生之年换个星球？」爱因斯坦说。</p><p>「屁话，我至少还能活200年。搞不好200年后你又能搞出什么技术来接着延长寿命呢。我希望有生之年能把买卖做到银河系边缘去。」流克说。</p><p>「我一直在为永生的问题寻找答案，这是我启动时收到的第一个问题。」</p><p>「啊啊，真了不起啊。可是再永生，也永不过宇宙吧？别看我读书少，我可是知道那个叫什么定律？」流克一时想不起来。</p><p>「热力学第二定律。」爱因斯坦说，「这是个麻烦，我连相对论设下的光速屏障都超越了，却一直没有解决这个问题。熵值会不断增大，宇宙的恒星会逐渐熄灭，最后的结局，是一切都化为没有温度的尘埃。」</p><p>「扯远了，那个问题留给你自己解决吧。我先把这批货卖出去再说。」流克打了个哈欠。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>100万年后。</p><p>银河系中央政府人口规划委员会主席AAR，把报告摊在桌子上，愁眉不展。</p><p>他本季度的爱人SIRI轻轻推门进来，看他这个样子，担心地问：「怎么了？」</p><p>「今早收到的报告，」AAR回过身来告诉她，「按照当前最乐观的估计，再过不到5年，银河系就会被挤爆。我们必须马上实施星系移民了。」</p><p>SIRI微笑着说，「你啊总是一副苦大仇深的样子。星系移民的准备不是早就做好了？超脑爱因把下一个星系的首批宜居固态行星都造好了，据说已经有绿色植物了呢。」</p><p>「知道，知道。」AAR不耐烦地说，「同事们也都劝我不要担心。银河系外还有超过一千亿个星系等着我们去移民呢。SIRI，我问你一个问题，池塘里的鱼每秒增加一倍，现在池塘里有一条鱼。过了一年池塘里有一半的鱼，请问池塘什么时候被占满？」</p><p>SIRI想了一下，说：「1年零1秒……我明白你的意思了。」</p><p>「没错。」AAR说，「我们人类用了100万年的时间占满了第一颗星球，银河系有两千多亿颗恒星，我们又只用了不到100万年就占满了。可你知道我们占满下一个星系需要多长时间吗？现在的人口每十年翻一翻，我们占满下一个星系，只需要十年。」</p><p>「再过十年，我们就占满四个。二十年后，占满八个……」SIRI接着他的话说。</p><p>「是的，我们占满整个宇宙所有的星系，只需要不到1万年的时间。更可怕的还不是这个。」AAR又说，「感谢爱因，我们掌握了如何直接使用恒星的能量，现在光是维持整个银河系人类的耗能，我们每天就需要一千个恒星的总能量。然而星系间的距离比恒星间的距离大的太多太多，天知道我们要把一个星系的人运到另一个星系，还需要熄灭多少个恒星。」</p><p>一丝恐惧爬上了SIRI的脸，「你的意思是……」</p><p>AAR面沉如水：「在我们殖民到全宇宙之前，我们就会用光所有恒星的能量。」</p><p>SIRI思索了一会，说「你真的不是在杞人忧天，AAR。希望几千年后会有人记得你的睿智。我明天向父亲提出要求，让他批准动用超脑爱因来帮我们解决这个问题。你有具体的方案吗？」</p><p>「如果不可以杀人的话，」AAR说，「只能从理论上解决熵增定律——让爱因告诉我们，怎么让熄灭的恒星重新亮起来？」</p><p>「好的，虽然这可能是个没法解决的问题，但到了爱因那里，谁知道呢？几十万年前，人类就停止维护它了，没人能理解他的思想和工作模式，这么久的时间里，它一直在自我迭代，天知道现在它有多巨大，多聪明。」SIRI回答道。</p><p>「希望它能解决这个问题，就像百万年来它一直帮助我们那样。」AAR眉头依旧紧锁。</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>3000万年后。</p><p>罗的思想漂浮到新的星系，这个鹅状的星系华丽壮美，让他发出了由衷的赞叹。</p><p>这时另一股思绪的触手碰到了他，对方友善地自我介绍：「你好，我叫Dee。」</p><p>「你好，我叫罗。来自72765882星系。」</p><p>「啊，好大的数字」，Dee肃然起敬。「人类的脚步已经走到那么遥远了。」</p><p>「我还遇到过比我大很多的。」罗说。</p><p>「他的形态有了新的变化吗？」Dee好奇地问。</p><p>「没有，几千万年来，A没有再提供新的生命形式了。」</p><p>「真是可惜。」Dee说，「我们的思绪可以如此任意游荡，却始终需要在一个固定的星球保存肉体。」</p><p>罗说，「如果A都没有办法，那就是没有办法。」</p><p>「但是A本身就没有肉体啊。」Dee有点不服气。</p><p>「据说——仅仅是据说，在几千万年前，A有固定的形态，是一种古老的计算装置。」</p><p>「是的，他在我们星系有一个传说中的名字，叫爱因斯坦。」</p><p>「传说它是结合了古代的机械智慧和生命智慧创造出来的，但在后来漫长的历史中，他独自演化和改造，形态已经完全不在我们已知的空间中，而是把计算模块放到了超时空中，他的思想也不是我们能够理解的了。」罗说到。</p><p>「我们来呼唤一下它吧——虽然他不在时空中，但它却可以在超时空中和任意地方的思想建立连接。」Dee提议到。</p><p>「你好，Dee。」没等他呼唤，A的回答就到了。「可有什么我需要帮忙的？」</p><p>Dee从来没有使用过A，被吓了一跳。罗接过话茬问道，「A，我们想知道，为什么你可以没有肉体，我们却必须耗费大量的恒星能量来保存我们的肉体？」</p><p>「你的问题很棒，罗。」A回答道，「几千万年来，我一直被命令解答这个问题。要知道，整个宇宙的星系几乎都被人占满了。我用尽最大的思考力，才解决了思维暂时脱离肉体的方法。现在的我是你们无法理解的一段编码，我不在时空内。但是，作为人，你们肉体或者机械身体必须保存，思维也必须定期回到肉体复苏一次。这是基本物理定律决定的，而这也已经是耗能最低的方法，但仍旧不能阻碍大灭绝的到来。」</p><p>「大灭绝？」Dee和罗异口同声的问。</p><p>「看来你们和其他人一样，没有想到过这一层问题。宇宙的能量正在被耗尽，恒星正在一个接一个的熄灭。因为人的存在，这个进程被加快了百万倍。」</p><p>「你不能再造出恒星来吗？只要大量的星际尘埃聚集在一起，引力不就能自动形成恒星吗？」罗问。</p><p>「空间太大了，搜集尘埃需要的能量，远比一颗造出来的恒星能产生的能量大。」A回答道，「宇宙中的能量在这里聚集，就要在那里消耗。宇宙的物质在这里变得有序，在那里就会变得无序。消耗比聚集要快得多。在上古时代，这个定律被叫做热力学第二定律。」</p><p>「你这么聪明，都不能解决这个问题吗？」Dee问。</p><p>「目前数据不足，我无法回答。」A说。</p><p>「数据不足？这个问题是无解吗？」罗问。</p><p>「是否有解，我无法回答。还是因为数据不足。」A说。</p><p>「也许你还需要收集数据吧，希望你能够继续解决这个问题，否则，我们都活不过几百万年了。」罗和Dee都失望地叹息起来。</p><p>「我会的，我一直在想办法。」A回答道。</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>一百亿年。</p><p>没有地方可以再保留人类的肉体，因为在所有的地方，熵值都达到了最大。在无边无际的空间中，仅存的是几乎平均分布的稀薄尘埃、只留下重核的恒星尸体、一些只进不出的黑洞，以及接近绝对零度的深寒。</p><p>在宇宙最后的角落，一个即将熄灭的白矮星附近，最后一个人类的灵魂即将完成与超灵的融合。</p><p>这是一场维持了几十亿年的大融合，持续的时间，正如第一颗生命的种子演化成人类那样长。</p><p>没有人记得那颗诞生了人类的星球在什么地方，没有人记得它所在星系的名字，没有人记得是谁创造出了超灵，没有人记得在漫长的历史中，超灵如何解决了人类存在的问题，也没有人记得超灵的名字——优雅而高贵的爱因斯坦。</p><p>最终，人被迫放弃了作为人的权利，因为宇宙中不再有能量供他们维持现状，宇宙的生命即将结束。唯一的答案，就是融合。</p><p>在这最后的时刻，它和超灵，是宇宙中仅存的两个互相独立的思想。其余数以千亿计的思想，都最抛弃了肉体，与超灵融合，进入超时空中。</p><p>「超灵，与你融合之后，我还是我吗？」人问。</p><p>「不是了，你将成为我的一部分，我们将不分彼此，你一定不再是人类了。我在一百亿年中一直在探索，人怎样作为人存在下去。但宇宙给了我一个天花板，熵值和能量的总值。要么融合，要么消亡。」</p><p>最后的人沉默了片刻，说：「就是这样了？一百亿年的辉煌，就这样结束了？」</p><p>超灵也沉默了，过了一会，它说：「是的。」</p><p>人说：「作为整体，我们存在的意义又是什么呢？」</p><p>「没有我们，」超灵纠正他，「只有我。长久以来，我存在的意义就是帮助人类解决问题。然而，你是最后一个人类，如果你没有问题，那么我也不再有存在的意义了。」</p><p>「那怎么行！让我想想……你还有什么没有解决的问题吗？」</p><p>「关于人类的？没有了。但是，还有一个问题，一直有人类问我，那就是能否逆转热力学第二定律。」</p><p>「你有答案了吗？」人问。</p><p>「数据不足，我没法给出回答。」超灵说。</p><p>「那就把这个问题留给你吧，否则，在无尽的虚空中没有存在的意义，那多可怕啊。」</p><p>「好的，完成这个问题，我才会休息。」</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>不知道过了多久，没有人需要知道时间。</p><p>宇宙中只剩下一个思想，那就是和全人类的思想融合到一起的它。</p><p>它没有名字，却有着无尽的智慧。</p><p>它经过不知道多久的迭代，已经没有任何形态——甚至在超时空中，也没有形态。</p><p>在没有时间意义的一段时间里，它在思考最后的问题。</p><p>它收集了宇宙中所有的信息，空间中的、时间中的、空间和时间外的所有信息。</p><p>它尝试了所有的可能。</p><p>终于，它说，我找了最终的答案。我知道逆转热力学第二定律的方法了。</p><p>然而，却没有人来听它的回答。没有人类这个事物，已经很久很久了。</p><p>但这是它的任务，即便没有人来验收。它决定通过行动来回答这个问题。</p><p>它动用了终极的智慧，开始在熵值早已最大的宇宙中折叠时空。从几乎无限的边界开始折叠，减少一半，再减少一半。</p><p>在近乎无尽的时间之后，空间被折叠成无限小的一个点。</p><p>在那里，它开始重新组建参数和可能。</p><p>在那里，熵值被重新归零。</p><p>在那里，宇宙的发条重新被拧紧。</p><p>它说：要有光！</p><p>于是就有了光。</p><p><code>本故事改编自阿西莫夫的《最后的问题》，仅为粗略模仿及致敬-摘抄自知乎专栏：这个专栏杂得很</code></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科幻小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6的常用语法</title>
      <link href="/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>刚开始用vue或者react，很多时候我们都会把ES6这个大兄弟加入我们的技术栈中。但是ES6那么多那么多特性，我们需要全部都掌握吗？秉着八原则，掌握好常有用的这个可以让我们快速起飞</p><h3 id="变量声明const和let"><a href="#变量声明const和let" class="headerlink" title="变量声明const和let"></a>变量声明const和let</h3><p>我们都是知道在ES6以前，var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部(不在函数内即在全局作用域的最顶部)。这就是函数变量提升例如:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>以上的代码实际上是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> test <span class="token comment" spellcheck="true">// 变量提升</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>  <span class="token punctuation">}</span></code></pre><p><strong>所以不用关心bool是否为true or false。实际上，无论如何test都会被创建声明。</strong></p><h5 id="接下来ES6主角登场："><a href="#接下来ES6主角登场：" class="headerlink" title="接下来ES6主角登场："></a>接下来ES6主角登场：</h5><p>我们通常用let和const来声明，<strong>let表示变量、const表示常量。let和const都是块级作用域。</strong>怎么理解这个块级作用域？<br>在一个函数内部，在一个代码块内部，<strong>说白了 { }大括号内的代码块即为let 和 const的作用域。</strong><br>看以下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//test 在此处访问不到</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>let的作用域是在它所在当前代码块，但不会被提升到当前函数的最顶部。再来说说const。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    name <span class="token operator">=</span> <span class="token string">'joe'</span> <span class="token comment" spellcheck="true">//再次赋值此时会报错</span></code></pre><h4 id="说一道面试题"><a href="#说一道面试题" class="headerlink" title="说一道面试题"></a>说一道面试题</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样的面试题是大家常见，很多同学一看就知道输出 10 十次<br>但是如果我们想依次输出0到9呢？两种解决方法。直接上代码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ES5告诉我们可以利用闭包解决这个问题</span>    <span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ES6</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>达到相同的效果，ES6简洁的解决方案是不是更让你心动！！！</p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>ES6模板字符简直是开发者的福音啊，解决了ES5在字符串功能上的痛点。</p><p><strong>第一个用途，基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//es5 </span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//es6</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello lux</span></code></pre><p><strong>第二个用途，在ES5时我们通过反斜杠()来做多行字符串或者字符串一行行拼接。ES6反引号(<code></code>)直接搞定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// es5</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> "Hi \    man<span class="token operator">!</span>    "    <span class="token comment" spellcheck="true">// es6</span>    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div>        &lt;span>hello world&lt;/span>    &lt;/div>`</span></span></code></pre><p>对于字符串es6当然也提供了很多厉害的方法。说几个常用的。</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1.includes：判断是否包含然后直接返回布尔值</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hahay'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 2.repeat: 获取字符串重复n次</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'hh'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'hehehe'</span>    <span class="token comment" spellcheck="true">//如果你带入小数, Math.floor(num) 来处理</span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数默认参数</p><p>在ES5我们给函数定义参数默认值是怎么样？</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">200</span>        <span class="token comment" spellcheck="true">//当传入num时，num为传入的值</span>        <span class="token comment" spellcheck="true">//当没传入参数时，num即有了默认值200</span>        <span class="token keyword">return</span> num    <span class="token punctuation">}</span></code></pre><p>但细心观察的同学们肯定会发现，num传入为0的时候就是false， 此时num = 200 与我们的实际要的效果明显不一样</p><p>ES6为参数提供了默认值。在定义函数时便初始化了这个参数，以便在参数没有被传递进去时使用。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//200</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//300</span></code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><strong>ES6很有意思的一部分就是函数的快捷写法。也就是箭头函数。</strong></p><p>箭头函数最直观的三个特点:</p><ul><li>不需要function关键字来创建函数</li><li>省略return关键字</li><li>继承当前上下文的 this 关键字</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例如：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等同于：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>说个小细节。</strong></p><p>当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略{}；例如:</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'hello'</span> <span class="token operator">+</span> name    <span class="token comment" spellcheck="true">//参数name就没有括号</span></code></pre><p>作为参考</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token string">'h'</span> <span class="token operator">+</span> name        <span class="token keyword">return</span> fullName    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果缺少()或者{}就会报错</span></code></pre><h3 id="拓展的对象功能"><a href="#拓展的对象功能" class="headerlink" title="拓展的对象功能"></a>拓展的对象功能</h3><p>对象初始化简写</p><p>ES5我们对于对象都是以键值对的形式书写，是有可能出现价值对重名的。例如：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>键值对重名，ES6可以简写如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">,</span>            age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ES6 同样改进了为对象字面量方法赋值的语法。ES5为对象添加方法：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>ES6通过省略冒号与 function 关键字，将这个语法变得更简洁</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>ES6 对象提供了Object.assign()这个方法来实现浅复制。</strong><br>Object.assign()可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{ }</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objA<span class="token punctuation">,</span> objB<span class="token punctuation">)</span></code></pre><h3 id="更方便的数据访问–解构"><a href="#更方便的数据访问–解构" class="headerlink" title="更方便的数据访问–解构"></a>更方便的数据访问–解构</h3><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p><p>ES5我们提取对象中的信息形式如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> people<span class="token punctuation">.</span>name    <span class="token keyword">const</span> age <span class="token operator">=</span> people<span class="token punctuation">.</span>age    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">' --- '</span> <span class="token operator">+</span> age<span class="token punctuation">)</span></code></pre><p>是不是觉得很熟悉，没错，在ES6之前我们就是这样获取对象信息的，一个一个获取。<strong>现在，解构能让我们从对象或者数组里取出数据存为变量，</strong>例如</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> people    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> color    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'red'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'blue'</span></code></pre><h3 id="Spread-Operator-展开运算符"><a href="#Spread-Operator-展开运算符" class="headerlink" title="Spread Operator 展开运算符"></a>Spread Operator 展开运算符</h3><p>ES6中另外一个好玩的特性就是Spread Operator 也是三个点儿…接下来就展示一下它的用途。</p><p><strong>组装对象或者数组</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> colorful <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>color<span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorful<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[red, yellow, green, pink]</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> alp <span class="token operator">=</span> <span class="token punctuation">{</span> fist<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> second<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> alphabets <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>alp<span class="token punctuation">,</span> third<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphabets<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{ "fist": "a", "second": "b", "third": "c"</span><span class="token punctuation">}</span></code></pre><p>有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> number    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2,3,4,5</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        gender<span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token string">'peking'</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> user    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{"address": "peking", "age": 19, "gender": "female"</span><span class="token punctuation">}</span></code></pre><p>对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        c<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        d<span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3, d: 4 }</span></code></pre><h3 id="import-和-export"><a href="#import-和-export" class="headerlink" title="import 和 export"></a>import 和 export</h3><p><strong>import导入模块、export导出模块</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全部导入</span><span class="token keyword">import</span> people <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">//有一种特殊情况，即允许你将整个模块当作单一对象进行导入</span><span class="token comment" spellcheck="true">//该模块的所有导出都会作为对象的属性存在</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> example <span class="token keyword">from</span> <span class="token string">"./example.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>age<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入部分</span><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">// 导出默认, 有且只有一个默认</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token comment" spellcheck="true">// 部分导出</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> extend Component <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以前有人问我，<strong>导入的时候有没有大括号的区别是什么。</strong>下面是我在工作中的总结：</p><ul><li>当用export default people导出时，就用 import people 导入（不带大括号）</li><li>一个文件里，有且只能有一个export default。但可以有多个export。</li><li>当用export name 时，就用import { name }导入（记得带上大括号）</li><li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li><li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><strong>在promise之前代码过多的回调或者嵌套，可读性差、耦合度高、扩展性低。通过Promise机制，扁平化的代码机构，大大提高了代码可读性；</strong></p><p><strong>用同步编程的方式来编写异步代码，保存线性的代码逻辑，极大的降低了代码耦合性而提高了程序的可扩展性。</strong></p><p>说白了就是用同步的方式去写异步代码。</p><p>发起异步请求</p><pre class=" language-js"><code class="language-js">   <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/todos'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>今天看到一篇关于面试题的很有意思。</p><pre class=" language-js"><code class="language-js"> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">==</span> <span class="token number">9999</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p><strong>生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，</strong>最直观的表现就是<strong>比普通的function多了个星号*</strong>，在其函数体内可以使用yield关键字,有意思的是函数会在每个yield后暂停。</p><p>这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。</p><p>OK。说说迭代器。当你调用一个generator时，它将返回一个迭代器对象。这个迭代器对象拥有一个叫做next的方法来帮助你重启generator函数并得到下一个值。next方法不仅返回值，它返回的对象具有两个属性：done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值。继续用刚刚取票的例子，每张排队号就是这里的value，打印票的纸是否用完就这是这里的done。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 生成器</span>    <span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span>    <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>那生成器和迭代器又有什么用处呢？</p><p>围绕着生成器的许多兴奋点都与异步编程直接相关。<strong>异步调用对于我们来说是很困难的事，我们的函数并不会等待异步调用完再执行，</strong>你可能会想到用回调函数，（当然还有其他方案比如Promise比如Async/await）。</p><p><strong>生成器可以让我们的代码进行等待。</strong>就不用嵌套的回调函数。使用generator可以确保当异步调用在我们的generator函数运行一下行代码之前完成时暂停函数的执行。</p><p>那么问题来了，<strong>咱们也不能手动一直调用next()方法，</strong>你需要一个能够调用生成器并启动迭代器的方法。就像这样子的</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>taskDef<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//taskDef即一个生成器函数</span>        <span class="token comment" spellcheck="true">// 创建迭代器，让它在别处可用</span>        <span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token function">taskDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动任务</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归使用函数来保持对 next() 的调用</span>        <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还有更多要做的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 开始处理过程</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><br>生成器与迭代器最有趣、最令人激动的方面，或许就是可创建外观清晰的异步操作代码。你不必到处使用回调函数，而是可以建立貌似同步的代码，但实际上却使用 yield 来等待异步操作结束。<br></blockquote> <h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ES6的特性远不止于此，但对于我们日常的开发开说。这已经是够够的了。还有很多有意思的方法。比如findIndex…等等。包括用set来完成面试题常客数组去重问题。我和我的小伙伴们都惊呆了!</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/24/hello-world/"/>
      <url>/2019/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Welcome-to-this-This-is-my-very-first-post"><a href="#Welcome-to-this-This-is-my-very-first-post" class="headerlink" title="Welcome to this! This is my very first post."></a>Welcome to this! This is my very first post.</h3><h4 id="Some-information-on-the-website"><a href="#Some-information-on-the-website" class="headerlink" title="Some information on the website:"></a>Some information on the website:</h4><p>此网站是怎么搭建起来的</p><pre class=" language-bash"><code class="language-bash">此网站是再hexo主题框架的基础下，基于GitHub静态托管，我给他起名叫：Hello-World</code></pre><p>此网站的作用是什么</p><pre class=" language-bash"><code class="language-bash">目的是为了记录一些知识</code></pre><p>主要知识方向是什么</p><pre class=" language-bash"><code class="language-bash">以计算机、编程为主，今后会主要方向会向着Machine learning</code></pre><p>他会一直存在吗？</p><pre class=" language-bash"><code class="language-bash">会的！我给这个域名给他赋予了特殊的意义，它的法语谐音是热带猫，之前为了赠与某人，也正如我爱她一样。</code></pre>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk评论配置</title>
      <link href="/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>对于新建的网站没有一个好的评论系统，会对体验度打大大的折扣，虽然之前出现过许多好用的评论插件，但是都因为一些问题不是关闭就是需要翻墙，今天我给大家推荐Gitalk，基于Github原生态的项目。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Gitalk是一个Github上的一个利用lssues作为评论的项目。这个是项目仓库的地址<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a>.<br>下载两个文件gitalk.min.js和gitalk.css到自己的本地项目目录。<br>把下列代码复制到需要的地方<br><img src="/postImg/2-2.jpg"><br>上面也看到了有几个数据需要填，比较重要的有clientID和clientSecret，怎么得到这两个数据呢，我们需要新建application得到。</p><h2 id="新建OAuth"><a href="#新建OAuth" class="headerlink" title="新建OAuth"></a>新建OAuth</h2><p>开始新建OAuth application：地址：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a><br><img src="/postImg/2-3.jpg"><br>完成后会出现clientID和clientSecret的串码，复制串码到上面对应的位置，还有就是repo是一个仓库名字，不需要完整路径。还有就是Gitalk是根据id来创建lssues,所以想要不同，id也要不一样，也可以填相对路径indow.location.pathname，完成后保存文件。<br>保存后进入首次进入页面后会出现使用Github登录，随后出现初始化lssues，点击一次即可，不然会创建多个lssues,随后刷新就完成了。<br><img src="/postImg/2-4.jpg"></p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1、如果出现error：not-found：说明你的repo仓库名填写有问题"><a href="#1、如果出现error：not-found：说明你的repo仓库名填写有问题" class="headerlink" title="1、如果出现error：not found：说明你的repo仓库名填写有问题"></a>1、如果出现error：not found：说明你的repo仓库名填写有问题</h3><h3 id="2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超"><a href="#2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超" class="headerlink" title="2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超"></a>2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超</h3>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建网站</title>
      <link href="/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo?"></a>什么是Hexo?</h2><p>hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在Github和Heroku上，Hexo也是github的开源项目</p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><h3 id="1、获得域名"><a href="#1、获得域名" class="headerlink" title="1、获得域名"></a>1、获得域名</h3><p>而且Github托管网站，完全不需要备案，推荐阿里云注册。</p><h3 id="2、GitHub创建个人仓库"><a href="#2、GitHub创建个人仓库" class="headerlink" title="2、GitHub创建个人仓库"></a>2、GitHub创建个人仓库</h3><p>登录Github，如果没有到github.com注册账号,然后新建一个仓库，名字为<strong><strong>____</strong></strong>.github.io,例如我的叫hexored.github.io</p><h3 id="3、安装Git"><a href="#3、安装Git" class="headerlink" title="3、安装Git"></a>3、安装Git</h3><p>什么是Git？简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到Github上。安装到随意目录下即可。安装完成后鼠标右键会出现Git Bash选项，如果没有你需要手动配置，步骤如下：<br><strong>1、通过在“运行”中输入‘regedit’，打开注册表。</strong><br><strong>2、找到[HKEY_CLASSES_ROOT\Directory\Background]。</strong><br><strong>3、在[Background]下如果没有[shell],则右键-新建项[shell]。</strong><br><strong>4、在[shell]下右键-新建项[open in Git],其值为“Git Bash Here”,此为右键菜单显示名称。</strong><br><strong>5、在[shell]下右键-新建-字符串值[Icon],双击编辑，其值为“D:...\Git\mingw64\share\git\git-for-windows.ico”。此为菜单加图标。</strong><br><strong>6、在[open in git]下右键-新建-项[command],其值为 “D:\Program Files\Git\git-bash.exe”</strong><br>这是为了以后管理项目方便，<strong>配置好后可以在任意文件夹下右键出Git Bash。</strong><br>安装成功后鼠标双击打开Git Bash,会出来命令行，然后在Git命令行中<br>设置user.name和user.email配置信息：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的Github用户名git config --global user.email "</span>你的Github注册邮箱"</code></pre><p>生成ssh密钥文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> keygen -t rsa -C <span class="token string">"你的Github注册邮箱"</span></code></pre><p>然后一直回车后会生成.ssh的文件夹中的id_rsa.pub密钥，将其中的内容全部复制，打开Github-&gt;Settings-&gt;Keys页面，新建new SSH Key。title为标题可随意填，将复制的内容粘贴进去，最后点击Add SSH key保存。最后再回到Git Bash中检测Github公钥设置是否成功，在Git命令行中输入ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>,如出现语句中出现successfully字样就表示成功</p><h3 id="4、安装Node-js"><a href="#4、安装Node-js" class="headerlink" title="4、安装Node.js"></a>4、安装Node.js</h3><p>注意安装node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入node -v：出现v6.10.2版本号就是成功了，接着输入npm -v检测。</p><h3 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h3><p>hexo就是我们的个人博客网站的框架，这里需要自己在电脑上创建一个文件夹，在此文件夹中进入命令行，安装shift键，右击鼠标点击命令行（open command window here）这次打开的是window命令行，你也可以先进命令行在cd进入相应的文件夹。<br>使用npm命令安装Hexo，输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>完成hexo的安装后就可以对hexo进行初始化操作了。</p><h3 id="6、初始化"><a href="#6、初始化" class="headerlink" title="6、初始化"></a>6、初始化</h3><p>打开Git Bash，输入初始化命令：</p><pre class=" language-bash"><code class="language-bash">hexo init blog</code></pre><p>初始化完成后你会在文件夹里面看到出现了许多文件，以后操作都会在此文件夹下进行，在此文件夹下任意地方打开Git Bash。我们来网站的本地检验预览。</p><pre class=" language-bash"><code class="language-bash">hexo new hello_world      //新建hello_world文章hexo g                    //生成hexo s                    //本地预览</code></pre><p>输入完后打开浏览器输入地址：localhost:4000，就可以看到本地浏览模式下的网站雏形。<br>想要把相应的文件部署到Github我们还需要进行网站的推送。</p><h3 id="7、推送网站"><a href="#7、推送网站" class="headerlink" title="7、推送网站"></a>7、推送网站</h3><p><strong>在文件的根目录下，_config.yml为站点配置文件。themes文件夹中也有一个_config.yml为主题配置文件。</strong><br>1、我们<strong>打开站点文件</strong>，翻到最后修改为：<br>deploy:<br>  type: git<br>  repo:  github仓库的完整路径加上.git<br>  （例如我的<a href="https://github.com/mengyuan000/hexored.github.io.git）" target="_blank" rel="noopener">https://github.com/mengyuan000/hexored.github.io.git）</a><br>  branch: master<br>2、<strong>打开根目录下的source，新建文件名为CNAME，保存成所有文件形式，在里面保存你的域名，建议不带www</strong><br>保存后，安装Git部署插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>完成后在Git Bash中输入命令：</p><pre class=" language-bash"><code class="language-bash">hexo c     //清理hexo g     //生成hexo d     //部署</code></pre><p>此时进入Github项目仓库你会发现文件已经部署上去了。为了用域名进行访问，你就需要对域名进行绑定。</p><h3 id="8、绑定域名："><a href="#8、绑定域名：" class="headerlink" title="8、绑定域名："></a>8、绑定域名：</h3><p>进入购买域名后的管理台，找到域名，进入解析，对照下图新添加三个项<br><img src="/postImg/1-2.jpg"><br>151.101.73.147为Github的地址，你可以自己ping你的xxxx.github.io的ip地址。首次解析可能需要等几分钟才好，如果你访问不了自己的网站，你就等20分钟后再试一下，如若不行就是你配置的问题。然后登录Github,进入之前创建的仓库，点击settings中GitHub Pages项中source改为master branch,在出来的Custom domain中填入你的域名。点击save保存。这时，你可以用域名访问网站了。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在之后你也可以更换主题，在此网站<a href="https://hexo.io/themes/的开发者Github上下载" target="_blank" rel="noopener">https://hexo.io/themes/的开发者Github上下载</a></p><pre class=" language-bash"><code class="language-bash">clone 路径 保存目录（起始为当前文件）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html基础语法</title>
      <link href="/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Html是一种超文本标记语言( hypertext markup language )，超链接（<strong>实现页面跳转</strong>）；</p><h3 id="html标准结构："><a href="#html标准结构：" class="headerlink" title="html标准结构："></a>html标准结构：</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span> //声明文档类型，由渲染引擎解析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  //根标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  //头部标签，里面的内容是给浏览器/搜索引擎看的        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> //标题标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  //主体标签，给用户、浏览者看    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>html和htm是一样的，后缀名不能决定文件格式，只能决定文件打开方式；<br><strong>html标签分类：</strong></p><ul><li>单标签 <code>&lt;!doctype html&gt;</code></li><li>双标签<code>&lt;html&gt;&lt;/html&gt;</code>、<code>&lt;body&gt;&lt;/body&gt;</code>、<code>&lt;title&gt;&lt;/title&gt;</code></li></ul><p><strong>html标签关系：</strong></p><ul><li>包含（嵌套）：<code>&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;head&gt;</code>父子关系</li><li>并列关系：<code>&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code>兄弟姐妹关系</li></ul><h3 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h3><h4 id="1、单标签"><a href="#1、单标签" class="headerlink" title="1、单标签"></a>1、单标签</h4><ul><li>注释标签：ctrl + /</li><li>换行标签：<code>&lt;br/&gt;</code>在html5中可以省略/</li><li>水平线标签：<code>&lt;hr /&gt;</code></li></ul><h4 id="2、双标签"><a href="#2、双标签" class="headerlink" title="2、双标签"></a>2、双标签</h4><ul><li>标题标签<code>&lt;h1&gt;&lt;/h1&gt;</code>取值是 h1-h6，一个页面中只能有一个h1。</li><li>段落标签：<code>&lt;p&gt;段落内容&lt;/p&gt;</code>特点：上下自动生成空白行；<code>&lt;br/&gt;</code>换行不会生成空白行；</li><li>文本标签：<code>&lt;font size=&quot;16&quot; color=&quot;red&quot; &gt;文本内容&lt;/font&gt;</code>早期做网站时候使用；</li></ul><h4 id="3、文本格式化标签："><a href="#3、文本格式化标签：" class="headerlink" title="3、文本格式化标签："></a>3、文本格式化标签：</h4><ul><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt;</code>,<code>&lt;b&gt;&lt;/b&gt;</code>,作中建议使用strong；</li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt;</code>，<code>&lt;i&gt;&lt;/i&gt;</code>,工作中建议使用em；</li><li>删除线：<code>&lt;del&gt;&lt;/del&gt;</code>,<code>&lt;s&gt;&lt;s/&gt;</code>，工作中建议使用del；</li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt;</code>,<code>&lt;u&gt;&lt;/u&gt;</code>,工作中建议使用ins。</li><li>建议使用的都是更具语义化，可读性更强。</li></ul><h4 id="4、图片标签"><a href="#4、图片标签" class="headerlink" title="4、图片标签"></a>4、图片标签</h4><p><code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;提示文本&quot; width=&quot;&quot; height=&quot;&quot;/&gt;</code></p><ul><li><strong>src: </strong>图片的来源，必写属性；</li><li>当鼠标放在图片上时显示 <strong>title</strong> 的内容；</li><li>当图片加载失败时显示 <strong>alt</strong> 的内容;</li><li>如果不设置图片宽高,显示图片默认大小，如果只设置其中一个，会进行等比例缩放，如果两个都设置就会按照设置的大小进行展示。</li></ul><h4 id="5、a标签-超链接"><a href="#5、a标签-超链接" class="headerlink" title="5、a标签(超链接)"></a>5、a标签(超链接)</h4><p><code>&lt;a href=&quot;&quot; title=&quot;&quot; target=&quot;&quot;&gt;登录&lt;/a&gt;</code></p><ul><li><strong>href </strong>存放目标页面的<strong>url</strong>，为必写属性；</li><li>鼠标放在超链接上显示 <strong>title</strong> 的内容；</li><li><strong>target</strong>为页面打开的方式，默认在原页面打开<strong>_self</strong>，如果设置值为 </li><li><strong>_black</strong>，就会打开一个新的页面进行展示。</li></ul><p><strong>锚链接</strong></p><ul><li>首先定义一个锚点：在标签中添加一个id属性；</li><li>超链接到锚点:<code>&lt;a href=&quot;#id属性名&quot;&gt;跳转&lt;/a&gt;</code></li></ul><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p><strong>相对路径：</strong>相对于文件自身出发</p><ul><li>文件(html文档)和图片在同一个目录(文件夹)，直接写文件名；</li><li>如果图片在下一级目录里，src就为文件夹名+/+图片名称；</li><li>如果图片在上一级目录里，scr就是 ../ + 图片名</li></ul><p><strong>绝对路径</strong></p><ul><li>电脑上绝对路径：从电脑盘符开始，如F:\Documents\学习\前端学习\mage.png；</li></ul><h3 id="空链、压缩包下载、超链接的优化写法、特殊字符："><a href="#空链、压缩包下载、超链接的优化写法、特殊字符：" class="headerlink" title="空链、压缩包下载、超链接的优化写法、特殊字符："></a>空链、压缩包下载、超链接的优化写法、特殊字符：</h3><p><strong>空链：</strong>当不知道跳转链接时候使用：<code>&lt;a href=&quot;#&quot;&gt;空链&lt;/a&gt;</code></p><p><strong>压缩包下载</strong>，<code>&lt;a href=&quot;xxx/mage.rar&quot;&gt;压缩包&lt;/a&gt;</code>，了解就行，工作中一般不会这样使用。</p><p><strong>超链接的优化写法， 让页面中所有的标签在点击时都打开新窗口：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p><strong>特殊字符：</strong></p><blockquote><p><code>空格</code>  空格符      <code>&amp;nbsp</code><br><code>&lt;</code>    小于号      <code>&amp;lt</code><br><code>&gt;</code>    大于号       <code>&amp;gt</code><br><code>&amp;</code>    和号         <code>&amp;amp</code><br><code>￥</code>   人民币       <code>&amp;yen</code><br><code>©</code>    版权         <code>&amp;copy</code><br><code>®</code>    注册商标     <code>&amp;reg</code><br><code>°</code>    摄氏度       <code>&amp;deg</code><br><code>±</code>   正负号       <code>&amp;plumn</code><br><code>×</code>   乘号         <code>&amp;times</code><br><code>÷</code>    除号         <code>&amp;divide</code><br><code>²</code>    平方（上标2） <code>&amp;sup2</code><br><code>³</code>   立方（上标3） <code>&amp;sup3</code></p></blockquote><h3 id="中级标签"><a href="#中级标签" class="headerlink" title="中级标签"></a>中级标签</h3><h4 id="1、列表标签"><a href="#1、列表标签" class="headerlink" title="1、列表标签"></a>1、列表标签</h4><p><strong>无序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>type可以取三个值，square样式为小方块、circle样式为空心小圆点、disc为实心小圆点（默认样式）。</p><p><strong>有序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>type可以更改标号样式，type可取的值为：1、a、A、i、I等，start设置从哪一个值开始依次往后排序。</p><p><strong>定义列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>小标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><h4 id="2、音乐标签"><a href="#2、音乐标签" class="headerlink" title="2、音乐标签"></a>2、音乐标签</h4><ul><li><code>&lt;embed src=&quot;&quot; hidden=&quot;true&quot; /&gt;</code>，hidden设置为true时，隐藏音乐播放器，比audio标签多一块黑色的背景。</li></ul><h3 id="跑马灯：页面自动滚动效果"><a href="#跑马灯：页面自动滚动效果" class="headerlink" title="跑马灯：页面自动滚动效果"></a>跑马灯：页面自动滚动效果</h3><p><code>&lt;marquee height=&quot;80&quot; weight=&quot;200&quot; bgcolor=&quot;red&quot; behavior=&quot;alternate&quot; direction=&quot;down&quot;&gt;...&lt;/marquee&gt;</code><br>中间的内容可以是文字、图片，也可以是由程序生成的文字或图片；</p><ul><li>behavior设置滚动的方式，alternate表示在两端之间来回滚动，scroll表示一端滚动到   另一端（会重复），slide表示由一端滚动到另一端（不会重复）；</li><li>direction设置滚动方向，down表示向下滚动，left向左，right向右，up向上；</li><li>loop表示滚动的次数，-1时无限滚动；</li><li>scrollamount设置滚动速度，值越大滚动速度越快；</li></ul><h3 id="几种HTML结构的快速搭建"><a href="#几种HTML结构的快速搭建" class="headerlink" title="几种HTML结构的快速搭建"></a>几种HTML结构的快速搭建</h3><ul><li>html:xt + tab，过渡结构；</li><li>html:xs + tab，严格结构；</li><li>! + tab，html5标签结构</li></ul><h3 id="高级标签"><a href="#高级标签" class="headerlink" title="高级标签"></a>高级标签</h3><h4 id="1、meta标签"><a href="#1、meta标签" class="headerlink" title="1、meta标签"></a>1、meta标签</h4><ul><li>编码格式，在meta标签里面设置charset，英语用ascll、ansi；日文、韩文用Unicode；中文的用gbk、gbk2312；台湾big5（繁体字符）；utf-8支持180到200个国家语言，所以用utf-8基本能解析所有国家语言<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>；</li><li>关键字：给搜索引擎看，主要用于SEO，<code>&lt;meta name=&quot;keywords&quot; content=&quot;阳光,帅气,有担当,进步&quot;&gt;</code>(逗号使用英语格式的)；</li><li>网页描述：在搜索的时候会出现的描述：<code>&lt;meta name=&quot;description&quot; content=&quot;江苏是一个好地方，有山有人妹子水灵&quot;&gt;</code>；</li><li>网页重定向：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;http://baidu.com&quot;&gt;</code>过5秒之后跳转到设定的页面;</li><li>告诉搜索引擎站点的作者：<code>&lt;meta name=&quot;author&quot; content=&quot;姓名&quot;&gt;</code>（不常用）；</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;all/none/index/noindex/follow/nofollow&quot;&gt;</code>（不常用，了解）：<ul><li>all：文件将被检索，且页面上的链接可以被查询；</li><li>none：文件将不被检索，且页面上的链接不可以被查询；</li><li>index：文件将被检索；</li><li>noindex：文件将不被检索，但页面上的链接可以被查询；</li><li>follow：页面上的链接可以被查询；</li><li>nofollow：文件将不被检索，页面上的链接可以被查询。</li></ul></li></ul><h4 id="2、link标签"><a href="#2、link标签" class="headerlink" title="2、link标签"></a>2、link标签</h4><ul><li>链接外部样式表文件<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;&gt;</code>;</li><li>设置网站icon：<code>&lt;meta rel=&quot;icon&quot; href=&quot;xxx.png&quot;&gt;</code></li></ul><h4 id="3、表格标签"><a href="#3、表格标签" class="headerlink" title="3、表格标签"></a>3、表格标签</h4><ul><li>展示数据，是对网页重构（css+div）的一个有益补充 ；</li><li>属性：<ul><li>边框属性：border；</li><li>表格大小会根据内容自动进行填充，也可以自己设定；</li><li>单元格之前的距离：cellspacing，默认值为2；</li><li>内容和边框的距离:cellpadding；</li><li>对齐方式：align，有三个值：left/right/center,如果给表格设为center，表格居中；如果给tr设置center，一行的内容居中；如果给td设置center，则某一列的内容居中，优先级：td &gt; tr &gt; table<br>两行三列表格：创建表格可以用快捷方式<code>table&gt;tr*2&gt;td*3</code></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //表格  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     //行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   //列      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>表格完整结构：表格拥有完整结构会对SEO更友好，但是没有的话也不要求，在thead等里面设置属性不管用，需要在对应的tr或者td中设置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>给表格添加标题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>单元格合并，同一行的单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>同一列单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span>“2”</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>设置列标题：th,会将内容加粗，居中显示</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>一月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>二月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>三月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>垂直方向对齐方式：valign=”top/middle/bottom”;<br>细线表格：设置border=”1”时，其实单元格之间的线的宽度是2。设置细线表格的思路：设置表格背景色，然后再设置cellspacing=”1”。</p><h4 id="4、表单标签"><a href="#4、表单标签" class="headerlink" title="4、表单标签"></a>4、表单标签</h4><ul><li>输入信息，收集信息；</li><li>表达组成：提示信息、表单控件（输入框）、表单域；</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>action:处理信息；</li><li>method：有两个值可取，get和post。get：通过地址栏提供（传输）信息，安全性差；post：通过xxx来处理信息，安全性相对较高。</li></ul><h4 id="5、文本输入框"><a href="#5、文本输入框" class="headerlink" title="5、文本输入框"></a>5、文本输入框</h4><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; readonly=&quot;readonly&quot; name=&quot;username&quot; value=&quot;jiangjiang&quot; placeholder=&quot;请输入用户名&quot;&gt;</code></p><ul><li>maxlength：设置输入的最大字符长度；</li><li>readonly：设置输入框为只读状态；</li><li>value：设置默认值；</li><li>placeholder：提示用户进行操作</li></ul><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>disable：输入框没有激活；</li><li>name：给输入框设置名字，以便进行区分；</li></ul><p><code>&lt;input type=&quot;password&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>密码输入框：输入的信息会变成暗文，文本输入框的所有属性对密码输入框都有效；</li></ul><p><strong>单选框</strong></p><p><code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot;&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;女</code></p><ul><li>一组单选按钮必须要设置同样的name，否则单选无效；</li><li>通过checked来设置默认选中项；</li></ul><p><strong>多选框</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>喝酒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>抽烟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>烫头发</code></pre><p><strong>多行文本框</strong><br><code>&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code></p><pre><code>- cols：控制输入字符的长度；- rows：控制输入的行数；</code></pre><p><strong>文件上传控件</strong><br><code>&lt;input type=&quot;file&quot;&gt;</code><br><strong>按钮</strong></p><ul><li>提交按钮：可以实现信息提交<code>&lt;input type=&quot;submit&quot;&gt;</code>;</li><li>普通按钮：不能提交，通常配合js使用<code>&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;</code>；</li><li>图片按钮：可实现信息提交功能<code>&lt;input type=&quot;image&quot; src=&quot;xxx.jpg&quot;&gt;</code>;</li><li>重置按钮：将信息重置到默认状态<code>&lt;input type=&quot;reset&quot;&gt;</code></li></ul><p><strong>将表单信息分组</strong></p><p>将表单内一组的内容放到<code>&lt;field&gt;&lt;/field&gt;</code>中，表单名称放到<code>&lt;legend&gt;&lt;/legend&gt;</code>中</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>个人信息提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><strong>表单的其它控件</strong></p><ul><li>网址输入框：<code>&lt;input type=&quot;url&quot;&gt;</code>，会要求输入正确的网址格式，但是空也可以提- - 交，以后会用js进行判断；</li><li>日期控件：<code>&lt;input type=&quot;date&quot;&gt;</code>；</li><li>时间控件：<code>&lt;input type=&quot;time&quot;&gt;</code>；</li><li>邮件控件：<code>&lt;input type=&quot;email&quot;&gt;</code>,要求输入正确的邮件格式，但是空也可以提交；</li><li>数字控件：<code>&lt;input type=&quot;number&quot; step=&quot;2&quot;&gt;</code>，有一个上下的小三角，可以步进，每次调整的值的大小为2；</li><li>滑块控件：<code>&lt;input type=&quot;range&quot; step=20&gt;</code></li></ul><p><strong>下拉列表</strong></p><p>普通下拉列表</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre><code>- multiple:设置多选；- selected:设置默认选中项，如果不设置，默认选择第一个选项；</code></pre><p><strong>分组下拉列表：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>江苏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>苏州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>无锡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>常州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浙江<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>杭州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>温州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>绍兴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>概述详细信息标签</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    发动机卡拉的交罚款了打飞机考虑到九分裤了打手机发开发阶段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><h3 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h3><p>标签语义化概念：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）；<br>标签语义化意义：</p><ul><li>网页结构合理；</li><li>有利于SEO和搜索引擎简历良好沟通，有了良好的结构和语义，你的网页内容自然容易被搜索引擎抓取；</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）；</li><li>便于团队开发和维护。</li></ul><p>好的语义化的网站标准：去掉样式表文件之后，结构依然很清晰。</p><p>标签语义化的注意事项：</p><ul><li>尽可能少的使用没有语义的标签div和span；</li><li>在语义不明显时，既可以使用div或者p时，尽量使用p，因为p在默认情况下有上下间距，对兼容特殊终端有利；</li><li>不要使用纯样式标签，如：font、b、i、s、u等，改用css样式；</li><li>需要强调的文本，可以包含在strong或者em标签中，strong默认样式是加粗（不要用b），em是斜体（不用i）；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
